
RTOS_Task5_GiveandTake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000027ee  00002882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f7  0080007a  0080007a  0000289c  2**0
                  ALLOC
  3 .stab         00004578  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b12  00000000  00000000  00006e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	df 93       	push	r29
      a2:	cf 93       	push	r28
      a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x14>
      a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x16>
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	1a 82       	std	Y+2, r1	; 0x02
      ae:	19 82       	std	Y+1, r1	; 0x01
      b0:	20 e6       	ldi	r18, 0x60	; 96
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	86 ea       	ldi	r24, 0xA6	; 166
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	b9 01       	movw	r22, r18
      ba:	45 e5       	ldi	r20, 0x55	; 85
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	01 e0       	ldi	r16, 0x01	; 1
      c4:	fe 01       	movw	r30, r28
      c6:	31 96       	adiw	r30, 0x01	; 1
      c8:	7f 01       	movw	r14, r30
      ca:	cc 24       	eor	r12, r12
      cc:	dd 24       	eor	r13, r13
      ce:	aa 24       	eor	r10, r10
      d0:	bb 24       	eor	r11, r11
      d2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xTaskGenericCreate>
      d6:	1c 82       	std	Y+4, r1	; 0x04
      d8:	1b 82       	std	Y+3, r1	; 0x03
      da:	2c e6       	ldi	r18, 0x6C	; 108
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	8a ec       	ldi	r24, 0xCA	; 202
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fe 01       	movw	r30, r28
      e4:	33 96       	adiw	r30, 0x03	; 3
      e6:	b9 01       	movw	r22, r18
      e8:	45 e5       	ldi	r20, 0x55	; 85
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	02 e0       	ldi	r16, 0x02	; 2
      f2:	7f 01       	movw	r14, r30
      f4:	cc 24       	eor	r12, r12
      f6:	dd 24       	eor	r13, r13
      f8:	aa 24       	eor	r10, r10
      fa:	bb 24       	eor	r11, r11
      fc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xTaskGenericCreate>
     100:	0e 94 94 00 	call	0x128	; 0x128 <init>
     104:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <vTaskStartScheduler>
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	0f 91       	pop	r16
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	08 95       	ret

00000128 <init>:

	/*Never Enter Here */
	return 0;
}

void init(void){
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
     130:	e7 e3       	ldi	r30, 0x37	; 55
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	8f ef       	ldi	r24, 0xFF	; 255
     136:	80 83       	st	Z, r24

	DDRC = 0x00;
     138:	e4 e3       	ldi	r30, 0x34	; 52
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	10 82       	st	Z, r1

	PORTC = 0xFF;
     13e:	e5 e3       	ldi	r30, 0x35	; 53
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	80 83       	st	Z, r24

}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <PushButton>:
 void PushButton(void * pvparam){
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	00 d0       	rcall	.+0      	; 0x152 <PushButton+0x6>
     152:	00 d0       	rcall	.+0      	; 0x154 <PushButton+0x8>
     154:	00 d0       	rcall	.+0      	; 0x156 <PushButton+0xa>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9e 83       	std	Y+6, r25	; 0x06
     15c:	8d 83       	std	Y+5, r24	; 0x05
	 portTickType Freq = 50;
     15e:	82 e3       	ldi	r24, 0x32	; 50
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     166:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <xTaskGetTickCount>
     16a:	9c 83       	std	Y+4, r25	; 0x04
     16c:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */
		 if ((PINC & 0x01) == 0){
     16e:	e3 e3       	ldi	r30, 0x33	; 51
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	90 70       	andi	r25, 0x00	; 0
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	11 f4       	brne	.+4      	; 0x184 <PushButton+0x38>
			 ButtonState = 0;
     180:	10 92 76 00 	sts	0x0076, r1
		 }

		 /*Make the Task Periodic with Period 150 Tick */
		 vTaskDelayUntil(&Start,Freq);
     184:	ce 01       	movw	r24, r28
     186:	03 96       	adiw	r24, 0x03	; 3
     188:	29 81       	ldd	r18, Y+1	; 0x01
     18a:	3a 81       	ldd	r19, Y+2	; 0x02
     18c:	b9 01       	movw	r22, r18
     18e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <vTaskDelayUntil>
     192:	ed cf       	rjmp	.-38     	; 0x16e <PushButton+0x22>

00000194 <Led>:
	 }

 }


 void Led(void * pvparam){
     194:	df 93       	push	r29
     196:	cf 93       	push	r28
     198:	00 d0       	rcall	.+0      	; 0x19a <Led+0x6>
     19a:	00 d0       	rcall	.+0      	; 0x19c <Led+0x8>
     19c:	00 d0       	rcall	.+0      	; 0x19e <Led+0xa>
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	9e 83       	std	Y+6, r25	; 0x06
     1a4:	8d 83       	std	Y+5, r24	; 0x05
	 portTickType Freq = 50;
     1a6:	82 e3       	ldi	r24, 0x32	; 50
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	9a 83       	std	Y+2, r25	; 0x02
     1ac:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     1ae:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <xTaskGetTickCount>
     1b2:	9c 83       	std	Y+4, r25	; 0x04
     1b4:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */
		 if (ButtonState == 0){
     1b6:	80 91 76 00 	lds	r24, 0x0076
     1ba:	88 23       	and	r24, r24
     1bc:	59 f4       	brne	.+22     	; 0x1d4 <Led+0x40>
			 PORTB ^= 0x01;
     1be:	a8 e3       	ldi	r26, 0x38	; 56
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e8 e3       	ldi	r30, 0x38	; 56
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	90 81       	ld	r25, Z
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	89 27       	eor	r24, r25
     1cc:	8c 93       	st	X, r24
			 ButtonState = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 76 00 	sts	0x0076, r24
		 }
		 /*Make the Task Periodic with Period 150 Tick */
		 vTaskDelayUntil(&Start,Freq);
     1d4:	ce 01       	movw	r24, r28
     1d6:	03 96       	adiw	r24, 0x03	; 3
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	3a 81       	ldd	r19, Y+2	; 0x02
     1dc:	b9 01       	movw	r22, r18
     1de:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <vTaskDelayUntil>
     1e2:	e9 cf       	rjmp	.-46     	; 0x1b6 <Led+0x22>

000001e4 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	27 97       	sbiw	r28, 0x07	; 7
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	9d 83       	std	Y+5, r25	; 0x05
     1fa:	8c 83       	std	Y+4, r24	; 0x04
     1fc:	6e 83       	std	Y+6, r22	; 0x06
     1fe:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     200:	8a e1       	ldi	r24, 0x1A	; 26
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 ca 03 	call	0x794	; 0x794 <pvPortMalloc>
     208:	9a 83       	std	Y+2, r25	; 0x02
     20a:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	09 f4       	brne	.+2      	; 0x216 <xCoRoutineCreate+0x32>
     214:	6f c0       	rjmp	.+222    	; 0x2f4 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     216:	80 91 7a 00 	lds	r24, 0x007A
     21a:	90 91 7b 00 	lds	r25, 0x007B
     21e:	00 97       	sbiw	r24, 0x00	; 0
     220:	41 f4       	brne	.+16     	; 0x232 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	90 93 7b 00 	sts	0x007B, r25
     22a:	80 93 7a 00 	sts	0x007A, r24
			prvInitialiseCoRoutineLists();
     22e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     232:	8e 81       	ldd	r24, Y+6	; 0x06
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	10 f0       	brcs	.+4      	; 0x23c <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     23c:	e9 81       	ldd	r30, Y+1	; 0x01
     23e:	fa 81       	ldd	r31, Y+2	; 0x02
     240:	11 8e       	std	Z+25, r1	; 0x19
     242:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     244:	e9 81       	ldd	r30, Y+1	; 0x01
     246:	fa 81       	ldd	r31, Y+2	; 0x02
     248:	8e 81       	ldd	r24, Y+6	; 0x06
     24a:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     24c:	e9 81       	ldd	r30, Y+1	; 0x01
     24e:	fa 81       	ldd	r31, Y+2	; 0x02
     250:	8f 81       	ldd	r24, Y+7	; 0x07
     252:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     254:	e9 81       	ldd	r30, Y+1	; 0x01
     256:	fa 81       	ldd	r31, Y+2	; 0x02
     258:	8c 81       	ldd	r24, Y+4	; 0x04
     25a:	9d 81       	ldd	r25, Y+5	; 0x05
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	9a 81       	ldd	r25, Y+2	; 0x02
     264:	02 96       	adiw	r24, 0x02	; 2
     266:	0e 94 60 04 	call	0x8c0	; 0x8c0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	0c 96       	adiw	r24, 0x0c	; 12
     270:	0e 94 60 04 	call	0x8c0	; 0x8c0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     274:	e9 81       	ldd	r30, Y+1	; 0x01
     276:	fa 81       	ldd	r31, Y+2	; 0x02
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	91 87       	std	Z+9, r25	; 0x09
     27e:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     280:	e9 81       	ldd	r30, Y+1	; 0x01
     282:	fa 81       	ldd	r31, Y+2	; 0x02
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	93 8b       	std	Z+19, r25	; 0x13
     28a:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     28c:	8e 81       	ldd	r24, Y+6	; 0x06
     28e:	28 2f       	mov	r18, r24
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	82 1b       	sub	r24, r18
     298:	93 0b       	sbc	r25, r19
     29a:	e9 81       	ldd	r30, Y+1	; 0x01
     29c:	fa 81       	ldd	r31, Y+2	; 0x02
     29e:	95 87       	std	Z+13, r25	; 0x0d
     2a0:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	fa 81       	ldd	r31, Y+2	; 0x02
     2a6:	96 89       	ldd	r25, Z+22	; 0x16
     2a8:	80 91 7c 00 	lds	r24, 0x007C
     2ac:	89 17       	cp	r24, r25
     2ae:	28 f4       	brcc	.+10     	; 0x2ba <xCoRoutineCreate+0xd6>
     2b0:	e9 81       	ldd	r30, Y+1	; 0x01
     2b2:	fa 81       	ldd	r31, Y+2	; 0x02
     2b4:	86 89       	ldd	r24, Z+22	; 0x16
     2b6:	80 93 7c 00 	sts	0x007C, r24
     2ba:	e9 81       	ldd	r30, Y+1	; 0x01
     2bc:	fa 81       	ldd	r31, Y+2	; 0x02
     2be:	86 89       	ldd	r24, Z+22	; 0x16
     2c0:	28 2f       	mov	r18, r24
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	c9 01       	movw	r24, r18
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	82 0f       	add	r24, r18
     2d4:	93 1f       	adc	r25, r19
     2d6:	ac 01       	movw	r20, r24
     2d8:	4d 57       	subi	r20, 0x7D	; 125
     2da:	5f 4f       	sbci	r21, 0xFF	; 255
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	9c 01       	movw	r18, r24
     2e2:	2e 5f       	subi	r18, 0xFE	; 254
     2e4:	3f 4f       	sbci	r19, 0xFF	; 255
     2e6:	ca 01       	movw	r24, r20
     2e8:	b9 01       	movw	r22, r18
     2ea:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>

		xReturn = pdPASS;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	8b 83       	std	Y+3, r24	; 0x03
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2fa:	27 96       	adiw	r28, 0x07	; 7
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	cf 91       	pop	r28
     308:	df 91       	pop	r29
     30a:	08 95       	ret

0000030c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     30c:	df 93       	push	r29
     30e:	cf 93       	push	r28
     310:	00 d0       	rcall	.+0      	; 0x312 <vCoRoutineAddToDelayedList+0x6>
     312:	00 d0       	rcall	.+0      	; 0x314 <vCoRoutineAddToDelayedList+0x8>
     314:	00 d0       	rcall	.+0      	; 0x316 <vCoRoutineAddToDelayedList+0xa>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	9c 83       	std	Y+4, r25	; 0x04
     31c:	8b 83       	std	Y+3, r24	; 0x03
     31e:	7e 83       	std	Y+6, r23	; 0x06
     320:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     322:	20 91 7d 00 	lds	r18, 0x007D
     326:	30 91 7e 00 	lds	r19, 0x007E
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	9c 81       	ldd	r25, Y+4	; 0x04
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     336:	80 91 7a 00 	lds	r24, 0x007A
     33a:	90 91 7b 00 	lds	r25, 0x007B
     33e:	02 96       	adiw	r24, 0x02	; 2
     340:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     344:	e0 91 7a 00 	lds	r30, 0x007A
     348:	f0 91 7b 00 	lds	r31, 0x007B
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	93 83       	std	Z+3, r25	; 0x03
     352:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     354:	20 91 7d 00 	lds	r18, 0x007D
     358:	30 91 7e 00 	lds	r19, 0x007E
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	82 17       	cp	r24, r18
     362:	93 07       	cpc	r25, r19
     364:	70 f4       	brcc	.+28     	; 0x382 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     366:	80 91 a9 00 	lds	r24, 0x00A9
     36a:	90 91 aa 00 	lds	r25, 0x00AA
     36e:	20 91 7a 00 	lds	r18, 0x007A
     372:	30 91 7b 00 	lds	r19, 0x007B
     376:	2e 5f       	subi	r18, 0xFE	; 254
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	b9 01       	movw	r22, r18
     37c:	0e 94 bc 04 	call	0x978	; 0x978 <vListInsert>
     380:	0d c0       	rjmp	.+26     	; 0x39c <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     382:	80 91 a7 00 	lds	r24, 0x00A7
     386:	90 91 a8 00 	lds	r25, 0x00A8
     38a:	20 91 7a 00 	lds	r18, 0x007A
     38e:	30 91 7b 00 	lds	r19, 0x007B
     392:	2e 5f       	subi	r18, 0xFE	; 254
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	b9 01       	movw	r22, r18
     398:	0e 94 bc 04 	call	0x978	; 0x978 <vListInsert>
	}

	if( pxEventList )
     39c:	8d 81       	ldd	r24, Y+5	; 0x05
     39e:	9e 81       	ldd	r25, Y+6	; 0x06
     3a0:	00 97       	sbiw	r24, 0x00	; 0
     3a2:	61 f0       	breq	.+24     	; 0x3bc <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     3a4:	80 91 7a 00 	lds	r24, 0x007A
     3a8:	90 91 7b 00 	lds	r25, 0x007B
     3ac:	9c 01       	movw	r18, r24
     3ae:	24 5f       	subi	r18, 0xF4	; 244
     3b0:	3f 4f       	sbci	r19, 0xFF	; 255
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	9e 81       	ldd	r25, Y+6	; 0x06
     3b6:	b9 01       	movw	r22, r18
     3b8:	0e 94 bc 04 	call	0x978	; 0x978 <vListInsert>
	}
}
     3bc:	26 96       	adiw	r28, 0x06	; 6
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	cf 91       	pop	r28
     3ca:	df 91       	pop	r29
     3cc:	08 95       	ret

000003ce <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <prvCheckPendingReadyList+0x6>
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	3a c0       	rjmp	.+116    	; 0x44e <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     3da:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     3dc:	e0 91 b0 00 	lds	r30, 0x00B0
     3e0:	f0 91 b1 00 	lds	r31, 0x00B1
     3e4:	86 81       	ldd	r24, Z+6	; 0x06
     3e6:	97 81       	ldd	r25, Z+7	; 0x07
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	0c 96       	adiw	r24, 0x0c	; 12
     3f2:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     3f6:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	02 96       	adiw	r24, 0x02	; 2
     3fe:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	96 89       	ldd	r25, Z+22	; 0x16
     408:	80 91 7c 00 	lds	r24, 0x007C
     40c:	89 17       	cp	r24, r25
     40e:	28 f4       	brcc	.+10     	; 0x41a <prvCheckPendingReadyList+0x4c>
     410:	e9 81       	ldd	r30, Y+1	; 0x01
     412:	fa 81       	ldd	r31, Y+2	; 0x02
     414:	86 89       	ldd	r24, Z+22	; 0x16
     416:	80 93 7c 00 	sts	0x007C, r24
     41a:	e9 81       	ldd	r30, Y+1	; 0x01
     41c:	fa 81       	ldd	r31, Y+2	; 0x02
     41e:	86 89       	ldd	r24, Z+22	; 0x16
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	c9 01       	movw	r24, r18
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	82 0f       	add	r24, r18
     434:	93 1f       	adc	r25, r19
     436:	ac 01       	movw	r20, r24
     438:	4d 57       	subi	r20, 0x7D	; 125
     43a:	5f 4f       	sbci	r21, 0xFF	; 255
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	9c 01       	movw	r18, r24
     442:	2e 5f       	subi	r18, 0xFE	; 254
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	ca 01       	movw	r24, r20
     448:	b9 01       	movw	r22, r18
     44a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     44e:	80 91 ab 00 	lds	r24, 0x00AB
     452:	88 23       	and	r24, r24
     454:	09 f0       	breq	.+2      	; 0x458 <prvCheckPendingReadyList+0x8a>
     456:	c1 cf       	rjmp	.-126    	; 0x3da <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	08 95       	ret

00000462 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	00 d0       	rcall	.+0      	; 0x468 <prvCheckDelayedList+0x6>
     468:	00 d0       	rcall	.+0      	; 0x46a <prvCheckDelayedList+0x8>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     46e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <xTaskGetTickCount>
     472:	20 91 7f 00 	lds	r18, 0x007F
     476:	30 91 80 00 	lds	r19, 0x0080
     47a:	82 1b       	sub	r24, r18
     47c:	93 0b       	sbc	r25, r19
     47e:	90 93 82 00 	sts	0x0082, r25
     482:	80 93 81 00 	sts	0x0081, r24
     486:	85 c0       	rjmp	.+266    	; 0x592 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     488:	80 91 7d 00 	lds	r24, 0x007D
     48c:	90 91 7e 00 	lds	r25, 0x007E
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	90 93 7e 00 	sts	0x007E, r25
     496:	80 93 7d 00 	sts	0x007D, r24
		xPassedTicks--;
     49a:	80 91 81 00 	lds	r24, 0x0081
     49e:	90 91 82 00 	lds	r25, 0x0082
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	90 93 82 00 	sts	0x0082, r25
     4a8:	80 93 81 00 	sts	0x0081, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     4ac:	80 91 7d 00 	lds	r24, 0x007D
     4b0:	90 91 7e 00 	lds	r25, 0x007E
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	09 f0       	breq	.+2      	; 0x4ba <prvCheckDelayedList+0x58>
     4b8:	64 c0       	rjmp	.+200    	; 0x582 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     4ba:	80 91 a7 00 	lds	r24, 0x00A7
     4be:	90 91 a8 00 	lds	r25, 0x00A8
     4c2:	9a 83       	std	Y+2, r25	; 0x02
     4c4:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     4c6:	80 91 a9 00 	lds	r24, 0x00A9
     4ca:	90 91 aa 00 	lds	r25, 0x00AA
     4ce:	90 93 a8 00 	sts	0x00A8, r25
     4d2:	80 93 a7 00 	sts	0x00A7, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	90 93 aa 00 	sts	0x00AA, r25
     4de:	80 93 a9 00 	sts	0x00A9, r24
     4e2:	4f c0       	rjmp	.+158    	; 0x582 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     4e4:	e0 91 a7 00 	lds	r30, 0x00A7
     4e8:	f0 91 a8 00 	lds	r31, 0x00A8
     4ec:	05 80       	ldd	r0, Z+5	; 0x05
     4ee:	f6 81       	ldd	r31, Z+6	; 0x06
     4f0:	e0 2d       	mov	r30, r0
     4f2:	86 81       	ldd	r24, Z+6	; 0x06
     4f4:	97 81       	ldd	r25, Z+7	; 0x07
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     4fa:	eb 81       	ldd	r30, Y+3	; 0x03
     4fc:	fc 81       	ldd	r31, Y+4	; 0x04
     4fe:	22 81       	ldd	r18, Z+2	; 0x02
     500:	33 81       	ldd	r19, Z+3	; 0x03
     502:	80 91 7d 00 	lds	r24, 0x007D
     506:	90 91 7e 00 	lds	r25, 0x007E
     50a:	82 17       	cp	r24, r18
     50c:	93 07       	cpc	r25, r19
     50e:	08 f4       	brcc	.+2      	; 0x512 <prvCheckDelayedList+0xb0>
     510:	40 c0       	rjmp	.+128    	; 0x592 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     512:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	02 96       	adiw	r24, 0x02	; 2
     51a:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     51e:	eb 81       	ldd	r30, Y+3	; 0x03
     520:	fc 81       	ldd	r31, Y+4	; 0x04
     522:	84 89       	ldd	r24, Z+20	; 0x14
     524:	95 89       	ldd	r25, Z+21	; 0x15
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	29 f0       	breq	.+10     	; 0x534 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	0c 96       	adiw	r24, 0x0c	; 12
     530:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     534:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     536:	eb 81       	ldd	r30, Y+3	; 0x03
     538:	fc 81       	ldd	r31, Y+4	; 0x04
     53a:	96 89       	ldd	r25, Z+22	; 0x16
     53c:	80 91 7c 00 	lds	r24, 0x007C
     540:	89 17       	cp	r24, r25
     542:	28 f4       	brcc	.+10     	; 0x54e <prvCheckDelayedList+0xec>
     544:	eb 81       	ldd	r30, Y+3	; 0x03
     546:	fc 81       	ldd	r31, Y+4	; 0x04
     548:	86 89       	ldd	r24, Z+22	; 0x16
     54a:	80 93 7c 00 	sts	0x007C, r24
     54e:	eb 81       	ldd	r30, Y+3	; 0x03
     550:	fc 81       	ldd	r31, Y+4	; 0x04
     552:	86 89       	ldd	r24, Z+22	; 0x16
     554:	28 2f       	mov	r18, r24
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	c9 01       	movw	r24, r18
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	82 0f       	add	r24, r18
     568:	93 1f       	adc	r25, r19
     56a:	ac 01       	movw	r20, r24
     56c:	4d 57       	subi	r20, 0x7D	; 125
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	9c 81       	ldd	r25, Y+4	; 0x04
     574:	9c 01       	movw	r18, r24
     576:	2e 5f       	subi	r18, 0xFE	; 254
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	ca 01       	movw	r24, r20
     57c:	b9 01       	movw	r22, r18
     57e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     582:	e0 91 a7 00 	lds	r30, 0x00A7
     586:	f0 91 a8 00 	lds	r31, 0x00A8
     58a:	80 81       	ld	r24, Z
     58c:	88 23       	and	r24, r24
     58e:	09 f0       	breq	.+2      	; 0x592 <prvCheckDelayedList+0x130>
     590:	a9 cf       	rjmp	.-174    	; 0x4e4 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     592:	80 91 81 00 	lds	r24, 0x0081
     596:	90 91 82 00 	lds	r25, 0x0082
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	09 f0       	breq	.+2      	; 0x5a0 <prvCheckDelayedList+0x13e>
     59e:	74 cf       	rjmp	.-280    	; 0x488 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     5a0:	80 91 7d 00 	lds	r24, 0x007D
     5a4:	90 91 7e 00 	lds	r25, 0x007E
     5a8:	90 93 80 00 	sts	0x0080, r25
     5ac:	80 93 7f 00 	sts	0x007F, r24
}
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	cf 91       	pop	r28
     5ba:	df 91       	pop	r29
     5bc:	08 95       	ret

000005be <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <vCoRoutineSchedule+0x6>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     5c8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     5cc:	0e 94 31 02 	call	0x462	; 0x462 <prvCheckDelayedList>
     5d0:	0a c0       	rjmp	.+20     	; 0x5e6 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     5d2:	80 91 7c 00 	lds	r24, 0x007C
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <vCoRoutineSchedule+0x1e>
     5da:	66 c0       	rjmp	.+204    	; 0x6a8 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     5dc:	80 91 7c 00 	lds	r24, 0x007C
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	80 93 7c 00 	sts	0x007C, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     5e6:	80 91 7c 00 	lds	r24, 0x007C
     5ea:	28 2f       	mov	r18, r24
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	c9 01       	movw	r24, r18
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	82 0f       	add	r24, r18
     5fe:	93 1f       	adc	r25, r19
     600:	fc 01       	movw	r30, r24
     602:	ed 57       	subi	r30, 0x7D	; 125
     604:	ff 4f       	sbci	r31, 0xFF	; 255
     606:	80 81       	ld	r24, Z
     608:	88 23       	and	r24, r24
     60a:	19 f3       	breq	.-58     	; 0x5d2 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     60c:	80 91 7c 00 	lds	r24, 0x007C
     610:	28 2f       	mov	r18, r24
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	c9 01       	movw	r24, r18
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	82 0f       	add	r24, r18
     624:	93 1f       	adc	r25, r19
     626:	8d 57       	subi	r24, 0x7D	; 125
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	9a 83       	std	Y+2, r25	; 0x02
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	e9 81       	ldd	r30, Y+1	; 0x01
     630:	fa 81       	ldd	r31, Y+2	; 0x02
     632:	01 80       	ldd	r0, Z+1	; 0x01
     634:	f2 81       	ldd	r31, Z+2	; 0x02
     636:	e0 2d       	mov	r30, r0
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	e9 81       	ldd	r30, Y+1	; 0x01
     63e:	fa 81       	ldd	r31, Y+2	; 0x02
     640:	92 83       	std	Z+2, r25	; 0x02
     642:	81 83       	std	Z+1, r24	; 0x01
     644:	e9 81       	ldd	r30, Y+1	; 0x01
     646:	fa 81       	ldd	r31, Y+2	; 0x02
     648:	21 81       	ldd	r18, Z+1	; 0x01
     64a:	32 81       	ldd	r19, Z+2	; 0x02
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	03 96       	adiw	r24, 0x03	; 3
     652:	28 17       	cp	r18, r24
     654:	39 07       	cpc	r19, r25
     656:	59 f4       	brne	.+22     	; 0x66e <vCoRoutineSchedule+0xb0>
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	01 80       	ldd	r0, Z+1	; 0x01
     65e:	f2 81       	ldd	r31, Z+2	; 0x02
     660:	e0 2d       	mov	r30, r0
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	93 81       	ldd	r25, Z+3	; 0x03
     666:	e9 81       	ldd	r30, Y+1	; 0x01
     668:	fa 81       	ldd	r31, Y+2	; 0x02
     66a:	92 83       	std	Z+2, r25	; 0x02
     66c:	81 83       	std	Z+1, r24	; 0x01
     66e:	e9 81       	ldd	r30, Y+1	; 0x01
     670:	fa 81       	ldd	r31, Y+2	; 0x02
     672:	01 80       	ldd	r0, Z+1	; 0x01
     674:	f2 81       	ldd	r31, Z+2	; 0x02
     676:	e0 2d       	mov	r30, r0
     678:	86 81       	ldd	r24, Z+6	; 0x06
     67a:	97 81       	ldd	r25, Z+7	; 0x07
     67c:	90 93 7b 00 	sts	0x007B, r25
     680:	80 93 7a 00 	sts	0x007A, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     684:	e0 91 7a 00 	lds	r30, 0x007A
     688:	f0 91 7b 00 	lds	r31, 0x007B
     68c:	40 81       	ld	r20, Z
     68e:	51 81       	ldd	r21, Z+1	; 0x01
     690:	80 91 7a 00 	lds	r24, 0x007A
     694:	90 91 7b 00 	lds	r25, 0x007B
     698:	e0 91 7a 00 	lds	r30, 0x007A
     69c:	f0 91 7b 00 	lds	r31, 0x007B
     6a0:	27 89       	ldd	r18, Z+23	; 0x17
     6a2:	62 2f       	mov	r22, r18
     6a4:	fa 01       	movw	r30, r20
     6a6:	09 95       	icall

	return;
}
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	0f 92       	push	r0
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     6bc:	19 82       	std	Y+1, r1	; 0x01
     6be:	13 c0       	rjmp	.+38     	; 0x6e6 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	c9 01       	movw	r24, r18
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	82 0f       	add	r24, r18
     6d6:	93 1f       	adc	r25, r19
     6d8:	8d 57       	subi	r24, 0x7D	; 125
     6da:	9f 4f       	sbci	r25, 0xFF	; 255
     6dc:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	8f 5f       	subi	r24, 0xFF	; 255
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	50 f3       	brcs	.-44     	; 0x6c0 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     6ec:	85 e9       	ldi	r24, 0x95	; 149
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     6f4:	8e e9       	ldi	r24, 0x9E	; 158
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     6fc:	8b ea       	ldi	r24, 0xAB	; 171
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     704:	85 e9       	ldi	r24, 0x95	; 149
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	90 93 a8 00 	sts	0x00A8, r25
     70c:	80 93 a7 00 	sts	0x00A7, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     710:	8e e9       	ldi	r24, 0x9E	; 158
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 aa 00 	sts	0x00AA, r25
     718:	80 93 a9 00 	sts	0x00A9, r24
}
     71c:	0f 90       	pop	r0
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	00 d0       	rcall	.+0      	; 0x72a <xCoRoutineRemoveFromEventList+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <xCoRoutineRemoveFromEventList+0x8>
     72c:	0f 92       	push	r0
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9d 83       	std	Y+5, r25	; 0x05
     734:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     736:	ec 81       	ldd	r30, Y+4	; 0x04
     738:	fd 81       	ldd	r31, Y+5	; 0x05
     73a:	05 80       	ldd	r0, Z+5	; 0x05
     73c:	f6 81       	ldd	r31, Z+6	; 0x06
     73e:	e0 2d       	mov	r30, r0
     740:	86 81       	ldd	r24, Z+6	; 0x06
     742:	97 81       	ldd	r25, Z+7	; 0x07
     744:	9b 83       	std	Y+3, r25	; 0x03
     746:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	0c 96       	adiw	r24, 0x0c	; 12
     74e:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	9b 81       	ldd	r25, Y+3	; 0x03
     756:	9c 01       	movw	r18, r24
     758:	24 5f       	subi	r18, 0xF4	; 244
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	8b ea       	ldi	r24, 0xAB	; 171
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	b9 01       	movw	r22, r18
     762:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     766:	ea 81       	ldd	r30, Y+2	; 0x02
     768:	fb 81       	ldd	r31, Y+3	; 0x03
     76a:	96 89       	ldd	r25, Z+22	; 0x16
     76c:	e0 91 7a 00 	lds	r30, 0x007A
     770:	f0 91 7b 00 	lds	r31, 0x007B
     774:	86 89       	ldd	r24, Z+22	; 0x16
     776:	98 17       	cp	r25, r24
     778:	18 f0       	brcs	.+6      	; 0x780 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	01 c0       	rjmp	.+2      	; 0x782 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     780:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     782:	89 81       	ldd	r24, Y+1	; 0x01
}
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	00 d0       	rcall	.+0      	; 0x79a <pvPortMalloc+0x6>
     79a:	00 d0       	rcall	.+0      	; 0x79c <pvPortMalloc+0x8>
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     7a4:	1a 82       	std	Y+2, r1	; 0x02
     7a6:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     7a8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     7ac:	80 91 b4 00 	lds	r24, 0x00B4
     7b0:	90 91 b5 00 	lds	r25, 0x00B5
     7b4:	2b 81       	ldd	r18, Y+3	; 0x03
     7b6:	3c 81       	ldd	r19, Y+4	; 0x04
     7b8:	82 0f       	add	r24, r18
     7ba:	93 1f       	adc	r25, r19
     7bc:	22 e0       	ldi	r18, 0x02	; 2
     7be:	88 35       	cpi	r24, 0x58	; 88
     7c0:	92 07       	cpc	r25, r18
     7c2:	18 f5       	brcc	.+70     	; 0x80a <pvPortMalloc+0x76>
     7c4:	20 91 b4 00 	lds	r18, 0x00B4
     7c8:	30 91 b5 00 	lds	r19, 0x00B5
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	28 0f       	add	r18, r24
     7d2:	39 1f       	adc	r19, r25
     7d4:	80 91 b4 00 	lds	r24, 0x00B4
     7d8:	90 91 b5 00 	lds	r25, 0x00B5
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	a0 f4       	brcc	.+40     	; 0x80a <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     7e2:	80 91 b4 00 	lds	r24, 0x00B4
     7e6:	90 91 b5 00 	lds	r25, 0x00B5
     7ea:	8a 54       	subi	r24, 0x4A	; 74
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     7f2:	20 91 b4 00 	lds	r18, 0x00B4
     7f6:	30 91 b5 00 	lds	r19, 0x00B5
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	90 93 b5 00 	sts	0x00B5, r25
     806:	80 93 b4 00 	sts	0x00B4, r24
		}	
	}
	xTaskResumeAll();
     80a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <vPortFree+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	9a 83       	std	Y+2, r25	; 0x02
     82c:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	cf 91       	pop	r28
     834:	df 91       	pop	r29
     836:	08 95       	ret

00000838 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     840:	10 92 b5 00 	sts	0x00B5, r1
     844:	10 92 b4 00 	sts	0x00B4, r1
}
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	08 95       	ret

0000084e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     84e:	df 93       	push	r29
     850:	cf 93       	push	r28
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     856:	20 91 b4 00 	lds	r18, 0x00B4
     85a:	30 91 b5 00 	lds	r19, 0x00B5
     85e:	88 e5       	ldi	r24, 0x58	; 88
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	82 1b       	sub	r24, r18
     864:	93 0b       	sbc	r25, r19
}
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <vListInitialise+0x6>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	9a 83       	std	Y+2, r25	; 0x02
     878:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	03 96       	adiw	r24, 0x03	; 3
     880:	e9 81       	ldd	r30, Y+1	; 0x01
     882:	fa 81       	ldd	r31, Y+2	; 0x02
     884:	92 83       	std	Z+2, r25	; 0x02
     886:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     888:	e9 81       	ldd	r30, Y+1	; 0x01
     88a:	fa 81       	ldd	r31, Y+2	; 0x02
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	9f ef       	ldi	r25, 0xFF	; 255
     890:	94 83       	std	Z+4, r25	; 0x04
     892:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	03 96       	adiw	r24, 0x03	; 3
     89a:	e9 81       	ldd	r30, Y+1	; 0x01
     89c:	fa 81       	ldd	r31, Y+2	; 0x02
     89e:	96 83       	std	Z+6, r25	; 0x06
     8a0:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	9a 81       	ldd	r25, Y+2	; 0x02
     8a6:	03 96       	adiw	r24, 0x03	; 3
     8a8:	e9 81       	ldd	r30, Y+1	; 0x01
     8aa:	fa 81       	ldd	r31, Y+2	; 0x02
     8ac:	90 87       	std	Z+8, r25	; 0x08
     8ae:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     8b0:	e9 81       	ldd	r30, Y+1	; 0x01
     8b2:	fa 81       	ldd	r31, Y+2	; 0x02
     8b4:	10 82       	st	Z, r1
}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <vListInitialiseItem+0x6>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     8ce:	e9 81       	ldd	r30, Y+1	; 0x01
     8d0:	fa 81       	ldd	r31, Y+2	; 0x02
     8d2:	11 86       	std	Z+9, r1	; 0x09
     8d4:	10 86       	std	Z+8, r1	; 0x08
}
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	08 95       	ret

000008e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <vListInsertEnd+0x6>
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <vListInsertEnd+0x8>
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <vListInsertEnd+0xa>
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	9c 83       	std	Y+4, r25	; 0x04
     8f0:	8b 83       	std	Y+3, r24	; 0x03
     8f2:	7e 83       	std	Y+6, r23	; 0x06
     8f4:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     8f6:	eb 81       	ldd	r30, Y+3	; 0x03
     8f8:	fc 81       	ldd	r31, Y+4	; 0x04
     8fa:	81 81       	ldd	r24, Z+1	; 0x01
     8fc:	92 81       	ldd	r25, Z+2	; 0x02
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     902:	e9 81       	ldd	r30, Y+1	; 0x01
     904:	fa 81       	ldd	r31, Y+2	; 0x02
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	ed 81       	ldd	r30, Y+5	; 0x05
     90c:	fe 81       	ldd	r31, Y+6	; 0x06
     90e:	93 83       	std	Z+3, r25	; 0x03
     910:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     912:	eb 81       	ldd	r30, Y+3	; 0x03
     914:	fc 81       	ldd	r31, Y+4	; 0x04
     916:	81 81       	ldd	r24, Z+1	; 0x01
     918:	92 81       	ldd	r25, Z+2	; 0x02
     91a:	ed 81       	ldd	r30, Y+5	; 0x05
     91c:	fe 81       	ldd	r31, Y+6	; 0x06
     91e:	95 83       	std	Z+5, r25	; 0x05
     920:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     922:	e9 81       	ldd	r30, Y+1	; 0x01
     924:	fa 81       	ldd	r31, Y+2	; 0x02
     926:	02 80       	ldd	r0, Z+2	; 0x02
     928:	f3 81       	ldd	r31, Z+3	; 0x03
     92a:	e0 2d       	mov	r30, r0
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	9e 81       	ldd	r25, Y+6	; 0x06
     930:	95 83       	std	Z+5, r25	; 0x05
     932:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	fa 81       	ldd	r31, Y+2	; 0x02
     93c:	93 83       	std	Z+3, r25	; 0x03
     93e:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     940:	8d 81       	ldd	r24, Y+5	; 0x05
     942:	9e 81       	ldd	r25, Y+6	; 0x06
     944:	eb 81       	ldd	r30, Y+3	; 0x03
     946:	fc 81       	ldd	r31, Y+4	; 0x04
     948:	92 83       	std	Z+2, r25	; 0x02
     94a:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     94c:	ed 81       	ldd	r30, Y+5	; 0x05
     94e:	fe 81       	ldd	r31, Y+6	; 0x06
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	9c 81       	ldd	r25, Y+4	; 0x04
     954:	91 87       	std	Z+9, r25	; 0x09
     956:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     958:	eb 81       	ldd	r30, Y+3	; 0x03
     95a:	fc 81       	ldd	r31, Y+4	; 0x04
     95c:	80 81       	ld	r24, Z
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	eb 81       	ldd	r30, Y+3	; 0x03
     962:	fc 81       	ldd	r31, Y+4	; 0x04
     964:	80 83       	st	Z, r24
}
     966:	26 96       	adiw	r28, 0x06	; 6
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	cf 91       	pop	r28
     974:	df 91       	pop	r29
     976:	08 95       	ret

00000978 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	28 97       	sbiw	r28, 0x08	; 8
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	9e 83       	std	Y+6, r25	; 0x06
     98e:	8d 83       	std	Y+5, r24	; 0x05
     990:	78 87       	std	Y+8, r23	; 0x08
     992:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     994:	ef 81       	ldd	r30, Y+7	; 0x07
     996:	f8 85       	ldd	r31, Y+8	; 0x08
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	2f ef       	ldi	r18, 0xFF	; 255
     9a6:	8f 3f       	cpi	r24, 0xFF	; 255
     9a8:	92 07       	cpc	r25, r18
     9aa:	39 f4       	brne	.+14     	; 0x9ba <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     9ac:	ed 81       	ldd	r30, Y+5	; 0x05
     9ae:	fe 81       	ldd	r31, Y+6	; 0x06
     9b0:	87 81       	ldd	r24, Z+7	; 0x07
     9b2:	90 85       	ldd	r25, Z+8	; 0x08
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	18 c0       	rjmp	.+48     	; 0x9ea <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
     9bc:	9e 81       	ldd	r25, Y+6	; 0x06
     9be:	03 96       	adiw	r24, 0x03	; 3
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	8b 83       	std	Y+3, r24	; 0x03
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <vListInsert+0x5a>
     9c6:	eb 81       	ldd	r30, Y+3	; 0x03
     9c8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	9c 83       	std	Y+4, r25	; 0x04
     9d0:	8b 83       	std	Y+3, r24	; 0x03
     9d2:	eb 81       	ldd	r30, Y+3	; 0x03
     9d4:	fc 81       	ldd	r31, Y+4	; 0x04
     9d6:	02 80       	ldd	r0, Z+2	; 0x02
     9d8:	f3 81       	ldd	r31, Z+3	; 0x03
     9da:	e0 2d       	mov	r30, r0
     9dc:	20 81       	ld	r18, Z
     9de:	31 81       	ldd	r19, Z+1	; 0x01
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	82 17       	cp	r24, r18
     9e6:	93 07       	cpc	r25, r19
     9e8:	70 f7       	brcc	.-36     	; 0x9c6 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     9ea:	eb 81       	ldd	r30, Y+3	; 0x03
     9ec:	fc 81       	ldd	r31, Y+4	; 0x04
     9ee:	82 81       	ldd	r24, Z+2	; 0x02
     9f0:	93 81       	ldd	r25, Z+3	; 0x03
     9f2:	ef 81       	ldd	r30, Y+7	; 0x07
     9f4:	f8 85       	ldd	r31, Y+8	; 0x08
     9f6:	93 83       	std	Z+3, r25	; 0x03
     9f8:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     9fa:	ef 81       	ldd	r30, Y+7	; 0x07
     9fc:	f8 85       	ldd	r31, Y+8	; 0x08
     9fe:	02 80       	ldd	r0, Z+2	; 0x02
     a00:	f3 81       	ldd	r31, Z+3	; 0x03
     a02:	e0 2d       	mov	r30, r0
     a04:	8f 81       	ldd	r24, Y+7	; 0x07
     a06:	98 85       	ldd	r25, Y+8	; 0x08
     a08:	95 83       	std	Z+5, r25	; 0x05
     a0a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     a0c:	ef 81       	ldd	r30, Y+7	; 0x07
     a0e:	f8 85       	ldd	r31, Y+8	; 0x08
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	95 83       	std	Z+5, r25	; 0x05
     a16:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     a18:	8f 81       	ldd	r24, Y+7	; 0x07
     a1a:	98 85       	ldd	r25, Y+8	; 0x08
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	fc 81       	ldd	r31, Y+4	; 0x04
     a20:	93 83       	std	Z+3, r25	; 0x03
     a22:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a24:	ef 81       	ldd	r30, Y+7	; 0x07
     a26:	f8 85       	ldd	r31, Y+8	; 0x08
     a28:	8d 81       	ldd	r24, Y+5	; 0x05
     a2a:	9e 81       	ldd	r25, Y+6	; 0x06
     a2c:	91 87       	std	Z+9, r25	; 0x09
     a2e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     a30:	ed 81       	ldd	r30, Y+5	; 0x05
     a32:	fe 81       	ldd	r31, Y+6	; 0x06
     a34:	80 81       	ld	r24, Z
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	ed 81       	ldd	r30, Y+5	; 0x05
     a3a:	fe 81       	ldd	r31, Y+6	; 0x06
     a3c:	80 83       	st	Z, r24
}
     a3e:	28 96       	adiw	r28, 0x08	; 8
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	00 d0       	rcall	.+0      	; 0xa56 <vListRemove+0x6>
     a56:	00 d0       	rcall	.+0      	; 0xa58 <vListRemove+0x8>
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	9c 83       	std	Y+4, r25	; 0x04
     a5e:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a60:	eb 81       	ldd	r30, Y+3	; 0x03
     a62:	fc 81       	ldd	r31, Y+4	; 0x04
     a64:	a2 81       	ldd	r26, Z+2	; 0x02
     a66:	b3 81       	ldd	r27, Z+3	; 0x03
     a68:	eb 81       	ldd	r30, Y+3	; 0x03
     a6a:	fc 81       	ldd	r31, Y+4	; 0x04
     a6c:	84 81       	ldd	r24, Z+4	; 0x04
     a6e:	95 81       	ldd	r25, Z+5	; 0x05
     a70:	15 96       	adiw	r26, 0x05	; 5
     a72:	9c 93       	st	X, r25
     a74:	8e 93       	st	-X, r24
     a76:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a78:	eb 81       	ldd	r30, Y+3	; 0x03
     a7a:	fc 81       	ldd	r31, Y+4	; 0x04
     a7c:	a4 81       	ldd	r26, Z+4	; 0x04
     a7e:	b5 81       	ldd	r27, Z+5	; 0x05
     a80:	eb 81       	ldd	r30, Y+3	; 0x03
     a82:	fc 81       	ldd	r31, Y+4	; 0x04
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	13 96       	adiw	r26, 0x03	; 3
     a8a:	9c 93       	st	X, r25
     a8c:	8e 93       	st	-X, r24
     a8e:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	80 85       	ldd	r24, Z+8	; 0x08
     a96:	91 85       	ldd	r25, Z+9	; 0x09
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a9c:	e9 81       	ldd	r30, Y+1	; 0x01
     a9e:	fa 81       	ldd	r31, Y+2	; 0x02
     aa0:	21 81       	ldd	r18, Z+1	; 0x01
     aa2:	32 81       	ldd	r19, Z+2	; 0x02
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	28 17       	cp	r18, r24
     aaa:	39 07       	cpc	r19, r25
     aac:	41 f4       	brne	.+16     	; 0xabe <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     aae:	eb 81       	ldd	r30, Y+3	; 0x03
     ab0:	fc 81       	ldd	r31, Y+4	; 0x04
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
     ab4:	95 81       	ldd	r25, Z+5	; 0x05
     ab6:	e9 81       	ldd	r30, Y+1	; 0x01
     ab8:	fa 81       	ldd	r31, Y+2	; 0x02
     aba:	92 83       	std	Z+2, r25	; 0x02
     abc:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     abe:	eb 81       	ldd	r30, Y+3	; 0x03
     ac0:	fc 81       	ldd	r31, Y+4	; 0x04
     ac2:	11 86       	std	Z+9, r1	; 0x09
     ac4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     ac6:	e9 81       	ldd	r30, Y+1	; 0x01
     ac8:	fa 81       	ldd	r31, Y+2	; 0x02
     aca:	80 81       	ld	r24, Z
     acc:	81 50       	subi	r24, 0x01	; 1
     ace:	e9 81       	ldd	r30, Y+1	; 0x01
     ad0:	fa 81       	ldd	r31, Y+2	; 0x02
     ad2:	80 83       	st	Z, r24
}
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	cf 91       	pop	r28
     ade:	df 91       	pop	r29
     ae0:	08 95       	ret

00000ae2 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	28 97       	sbiw	r28, 0x08	; 8
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	9c 83       	std	Y+4, r25	; 0x04
     af8:	8b 83       	std	Y+3, r24	; 0x03
     afa:	7e 83       	std	Y+6, r23	; 0x06
     afc:	6d 83       	std	Y+5, r22	; 0x05
     afe:	58 87       	std	Y+8, r21	; 0x08
     b00:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     b02:	eb 81       	ldd	r30, Y+3	; 0x03
     b04:	fc 81       	ldd	r31, Y+4	; 0x04
     b06:	81 e1       	ldi	r24, 0x11	; 17
     b08:	80 83       	st	Z, r24
	pxTopOfStack--;
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	82 e2       	ldi	r24, 0x22	; 34
     b1a:	80 83       	st	Z, r24
	pxTopOfStack--;
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	9c 83       	std	Y+4, r25	; 0x04
     b24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     b26:	eb 81       	ldd	r30, Y+3	; 0x03
     b28:	fc 81       	ldd	r31, Y+4	; 0x04
     b2a:	83 e3       	ldi	r24, 0x33	; 51
     b2c:	80 83       	st	Z, r24
	pxTopOfStack--;
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
     b38:	8d 81       	ldd	r24, Y+5	; 0x05
     b3a:	9e 81       	ldd	r25, Y+6	; 0x06
     b3c:	9a 83       	std	Y+2, r25	; 0x02
     b3e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	eb 81       	ldd	r30, Y+3	; 0x03
     b44:	fc 81       	ldd	r31, Y+4	; 0x04
     b46:	80 83       	st	Z, r24
	pxTopOfStack--;
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	9c 81       	ldd	r25, Y+4	; 0x04
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9c 83       	std	Y+4, r25	; 0x04
     b50:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	9a 81       	ldd	r25, Y+2	; 0x02
     b56:	89 2f       	mov	r24, r25
     b58:	99 27       	eor	r25, r25
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	eb 81       	ldd	r30, Y+3	; 0x03
     b62:	fc 81       	ldd	r31, Y+4	; 0x04
     b64:	80 83       	st	Z, r24
	pxTopOfStack--;
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	9c 83       	std	Y+4, r25	; 0x04
     b6e:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     b70:	eb 81       	ldd	r30, Y+3	; 0x03
     b72:	fc 81       	ldd	r31, Y+4	; 0x04
     b74:	10 82       	st	Z, r1
	pxTopOfStack--;
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	9c 83       	std	Y+4, r25	; 0x04
     b7e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 e8       	ldi	r24, 0x80	; 128
     b86:	80 83       	st	Z, r24
	pxTopOfStack--;
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9c 83       	std	Y+4, r25	; 0x04
     b90:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     b92:	eb 81       	ldd	r30, Y+3	; 0x03
     b94:	fc 81       	ldd	r31, Y+4	; 0x04
     b96:	10 82       	st	Z, r1
	pxTopOfStack--;
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	9c 83       	std	Y+4, r25	; 0x04
     ba0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     ba2:	eb 81       	ldd	r30, Y+3	; 0x03
     ba4:	fc 81       	ldd	r31, Y+4	; 0x04
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	80 83       	st	Z, r24
	pxTopOfStack--;
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     bb4:	eb 81       	ldd	r30, Y+3	; 0x03
     bb6:	fc 81       	ldd	r31, Y+4	; 0x04
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	80 83       	st	Z, r24
	pxTopOfStack--;
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     bc6:	eb 81       	ldd	r30, Y+3	; 0x03
     bc8:	fc 81       	ldd	r31, Y+4	; 0x04
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	80 83       	st	Z, r24
	pxTopOfStack--;
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     bd8:	eb 81       	ldd	r30, Y+3	; 0x03
     bda:	fc 81       	ldd	r31, Y+4	; 0x04
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	80 83       	st	Z, r24
	pxTopOfStack--;
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	86 e0       	ldi	r24, 0x06	; 6
     bf0:	80 83       	st	Z, r24
	pxTopOfStack--;
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     bfc:	eb 81       	ldd	r30, Y+3	; 0x03
     bfe:	fc 81       	ldd	r31, Y+4	; 0x04
     c00:	87 e0       	ldi	r24, 0x07	; 7
     c02:	80 83       	st	Z, r24
	pxTopOfStack--;
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	80 83       	st	Z, r24
	pxTopOfStack--;
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     c20:	eb 81       	ldd	r30, Y+3	; 0x03
     c22:	fc 81       	ldd	r31, Y+4	; 0x04
     c24:	89 e0       	ldi	r24, 0x09	; 9
     c26:	80 83       	st	Z, r24
	pxTopOfStack--;
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     c32:	eb 81       	ldd	r30, Y+3	; 0x03
     c34:	fc 81       	ldd	r31, Y+4	; 0x04
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	80 83       	st	Z, r24
	pxTopOfStack--;
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	9c 83       	std	Y+4, r25	; 0x04
     c42:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     c44:	eb 81       	ldd	r30, Y+3	; 0x03
     c46:	fc 81       	ldd	r31, Y+4	; 0x04
     c48:	81 e1       	ldi	r24, 0x11	; 17
     c4a:	80 83       	st	Z, r24
	pxTopOfStack--;
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	9c 83       	std	Y+4, r25	; 0x04
     c54:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     c56:	eb 81       	ldd	r30, Y+3	; 0x03
     c58:	fc 81       	ldd	r31, Y+4	; 0x04
     c5a:	82 e1       	ldi	r24, 0x12	; 18
     c5c:	80 83       	st	Z, r24
	pxTopOfStack--;
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     c68:	eb 81       	ldd	r30, Y+3	; 0x03
     c6a:	fc 81       	ldd	r31, Y+4	; 0x04
     c6c:	83 e1       	ldi	r24, 0x13	; 19
     c6e:	80 83       	st	Z, r24
	pxTopOfStack--;
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     c7a:	eb 81       	ldd	r30, Y+3	; 0x03
     c7c:	fc 81       	ldd	r31, Y+4	; 0x04
     c7e:	84 e1       	ldi	r24, 0x14	; 20
     c80:	80 83       	st	Z, r24
	pxTopOfStack--;
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     c8c:	eb 81       	ldd	r30, Y+3	; 0x03
     c8e:	fc 81       	ldd	r31, Y+4	; 0x04
     c90:	85 e1       	ldi	r24, 0x15	; 21
     c92:	80 83       	st	Z, r24
	pxTopOfStack--;
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     c9e:	eb 81       	ldd	r30, Y+3	; 0x03
     ca0:	fc 81       	ldd	r31, Y+4	; 0x04
     ca2:	86 e1       	ldi	r24, 0x16	; 22
     ca4:	80 83       	st	Z, r24
	pxTopOfStack--;
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     cb0:	eb 81       	ldd	r30, Y+3	; 0x03
     cb2:	fc 81       	ldd	r31, Y+4	; 0x04
     cb4:	87 e1       	ldi	r24, 0x17	; 23
     cb6:	80 83       	st	Z, r24
	pxTopOfStack--;
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     cc2:	eb 81       	ldd	r30, Y+3	; 0x03
     cc4:	fc 81       	ldd	r31, Y+4	; 0x04
     cc6:	88 e1       	ldi	r24, 0x18	; 24
     cc8:	80 83       	st	Z, r24
	pxTopOfStack--;
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	9c 83       	std	Y+4, r25	; 0x04
     cd2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     cd4:	eb 81       	ldd	r30, Y+3	; 0x03
     cd6:	fc 81       	ldd	r31, Y+4	; 0x04
     cd8:	89 e1       	ldi	r24, 0x19	; 25
     cda:	80 83       	st	Z, r24
	pxTopOfStack--;
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     ce6:	eb 81       	ldd	r30, Y+3	; 0x03
     ce8:	fc 81       	ldd	r31, Y+4	; 0x04
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	80 83       	st	Z, r24
	pxTopOfStack--;
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	9c 83       	std	Y+4, r25	; 0x04
     cf6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     cf8:	eb 81       	ldd	r30, Y+3	; 0x03
     cfa:	fc 81       	ldd	r31, Y+4	; 0x04
     cfc:	81 e2       	ldi	r24, 0x21	; 33
     cfe:	80 83       	st	Z, r24
	pxTopOfStack--;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	9c 83       	std	Y+4, r25	; 0x04
     d08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     d0a:	eb 81       	ldd	r30, Y+3	; 0x03
     d0c:	fc 81       	ldd	r31, Y+4	; 0x04
     d0e:	82 e2       	ldi	r24, 0x22	; 34
     d10:	80 83       	st	Z, r24
	pxTopOfStack--;
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     d1c:	eb 81       	ldd	r30, Y+3	; 0x03
     d1e:	fc 81       	ldd	r31, Y+4	; 0x04
     d20:	83 e2       	ldi	r24, 0x23	; 35
     d22:	80 83       	st	Z, r24
	pxTopOfStack--;
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	9c 81       	ldd	r25, Y+4	; 0x04
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
     d2e:	8f 81       	ldd	r24, Y+7	; 0x07
     d30:	98 85       	ldd	r25, Y+8	; 0x08
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	eb 81       	ldd	r30, Y+3	; 0x03
     d3a:	fc 81       	ldd	r31, Y+4	; 0x04
     d3c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	9c 83       	std	Y+4, r25	; 0x04
     d46:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	89 2f       	mov	r24, r25
     d4e:	99 27       	eor	r25, r25
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	eb 81       	ldd	r30, Y+3	; 0x03
     d58:	fc 81       	ldd	r31, Y+4	; 0x04
     d5a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     d66:	eb 81       	ldd	r30, Y+3	; 0x03
     d68:	fc 81       	ldd	r31, Y+4	; 0x04
     d6a:	86 e2       	ldi	r24, 0x26	; 38
     d6c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     d78:	eb 81       	ldd	r30, Y+3	; 0x03
     d7a:	fc 81       	ldd	r31, Y+4	; 0x04
     d7c:	87 e2       	ldi	r24, 0x27	; 39
     d7e:	80 83       	st	Z, r24
	pxTopOfStack--;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     d8a:	eb 81       	ldd	r30, Y+3	; 0x03
     d8c:	fc 81       	ldd	r31, Y+4	; 0x04
     d8e:	88 e2       	ldi	r24, 0x28	; 40
     d90:	80 83       	st	Z, r24
	pxTopOfStack--;
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     d9c:	eb 81       	ldd	r30, Y+3	; 0x03
     d9e:	fc 81       	ldd	r31, Y+4	; 0x04
     da0:	89 e2       	ldi	r24, 0x29	; 41
     da2:	80 83       	st	Z, r24
	pxTopOfStack--;
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     dae:	eb 81       	ldd	r30, Y+3	; 0x03
     db0:	fc 81       	ldd	r31, Y+4	; 0x04
     db2:	80 e3       	ldi	r24, 0x30	; 48
     db4:	80 83       	st	Z, r24
	pxTopOfStack--;
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	9c 83       	std	Y+4, r25	; 0x04
     dbe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
     dc4:	81 e3       	ldi	r24, 0x31	; 49
     dc6:	80 83       	st	Z, r24
	pxTopOfStack--;
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	9c 83       	std	Y+4, r25	; 0x04
     dd0:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
}
     dd6:	28 96       	adiw	r28, 0x08	; 8
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     df0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     df4:	a0 91 0e 03 	lds	r26, 0x030E
     df8:	b0 91 0f 03 	lds	r27, 0x030F
     dfc:	cd 91       	ld	r28, X+
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	dd 91       	ld	r29, X+
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	7f 90       	pop	r7
     e36:	6f 90       	pop	r6
     e38:	5f 90       	pop	r5
     e3a:	4f 90       	pop	r4
     e3c:	3f 90       	pop	r3
     e3e:	2f 90       	pop	r2
     e40:	1f 90       	pop	r1
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     e48:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	0f 92       	push	r0
     e68:	1f 92       	push	r1
     e6a:	11 24       	eor	r1, r1
     e6c:	2f 92       	push	r2
     e6e:	3f 92       	push	r3
     e70:	4f 92       	push	r4
     e72:	5f 92       	push	r5
     e74:	6f 92       	push	r6
     e76:	7f 92       	push	r7
     e78:	8f 92       	push	r8
     e7a:	9f 92       	push	r9
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	a0 91 0e 03 	lds	r26, 0x030E
     eac:	b0 91 0f 03 	lds	r27, 0x030F
     eb0:	0d b6       	in	r0, 0x3d	; 61
     eb2:	0d 92       	st	X+, r0
     eb4:	0e b6       	in	r0, 0x3e	; 62
     eb6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     eb8:	0e 94 c5 10 	call	0x218a	; 0x218a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ebc:	a0 91 0e 03 	lds	r26, 0x030E
     ec0:	b0 91 0f 03 	lds	r27, 0x030F
     ec4:	cd 91       	ld	r28, X+
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	dd 91       	ld	r29, X+
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	9f 90       	pop	r9
     efa:	8f 90       	pop	r8
     efc:	7f 90       	pop	r7
     efe:	6f 90       	pop	r6
     f00:	5f 90       	pop	r5
     f02:	4f 90       	pop	r4
     f04:	3f 90       	pop	r3
     f06:	2f 90       	pop	r2
     f08:	1f 90       	pop	r1
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f10:	08 95       	ret

00000f12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	0f 92       	push	r0
     f1a:	1f 92       	push	r1
     f1c:	11 24       	eor	r1, r1
     f1e:	2f 92       	push	r2
     f20:	3f 92       	push	r3
     f22:	4f 92       	push	r4
     f24:	5f 92       	push	r5
     f26:	6f 92       	push	r6
     f28:	7f 92       	push	r7
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	af 92       	push	r10
     f30:	bf 92       	push	r11
     f32:	cf 92       	push	r12
     f34:	df 92       	push	r13
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ef 93       	push	r30
     f58:	ff 93       	push	r31
     f5a:	a0 91 0e 03 	lds	r26, 0x030E
     f5e:	b0 91 0f 03 	lds	r27, 0x030F
     f62:	0d b6       	in	r0, 0x3d	; 61
     f64:	0d 92       	st	X+, r0
     f66:	0e b6       	in	r0, 0x3e	; 62
     f68:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     f6a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskIncrementTick>
	vTaskSwitchContext();
     f6e:	0e 94 c5 10 	call	0x218a	; 0x218a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f72:	a0 91 0e 03 	lds	r26, 0x030E
     f76:	b0 91 0f 03 	lds	r27, 0x030F
     f7a:	cd 91       	ld	r28, X+
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	dd 91       	ld	r29, X+
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	bf 91       	pop	r27
     f8c:	af 91       	pop	r26
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	7f 91       	pop	r23
     f94:	6f 91       	pop	r22
     f96:	5f 91       	pop	r21
     f98:	4f 91       	pop	r20
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	9f 90       	pop	r9
     fb0:	8f 90       	pop	r8
     fb2:	7f 90       	pop	r7
     fb4:	6f 90       	pop	r6
     fb6:	5f 90       	pop	r5
     fb8:	4f 90       	pop	r4
     fba:	3f 90       	pop	r3
     fbc:	2f 90       	pop	r2
     fbe:	1f 90       	pop	r1
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     fc6:	08 95       	ret

00000fc8 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <prvSetupTimerInterrupt+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <prvSetupTimerInterrupt+0x8>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <prvSetupTimerInterrupt+0xa>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     fd6:	80 e4       	ldi	r24, 0x40	; 64
     fd8:	9f e1       	ldi	r25, 0x1F	; 31
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	8b 83       	std	Y+3, r24	; 0x03
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	ad 83       	std	Y+5, r26	; 0x05
     fe4:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	ad 81       	ldd	r26, Y+5	; 0x05
     fec:	be 81       	ldd	r27, Y+6	; 0x06
     fee:	68 94       	set
     ff0:	15 f8       	bld	r1, 5
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	16 94       	lsr	r1
     ffc:	d1 f7       	brne	.-12     	; 0xff2 <prvSetupTimerInterrupt+0x2a>
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	9c 83       	std	Y+4, r25	; 0x04
    1002:	ad 83       	std	Y+5, r26	; 0x05
    1004:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	ad 81       	ldd	r26, Y+5	; 0x05
    100c:	be 81       	ldd	r27, Y+6	; 0x06
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	a1 09       	sbc	r26, r1
    1012:	b1 09       	sbc	r27, r1
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	ad 83       	std	Y+5, r26	; 0x05
    101a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	ad 81       	ldd	r26, Y+5	; 0x05
    1026:	be 81       	ldd	r27, Y+6	; 0x06
    1028:	89 2f       	mov	r24, r25
    102a:	9a 2f       	mov	r25, r26
    102c:	ab 2f       	mov	r26, r27
    102e:	bb 27       	eor	r27, r27
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	ad 83       	std	Y+5, r26	; 0x05
    1036:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    103c:	eb e4       	ldi	r30, 0x4B	; 75
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1044:	ea e4       	ldi	r30, 0x4A	; 74
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    104c:	8b e0       	ldi	r24, 0x0B	; 11
    104e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1050:	ee e4       	ldi	r30, 0x4E	; 78
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1058:	e9 e5       	ldi	r30, 0x59	; 89
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	80 61       	ori	r24, 0x10	; 16
    1064:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1066:	e9 e5       	ldi	r30, 0x59	; 89
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
}
    106e:	26 96       	adiw	r28, 0x06	; 6
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
		vTaskIncrementTick();
    10aa:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskIncrementTick>
	}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	28 97       	sbiw	r28, 0x08	; 8
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	8f 83       	std	Y+7, r24	; 0x07
    10ea:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    10ec:	1a 82       	std	Y+2, r1	; 0x02
    10ee:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <xQueueCreate+0x24>
    10f6:	8c c0       	rjmp	.+280    	; 0x1210 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    10f8:	8f e1       	ldi	r24, 0x1F	; 31
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 ca 03 	call	0x794	; 0x794 <pvPortMalloc>
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	09 f4       	brne	.+2      	; 0x110e <xQueueCreate+0x3a>
    110c:	81 c0       	rjmp	.+258    	; 0x1210 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    110e:	8f 81       	ldd	r24, Y+7	; 0x07
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	88 85       	ldd	r24, Y+8	; 0x08
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	ac 01       	movw	r20, r24
    111c:	24 9f       	mul	r18, r20
    111e:	c0 01       	movw	r24, r0
    1120:	25 9f       	mul	r18, r21
    1122:	90 0d       	add	r25, r0
    1124:	34 9f       	mul	r19, r20
    1126:	90 0d       	add	r25, r0
    1128:	11 24       	eor	r1, r1
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	0e 94 ca 03 	call	0x794	; 0x794 <pvPortMalloc>
    1138:	ed 81       	ldd	r30, Y+5	; 0x05
    113a:	fe 81       	ldd	r31, Y+6	; 0x06
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1140:	ed 81       	ldd	r30, Y+5	; 0x05
    1142:	fe 81       	ldd	r31, Y+6	; 0x06
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	09 f4       	brne	.+2      	; 0x114e <xQueueCreate+0x7a>
    114c:	5d c0       	rjmp	.+186    	; 0x1208 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    114e:	ed 81       	ldd	r30, Y+5	; 0x05
    1150:	fe 81       	ldd	r31, Y+6	; 0x06
    1152:	40 81       	ld	r20, Z
    1154:	51 81       	ldd	r21, Z+1	; 0x01
    1156:	8f 81       	ldd	r24, Y+7	; 0x07
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	88 85       	ldd	r24, Y+8	; 0x08
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	bc 01       	movw	r22, r24
    1164:	26 9f       	mul	r18, r22
    1166:	c0 01       	movw	r24, r0
    1168:	27 9f       	mul	r18, r23
    116a:	90 0d       	add	r25, r0
    116c:	36 9f       	mul	r19, r22
    116e:	90 0d       	add	r25, r0
    1170:	11 24       	eor	r1, r1
    1172:	84 0f       	add	r24, r20
    1174:	95 1f       	adc	r25, r21
    1176:	ed 81       	ldd	r30, Y+5	; 0x05
    1178:	fe 81       	ldd	r31, Y+6	; 0x06
    117a:	93 83       	std	Z+3, r25	; 0x03
    117c:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    117e:	ed 81       	ldd	r30, Y+5	; 0x05
    1180:	fe 81       	ldd	r31, Y+6	; 0x06
    1182:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1184:	ed 81       	ldd	r30, Y+5	; 0x05
    1186:	fe 81       	ldd	r31, Y+6	; 0x06
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	ed 81       	ldd	r30, Y+5	; 0x05
    118e:	fe 81       	ldd	r31, Y+6	; 0x06
    1190:	95 83       	std	Z+5, r25	; 0x05
    1192:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1194:	ed 81       	ldd	r30, Y+5	; 0x05
    1196:	fe 81       	ldd	r31, Y+6	; 0x06
    1198:	40 81       	ld	r20, Z
    119a:	51 81       	ldd	r21, Z+1	; 0x01
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9c 01       	movw	r18, r24
    11a4:	21 50       	subi	r18, 0x01	; 1
    11a6:	30 40       	sbci	r19, 0x00	; 0
    11a8:	88 85       	ldd	r24, Y+8	; 0x08
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	bc 01       	movw	r22, r24
    11b0:	26 9f       	mul	r18, r22
    11b2:	c0 01       	movw	r24, r0
    11b4:	27 9f       	mul	r18, r23
    11b6:	90 0d       	add	r25, r0
    11b8:	36 9f       	mul	r19, r22
    11ba:	90 0d       	add	r25, r0
    11bc:	11 24       	eor	r1, r1
    11be:	84 0f       	add	r24, r20
    11c0:	95 1f       	adc	r25, r21
    11c2:	ed 81       	ldd	r30, Y+5	; 0x05
    11c4:	fe 81       	ldd	r31, Y+6	; 0x06
    11c6:	97 83       	std	Z+7, r25	; 0x07
    11c8:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    11ca:	ed 81       	ldd	r30, Y+5	; 0x05
    11cc:	fe 81       	ldd	r31, Y+6	; 0x06
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    11d2:	ed 81       	ldd	r30, Y+5	; 0x05
    11d4:	fe 81       	ldd	r31, Y+6	; 0x06
    11d6:	88 85       	ldd	r24, Y+8	; 0x08
    11d8:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    11da:	ed 81       	ldd	r30, Y+5	; 0x05
    11dc:	fe 81       	ldd	r31, Y+6	; 0x06
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    11e2:	ed 81       	ldd	r30, Y+5	; 0x05
    11e4:	fe 81       	ldd	r31, Y+6	; 0x06
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	08 96       	adiw	r24, 0x08	; 8
    11f0:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	41 96       	adiw	r24, 0x11	; 17
    11fa:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1214:	28 96       	adiw	r28, 0x08	; 8
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	2c 97       	sbiw	r28, 0x0c	; 12
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	9e 83       	std	Y+6, r25	; 0x06
    123c:	8d 83       	std	Y+5, r24	; 0x05
    123e:	78 87       	std	Y+8, r23	; 0x08
    1240:	6f 83       	std	Y+7, r22	; 0x07
    1242:	5a 87       	std	Y+10, r21	; 0x0a
    1244:	49 87       	std	Y+9, r20	; 0x09
    1246:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1248:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1250:	ed 81       	ldd	r30, Y+5	; 0x05
    1252:	fe 81       	ldd	r31, Y+6	; 0x06
    1254:	92 8d       	ldd	r25, Z+26	; 0x1a
    1256:	ed 81       	ldd	r30, Y+5	; 0x05
    1258:	fe 81       	ldd	r31, Y+6	; 0x06
    125a:	83 8d       	ldd	r24, Z+27	; 0x1b
    125c:	98 17       	cp	r25, r24
    125e:	d8 f4       	brcc	.+54     	; 0x1296 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	2f 81       	ldd	r18, Y+7	; 0x07
    1266:	38 85       	ldd	r19, Y+8	; 0x08
    1268:	b9 01       	movw	r22, r18
    126a:	4b 85       	ldd	r20, Y+11	; 0x0b
    126c:	0e 94 4e 0b 	call	0x169c	; 0x169c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1270:	ed 81       	ldd	r30, Y+5	; 0x05
    1272:	fe 81       	ldd	r31, Y+6	; 0x06
    1274:	81 89       	ldd	r24, Z+17	; 0x11
    1276:	88 23       	and	r24, r24
    1278:	49 f0       	breq	.+18     	; 0x128c <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	41 96       	adiw	r24, 0x11	; 17
    1280:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	11 f4       	brne	.+4      	; 0x128c <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1288:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8c 87       	std	Y+12, r24	; 0x0c
    1294:	5c c0       	rjmp	.+184    	; 0x134e <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1296:	89 85       	ldd	r24, Y+9	; 0x09
    1298:	9a 85       	ldd	r25, Y+10	; 0x0a
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	21 f4       	brne	.+8      	; 0x12a6 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    12a2:	1c 86       	std	Y+12, r1	; 0x0c
    12a4:	54 c0       	rjmp	.+168    	; 0x134e <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	88 23       	and	r24, r24
    12aa:	31 f4       	brne	.+12     	; 0x12b8 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    12ac:	ce 01       	movw	r24, r28
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	0e 94 c9 11 	call	0x2392	; 0x2392 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    12bc:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	0f 92       	push	r0
    12c6:	ed 81       	ldd	r30, Y+5	; 0x05
    12c8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    12cc:	8f 3f       	cpi	r24, 0xFF	; 255
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <xQueueGenericSend+0xb0>
    12d0:	ed 81       	ldd	r30, Y+5	; 0x05
    12d2:	fe 81       	ldd	r31, Y+6	; 0x06
    12d4:	15 8e       	std	Z+29, r1	; 0x1d
    12d6:	ed 81       	ldd	r30, Y+5	; 0x05
    12d8:	fe 81       	ldd	r31, Y+6	; 0x06
    12da:	86 8d       	ldd	r24, Z+30	; 0x1e
    12dc:	8f 3f       	cpi	r24, 0xFF	; 255
    12de:	19 f4       	brne	.+6      	; 0x12e6 <xQueueGenericSend+0xc0>
    12e0:	ed 81       	ldd	r30, Y+5	; 0x05
    12e2:	fe 81       	ldd	r31, Y+6	; 0x06
    12e4:	16 8e       	std	Z+30, r1	; 0x1e
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    12ea:	ce 01       	movw	r24, r28
    12ec:	02 96       	adiw	r24, 0x02	; 2
    12ee:	9e 01       	movw	r18, r28
    12f0:	27 5f       	subi	r18, 0xF7	; 247
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	b9 01       	movw	r22, r18
    12f6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <xTaskCheckForTimeOut>
    12fa:	88 23       	and	r24, r24
    12fc:	09 f5       	brne	.+66     	; 0x1340 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	0e 94 b2 0c 	call	0x1964	; 0x1964 <prvIsQueueFull>
    1306:	88 23       	and	r24, r24
    1308:	a1 f0       	breq	.+40     	; 0x1332 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	08 96       	adiw	r24, 0x08	; 8
    1310:	29 85       	ldd	r18, Y+9	; 0x09
    1312:	3a 85       	ldd	r19, Y+10	; 0x0a
    1314:	b9 01       	movw	r22, r18
    1316:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1322:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
    1326:	88 23       	and	r24, r24
    1328:	09 f0       	breq	.+2      	; 0x132c <xQueueGenericSend+0x106>
    132a:	8f cf       	rjmp	.-226    	; 0x124a <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    132c:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
    1330:	8c cf       	rjmp	.-232    	; 0x124a <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	0e 94 2b 0c 	call	0x1856	; 0x1856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    133a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
    133e:	85 cf       	rjmp	.-246    	; 0x124a <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	0e 94 2b 0c 	call	0x1856	; 0x1856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1348:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    134c:	1c 86       	std	Y+12, r1	; 0x0c
    134e:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1350:	2c 96       	adiw	r28, 0x0c	; 12
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	29 97       	sbiw	r28, 0x09	; 9
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	7e 83       	std	Y+6, r23	; 0x06
    137c:	6d 83       	std	Y+5, r22	; 0x05
    137e:	58 87       	std	Y+8, r21	; 0x08
    1380:	4f 83       	std	Y+7, r20	; 0x07
    1382:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1384:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1386:	eb 81       	ldd	r30, Y+3	; 0x03
    1388:	fc 81       	ldd	r31, Y+4	; 0x04
    138a:	92 8d       	ldd	r25, Z+26	; 0x1a
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	83 8d       	ldd	r24, Z+27	; 0x1b
    1392:	98 17       	cp	r25, r24
    1394:	40 f5       	brcc	.+80     	; 0x13e6 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	b9 01       	movw	r22, r18
    13a0:	49 85       	ldd	r20, Y+9	; 0x09
    13a2:	0e 94 4e 0b 	call	0x169c	; 0x169c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    13a6:	eb 81       	ldd	r30, Y+3	; 0x03
    13a8:	fc 81       	ldd	r31, Y+4	; 0x04
    13aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	89 f4       	brne	.+34     	; 0x13d2 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13b0:	eb 81       	ldd	r30, Y+3	; 0x03
    13b2:	fc 81       	ldd	r31, Y+4	; 0x04
    13b4:	81 89       	ldd	r24, Z+17	; 0x11
    13b6:	88 23       	and	r24, r24
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	41 96       	adiw	r24, 0x11	; 17
    13c0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    13c4:	88 23       	and	r24, r24
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    13c8:	ef 81       	ldd	r30, Y+7	; 0x07
    13ca:	f8 85       	ldd	r31, Y+8	; 0x08
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 83       	st	Z, r24
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    13d2:	eb 81       	ldd	r30, Y+3	; 0x03
    13d4:	fc 81       	ldd	r31, Y+4	; 0x04
    13d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    13e6:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13ea:	29 96       	adiw	r28, 0x09	; 9
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	2e 97       	sbiw	r28, 0x0e	; 14
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	8f 83       	std	Y+7, r24	; 0x07
    1414:	7a 87       	std	Y+10, r23	; 0x0a
    1416:	69 87       	std	Y+9, r22	; 0x09
    1418:	5c 87       	std	Y+12, r21	; 0x0c
    141a:	4b 87       	std	Y+11, r20	; 0x0b
    141c:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    141e:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1426:	ef 81       	ldd	r30, Y+7	; 0x07
    1428:	f8 85       	ldd	r31, Y+8	; 0x08
    142a:	82 8d       	ldd	r24, Z+26	; 0x1a
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <xQueueGenericReceive+0x36>
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1432:	ef 81       	ldd	r30, Y+7	; 0x07
    1434:	f8 85       	ldd	r31, Y+8	; 0x08
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	97 81       	ldd	r25, Z+7	; 0x07
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    143e:	8f 81       	ldd	r24, Y+7	; 0x07
    1440:	98 85       	ldd	r25, Y+8	; 0x08
    1442:	29 85       	ldd	r18, Y+9	; 0x09
    1444:	3a 85       	ldd	r19, Y+10	; 0x0a
    1446:	b9 01       	movw	r22, r18
    1448:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	88 23       	and	r24, r24
    1450:	b1 f4       	brne	.+44     	; 0x147e <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1452:	ef 81       	ldd	r30, Y+7	; 0x07
    1454:	f8 85       	ldd	r31, Y+8	; 0x08
    1456:	82 8d       	ldd	r24, Z+26	; 0x1a
    1458:	81 50       	subi	r24, 0x01	; 1
    145a:	ef 81       	ldd	r30, Y+7	; 0x07
    145c:	f8 85       	ldd	r31, Y+8	; 0x08
    145e:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1460:	ef 81       	ldd	r30, Y+7	; 0x07
    1462:	f8 85       	ldd	r31, Y+8	; 0x08
    1464:	80 85       	ldd	r24, Z+8	; 0x08
    1466:	88 23       	and	r24, r24
    1468:	f1 f0       	breq	.+60     	; 0x14a6 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    146a:	8f 81       	ldd	r24, Y+7	; 0x07
    146c:	98 85       	ldd	r25, Y+8	; 0x08
    146e:	08 96       	adiw	r24, 0x08	; 8
    1470:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	b9 f4       	brne	.+46     	; 0x14a6 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    1478:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    147e:	ef 81       	ldd	r30, Y+7	; 0x07
    1480:	f8 85       	ldd	r31, Y+8	; 0x08
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	97 83       	std	Z+7, r25	; 0x07
    1488:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    148a:	ef 81       	ldd	r30, Y+7	; 0x07
    148c:	f8 85       	ldd	r31, Y+8	; 0x08
    148e:	81 89       	ldd	r24, Z+17	; 0x11
    1490:	88 23       	and	r24, r24
    1492:	49 f0       	breq	.+18     	; 0x14a6 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1494:	8f 81       	ldd	r24, Y+7	; 0x07
    1496:	98 85       	ldd	r25, Y+8	; 0x08
    1498:	41 96       	adiw	r24, 0x11	; 17
    149a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    149e:	88 23       	and	r24, r24
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    14a2:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	8e 87       	std	Y+14, r24	; 0x0e
    14ae:	5c c0       	rjmp	.+184    	; 0x1568 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    14b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    14bc:	1e 86       	std	Y+14, r1	; 0x0e
    14be:	54 c0       	rjmp	.+168    	; 0x1568 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 23       	and	r24, r24
    14c4:	31 f4       	brne	.+12     	; 0x14d2 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    14c6:	ce 01       	movw	r24, r28
    14c8:	04 96       	adiw	r24, 0x04	; 4
    14ca:	0e 94 c9 11 	call	0x2392	; 0x2392 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    14d6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	0f 92       	push	r0
    14e0:	ef 81       	ldd	r30, Y+7	; 0x07
    14e2:	f8 85       	ldd	r31, Y+8	; 0x08
    14e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    14e6:	8f 3f       	cpi	r24, 0xFF	; 255
    14e8:	19 f4       	brne	.+6      	; 0x14f0 <xQueueGenericReceive+0xf4>
    14ea:	ef 81       	ldd	r30, Y+7	; 0x07
    14ec:	f8 85       	ldd	r31, Y+8	; 0x08
    14ee:	15 8e       	std	Z+29, r1	; 0x1d
    14f0:	ef 81       	ldd	r30, Y+7	; 0x07
    14f2:	f8 85       	ldd	r31, Y+8	; 0x08
    14f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    14f6:	8f 3f       	cpi	r24, 0xFF	; 255
    14f8:	19 f4       	brne	.+6      	; 0x1500 <xQueueGenericReceive+0x104>
    14fa:	ef 81       	ldd	r30, Y+7	; 0x07
    14fc:	f8 85       	ldd	r31, Y+8	; 0x08
    14fe:	16 8e       	std	Z+30, r1	; 0x1e
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1504:	ce 01       	movw	r24, r28
    1506:	04 96       	adiw	r24, 0x04	; 4
    1508:	9e 01       	movw	r18, r28
    150a:	25 5f       	subi	r18, 0xF5	; 245
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	b9 01       	movw	r22, r18
    1510:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <xTaskCheckForTimeOut>
    1514:	88 23       	and	r24, r24
    1516:	09 f5       	brne	.+66     	; 0x155a <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1518:	8f 81       	ldd	r24, Y+7	; 0x07
    151a:	98 85       	ldd	r25, Y+8	; 0x08
    151c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <prvIsQueueEmpty>
    1520:	88 23       	and	r24, r24
    1522:	a1 f0       	breq	.+40     	; 0x154c <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1524:	8f 81       	ldd	r24, Y+7	; 0x07
    1526:	98 85       	ldd	r25, Y+8	; 0x08
    1528:	41 96       	adiw	r24, 0x11	; 17
    152a:	2b 85       	ldd	r18, Y+11	; 0x0b
    152c:	3c 85       	ldd	r19, Y+12	; 0x0c
    152e:	b9 01       	movw	r22, r18
    1530:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	0e 94 2b 0c 	call	0x1856	; 0x1856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    153c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
    1540:	88 23       	and	r24, r24
    1542:	09 f0       	breq	.+2      	; 0x1546 <xQueueGenericReceive+0x14a>
    1544:	6d cf       	rjmp	.-294    	; 0x1420 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1546:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
    154a:	6a cf       	rjmp	.-300    	; 0x1420 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    154c:	8f 81       	ldd	r24, Y+7	; 0x07
    154e:	98 85       	ldd	r25, Y+8	; 0x08
    1550:	0e 94 2b 0c 	call	0x1856	; 0x1856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1554:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
    1558:	63 cf       	rjmp	.-314    	; 0x1420 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    155a:	8f 81       	ldd	r24, Y+7	; 0x07
    155c:	98 85       	ldd	r25, Y+8	; 0x08
    155e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1562:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1566:	1e 86       	std	Y+14, r1	; 0x0e
    1568:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    156a:	2e 96       	adiw	r28, 0x0e	; 14
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	28 97       	sbiw	r28, 0x08	; 8
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
    1594:	7e 83       	std	Y+6, r23	; 0x06
    1596:	6d 83       	std	Y+5, r22	; 0x05
    1598:	58 87       	std	Y+8, r21	; 0x08
    159a:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    159c:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    159e:	eb 81       	ldd	r30, Y+3	; 0x03
    15a0:	fc 81       	ldd	r31, Y+4	; 0x04
    15a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    15a4:	88 23       	and	r24, r24
    15a6:	71 f1       	breq	.+92     	; 0x1604 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	2d 81       	ldd	r18, Y+5	; 0x05
    15ae:	3e 81       	ldd	r19, Y+6	; 0x06
    15b0:	b9 01       	movw	r22, r18
    15b2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    15b6:	eb 81       	ldd	r30, Y+3	; 0x03
    15b8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    15bc:	81 50       	subi	r24, 0x01	; 1
    15be:	eb 81       	ldd	r30, Y+3	; 0x03
    15c0:	fc 81       	ldd	r31, Y+4	; 0x04
    15c2:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    15c4:	eb 81       	ldd	r30, Y+3	; 0x03
    15c6:	fc 81       	ldd	r31, Y+4	; 0x04
    15c8:	85 8d       	ldd	r24, Z+29	; 0x1d
    15ca:	8f 3f       	cpi	r24, 0xFF	; 255
    15cc:	89 f4       	brne	.+34     	; 0x15f0 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    15ce:	eb 81       	ldd	r30, Y+3	; 0x03
    15d0:	fc 81       	ldd	r31, Y+4	; 0x04
    15d2:	80 85       	ldd	r24, Z+8	; 0x08
    15d4:	88 23       	and	r24, r24
    15d6:	99 f0       	breq	.+38     	; 0x15fe <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	08 96       	adiw	r24, 0x08	; 8
    15de:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    15e2:	88 23       	and	r24, r24
    15e4:	61 f0       	breq	.+24     	; 0x15fe <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    15e6:	ef 81       	ldd	r30, Y+7	; 0x07
    15e8:	f8 85       	ldd	r31, Y+8	; 0x08
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 83       	st	Z, r24
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    15f0:	eb 81       	ldd	r30, Y+3	; 0x03
    15f2:	fc 81       	ldd	r31, Y+4	; 0x04
    15f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    15f6:	8f 5f       	subi	r24, 0xFF	; 255
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8a 83       	std	Y+2, r24	; 0x02
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1604:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1608:	28 96       	adiw	r28, 0x08	; 8
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <uxQueueMessagesWaiting+0x6>
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	9b 83       	std	Y+3, r25	; 0x03
    1628:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1630:	ea 81       	ldd	r30, Y+2	; 0x02
    1632:	fb 81       	ldd	r31, Y+3	; 0x03
    1634:	82 8d       	ldd	r24, Z+26	; 0x1a
    1636:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <uxQueueMessagesWaitingFromISR+0x6>
    1650:	0f 92       	push	r0
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	9b 83       	std	Y+3, r25	; 0x03
    1658:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    165a:	ea 81       	ldd	r30, Y+2	; 0x02
    165c:	fb 81       	ldd	r31, Y+3	; 0x03
    165e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1660:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <vQueueDelete+0x6>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    167e:	e9 81       	ldd	r30, Y+1	; 0x01
    1680:	fa 81       	ldd	r31, Y+2	; 0x02
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
	vPortFree( pxQueue );
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <prvCopyDataToQueue+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <prvCopyDataToQueue+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	7c 83       	std	Y+4, r23	; 0x04
    16b0:	6b 83       	std	Y+3, r22	; 0x03
    16b2:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <prvCopyDataToQueue+0x24>
    16be:	74 c0       	rjmp	.+232    	; 0x17a8 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	88 23       	and	r24, r24
    16c4:	99 f5       	brne	.+102    	; 0x172c <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    16c6:	e9 81       	ldd	r30, Y+1	; 0x01
    16c8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ca:	64 81       	ldd	r22, Z+4	; 0x04
    16cc:	75 81       	ldd	r23, Z+5	; 0x05
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    16d4:	48 2f       	mov	r20, r24
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	cb 01       	movw	r24, r22
    16de:	b9 01       	movw	r22, r18
    16e0:	0e 94 d6 13 	call	0x27ac	; 0x27ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	24 81       	ldd	r18, Z+4	; 0x04
    16ea:	35 81       	ldd	r19, Z+5	; 0x05
    16ec:	e9 81       	ldd	r30, Y+1	; 0x01
    16ee:	fa 81       	ldd	r31, Y+2	; 0x02
    16f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	95 83       	std	Z+5, r25	; 0x05
    1700:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1702:	e9 81       	ldd	r30, Y+1	; 0x01
    1704:	fa 81       	ldd	r31, Y+2	; 0x02
    1706:	24 81       	ldd	r18, Z+4	; 0x04
    1708:	35 81       	ldd	r19, Z+5	; 0x05
    170a:	e9 81       	ldd	r30, Y+1	; 0x01
    170c:	fa 81       	ldd	r31, Y+2	; 0x02
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	28 17       	cp	r18, r24
    1714:	39 07       	cpc	r19, r25
    1716:	08 f4       	brcc	.+2      	; 0x171a <prvCopyDataToQueue+0x7e>
    1718:	47 c0       	rjmp	.+142    	; 0x17a8 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    171a:	e9 81       	ldd	r30, Y+1	; 0x01
    171c:	fa 81       	ldd	r31, Y+2	; 0x02
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	e9 81       	ldd	r30, Y+1	; 0x01
    1724:	fa 81       	ldd	r31, Y+2	; 0x02
    1726:	95 83       	std	Z+5, r25	; 0x05
    1728:	84 83       	std	Z+4, r24	; 0x04
    172a:	3e c0       	rjmp	.+124    	; 0x17a8 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    172c:	e9 81       	ldd	r30, Y+1	; 0x01
    172e:	fa 81       	ldd	r31, Y+2	; 0x02
    1730:	66 81       	ldd	r22, Z+6	; 0x06
    1732:	77 81       	ldd	r23, Z+7	; 0x07
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	84 8d       	ldd	r24, Z+28	; 0x1c
    173a:	48 2f       	mov	r20, r24
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	2b 81       	ldd	r18, Y+3	; 0x03
    1740:	3c 81       	ldd	r19, Y+4	; 0x04
    1742:	cb 01       	movw	r24, r22
    1744:	b9 01       	movw	r22, r18
    1746:	0e 94 d6 13 	call	0x27ac	; 0x27ac <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	26 81       	ldd	r18, Z+6	; 0x06
    1750:	37 81       	ldd	r19, Z+7	; 0x07
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	84 8d       	ldd	r24, Z+28	; 0x1c
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	90 95       	com	r25
    175e:	81 95       	neg	r24
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	97 83       	std	Z+7, r25	; 0x07
    176c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	26 81       	ldd	r18, Z+6	; 0x06
    1774:	37 81       	ldd	r19, Z+7	; 0x07
    1776:	e9 81       	ldd	r30, Y+1	; 0x01
    1778:	fa 81       	ldd	r31, Y+2	; 0x02
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	28 17       	cp	r18, r24
    1780:	39 07       	cpc	r19, r25
    1782:	90 f4       	brcc	.+36     	; 0x17a8 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	22 81       	ldd	r18, Z+2	; 0x02
    178a:	33 81       	ldd	r19, Z+3	; 0x03
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	84 8d       	ldd	r24, Z+28	; 0x1c
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	90 95       	com	r25
    1798:	81 95       	neg	r24
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	97 83       	std	Z+7, r25	; 0x07
    17a6:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	82 8f       	std	Z+26, r24	; 0x1a
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <prvCopyDataFromQueue+0x6>
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <prvCopyDataFromQueue+0x8>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	7c 83       	std	Y+4, r23	; 0x04
    17d8:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    17da:	e9 81       	ldd	r30, Y+1	; 0x01
    17dc:	fa 81       	ldd	r31, Y+2	; 0x02
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	89 f1       	breq	.+98     	; 0x1848 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	26 81       	ldd	r18, Z+6	; 0x06
    17ec:	37 81       	ldd	r19, Z+7	; 0x07
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	97 83       	std	Z+7, r25	; 0x07
    1802:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1804:	e9 81       	ldd	r30, Y+1	; 0x01
    1806:	fa 81       	ldd	r31, Y+2	; 0x02
    1808:	26 81       	ldd	r18, Z+6	; 0x06
    180a:	37 81       	ldd	r19, Z+7	; 0x07
    180c:	e9 81       	ldd	r30, Y+1	; 0x01
    180e:	fa 81       	ldd	r31, Y+2	; 0x02
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	28 17       	cp	r18, r24
    1816:	39 07       	cpc	r19, r25
    1818:	40 f0       	brcs	.+16     	; 0x182a <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	e9 81       	ldd	r30, Y+1	; 0x01
    1824:	fa 81       	ldd	r31, Y+2	; 0x02
    1826:	97 83       	std	Z+7, r25	; 0x07
    1828:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	46 81       	ldd	r20, Z+6	; 0x06
    1830:	57 81       	ldd	r21, Z+7	; 0x07
    1832:	e9 81       	ldd	r30, Y+1	; 0x01
    1834:	fa 81       	ldd	r31, Y+2	; 0x02
    1836:	84 8d       	ldd	r24, Z+28	; 0x1c
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	ba 01       	movw	r22, r20
    1842:	a9 01       	movw	r20, r18
    1844:	0e 94 d6 13 	call	0x27ac	; 0x27ac <memcpy>
	}
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <prvUnlockQueue+0x6>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	0f 92       	push	r0
    186a:	15 c0       	rjmp	.+42     	; 0x1896 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    186c:	e9 81       	ldd	r30, Y+1	; 0x01
    186e:	fa 81       	ldd	r31, Y+2	; 0x02
    1870:	81 89       	ldd	r24, Z+17	; 0x11
    1872:	88 23       	and	r24, r24
    1874:	a9 f0       	breq	.+42     	; 0x18a0 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	41 96       	adiw	r24, 0x11	; 17
    187c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    1880:	88 23       	and	r24, r24
    1882:	11 f0       	breq	.+4      	; 0x1888 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1884:	0e 94 3f 12 	call	0x247e	; 0x247e <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1888:	e9 81       	ldd	r30, Y+1	; 0x01
    188a:	fa 81       	ldd	r31, Y+2	; 0x02
    188c:	86 8d       	ldd	r24, Z+30	; 0x1e
    188e:	81 50       	subi	r24, 0x01	; 1
    1890:	e9 81       	ldd	r30, Y+1	; 0x01
    1892:	fa 81       	ldd	r31, Y+2	; 0x02
    1894:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	86 8d       	ldd	r24, Z+30	; 0x1e
    189c:	18 16       	cp	r1, r24
    189e:	34 f3       	brlt	.-52     	; 0x186c <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	0f 92       	push	r0
    18b2:	15 c0       	rjmp	.+42     	; 0x18de <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18b4:	e9 81       	ldd	r30, Y+1	; 0x01
    18b6:	fa 81       	ldd	r31, Y+2	; 0x02
    18b8:	80 85       	ldd	r24, Z+8	; 0x08
    18ba:	88 23       	and	r24, r24
    18bc:	a9 f0       	breq	.+42     	; 0x18e8 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	08 96       	adiw	r24, 0x08	; 8
    18c4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <xTaskRemoveFromEventList>
    18c8:	88 23       	and	r24, r24
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    18cc:	0e 94 3f 12 	call	0x247e	; 0x247e <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    18d0:	e9 81       	ldd	r30, Y+1	; 0x01
    18d2:	fa 81       	ldd	r31, Y+2	; 0x02
    18d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    18d6:	81 50       	subi	r24, 0x01	; 1
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    18de:	e9 81       	ldd	r30, Y+1	; 0x01
    18e0:	fa 81       	ldd	r31, Y+2	; 0x02
    18e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    18e4:	18 16       	cp	r1, r24
    18e6:	34 f3       	brlt	.-52     	; 0x18b4 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    18e8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ea:	fa 81       	ldd	r31, Y+2	; 0x02
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <prvIsQueueEmpty+0x6>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1914:	ea 81       	ldd	r30, Y+2	; 0x02
    1916:	fb 81       	ldd	r31, Y+3	; 0x03
    1918:	82 8d       	ldd	r24, Z+26	; 0x1a
    191a:	19 82       	std	Y+1, r1	; 0x01
    191c:	88 23       	and	r24, r24
    191e:	11 f4       	brne	.+4      	; 0x1924 <prvIsQueueEmpty+0x26>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <xQueueIsQueueEmptyFromISR+0x6>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1946:	ea 81       	ldd	r30, Y+2	; 0x02
    1948:	fb 81       	ldd	r31, Y+3	; 0x03
    194a:	82 8d       	ldd	r24, Z+26	; 0x1a
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	88 23       	and	r24, r24
    1950:	11 f4       	brne	.+4      	; 0x1956 <xQueueIsQueueEmptyFromISR+0x20>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <prvIsQueueFull+0x6>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9b 83       	std	Y+3, r25	; 0x03
    1972:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    197a:	ea 81       	ldd	r30, Y+2	; 0x02
    197c:	fb 81       	ldd	r31, Y+3	; 0x03
    197e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1980:	ea 81       	ldd	r30, Y+2	; 0x02
    1982:	fb 81       	ldd	r31, Y+3	; 0x03
    1984:	83 8d       	ldd	r24, Z+27	; 0x1b
    1986:	19 82       	std	Y+1, r1	; 0x01
    1988:	98 17       	cp	r25, r24
    198a:	11 f4       	brne	.+4      	; 0x1990 <prvIsQueueFull+0x2c>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <xQueueIsQueueFullFromISR+0x6>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	9b 83       	std	Y+3, r25	; 0x03
    19b0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    19b2:	ea 81       	ldd	r30, Y+2	; 0x02
    19b4:	fb 81       	ldd	r31, Y+3	; 0x03
    19b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    19b8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ba:	fb 81       	ldd	r31, Y+3	; 0x03
    19bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	98 17       	cp	r25, r24
    19c2:	11 f4       	brne	.+4      	; 0x19c8 <xQueueIsQueueFullFromISR+0x26>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    19d6:	af 92       	push	r10
    19d8:	bf 92       	push	r11
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	64 97       	sbiw	r28, 0x14	; 20
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	9f 83       	std	Y+7, r25	; 0x07
    19fc:	8e 83       	std	Y+6, r24	; 0x06
    19fe:	79 87       	std	Y+9, r23	; 0x09
    1a00:	68 87       	std	Y+8, r22	; 0x08
    1a02:	5b 87       	std	Y+11, r21	; 0x0b
    1a04:	4a 87       	std	Y+10, r20	; 0x0a
    1a06:	3d 87       	std	Y+13, r19	; 0x0d
    1a08:	2c 87       	std	Y+12, r18	; 0x0c
    1a0a:	0e 87       	std	Y+14, r16	; 0x0e
    1a0c:	f8 8a       	std	Y+16, r15	; 0x10
    1a0e:	ef 86       	std	Y+15, r14	; 0x0f
    1a10:	da 8a       	std	Y+18, r13	; 0x12
    1a12:	c9 8a       	std	Y+17, r12	; 0x11
    1a14:	bc 8a       	std	Y+20, r11	; 0x14
    1a16:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1c:	29 89       	ldd	r18, Y+17	; 0x11
    1a1e:	3a 89       	ldd	r19, Y+18	; 0x12
    1a20:	b9 01       	movw	r22, r18
    1a22:	0e 94 70 13 	call	0x26e0	; 0x26e0 <prvAllocateTCBAndStack>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <xTaskGenericCreate+0x5e>
    1a32:	99 c0       	rjmp	.+306    	; 0x1b66 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1a34:	eb 81       	ldd	r30, Y+3	; 0x03
    1a36:	fc 81       	ldd	r31, Y+4	; 0x04
    1a38:	27 89       	ldd	r18, Z+23	; 0x17
    1a3a:	30 8d       	ldd	r19, Z+24	; 0x18
    1a3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	82 0f       	add	r24, r18
    1a44:	93 1f       	adc	r25, r19
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	28 85       	ldd	r18, Y+8	; 0x08
    1a50:	39 85       	ldd	r19, Y+9	; 0x09
    1a52:	eb 89       	ldd	r30, Y+19	; 0x13
    1a54:	fc 89       	ldd	r31, Y+20	; 0x14
    1a56:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a58:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a5a:	b9 01       	movw	r22, r18
    1a5c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a5e:	9f 01       	movw	r18, r30
    1a60:	8d 01       	movw	r16, r26
    1a62:	0e 94 55 12 	call	0x24aa	; 0x24aa <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a70:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a72:	b9 01       	movw	r22, r18
    1a74:	0e 94 71 05 	call	0xae2	; 0xae2 <pxPortInitialiseStack>
    1a78:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a82:	98 89       	ldd	r25, Y+16	; 0x10
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	31 f0       	breq	.+12     	; 0x1a94 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1a88:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a8a:	f8 89       	ldd	r31, Y+16	; 0x10
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1a9a:	80 91 11 03 	lds	r24, 0x0311
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	80 93 11 03 	sts	0x0311, r24
			if( pxCurrentTCB == NULL )
    1aa4:	80 91 0e 03 	lds	r24, 0x030E
    1aa8:	90 91 0f 03 	lds	r25, 0x030F
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f4       	brne	.+26     	; 0x1aca <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	90 93 0f 03 	sts	0x030F, r25
    1ab8:	80 93 0e 03 	sts	0x030E, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1abc:	80 91 11 03 	lds	r24, 0x0311
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	a9 f4       	brne	.+42     	; 0x1aee <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1ac4:	0e 94 ac 12 	call	0x2558	; 0x2558 <prvInitialiseTaskLists>
    1ac8:	12 c0       	rjmp	.+36     	; 0x1aee <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1aca:	80 91 16 03 	lds	r24, 0x0316
    1ace:	88 23       	and	r24, r24
    1ad0:	71 f4       	brne	.+28     	; 0x1aee <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1ad2:	e0 91 0e 03 	lds	r30, 0x030E
    1ad6:	f0 91 0f 03 	lds	r31, 0x030F
    1ada:	96 89       	ldd	r25, Z+22	; 0x16
    1adc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ade:	89 17       	cp	r24, r25
    1ae0:	30 f0       	brcs	.+12     	; 0x1aee <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	90 93 0f 03 	sts	0x030F, r25
    1aea:	80 93 0e 03 	sts	0x030E, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1aee:	eb 81       	ldd	r30, Y+3	; 0x03
    1af0:	fc 81       	ldd	r31, Y+4	; 0x04
    1af2:	96 89       	ldd	r25, Z+22	; 0x16
    1af4:	80 91 14 03 	lds	r24, 0x0314
    1af8:	89 17       	cp	r24, r25
    1afa:	28 f4       	brcc	.+10     	; 0x1b06 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1afc:	eb 81       	ldd	r30, Y+3	; 0x03
    1afe:	fc 81       	ldd	r31, Y+4	; 0x04
    1b00:	86 89       	ldd	r24, Z+22	; 0x16
    1b02:	80 93 14 03 	sts	0x0314, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1b06:	80 91 1b 03 	lds	r24, 0x031B
    1b0a:	8f 5f       	subi	r24, 0xFF	; 255
    1b0c:	80 93 1b 03 	sts	0x031B, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    1b10:	eb 81       	ldd	r30, Y+3	; 0x03
    1b12:	fc 81       	ldd	r31, Y+4	; 0x04
    1b14:	96 89       	ldd	r25, Z+22	; 0x16
    1b16:	80 91 15 03 	lds	r24, 0x0315
    1b1a:	89 17       	cp	r24, r25
    1b1c:	28 f4       	brcc	.+10     	; 0x1b28 <xTaskGenericCreate+0x152>
    1b1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b20:	fc 81       	ldd	r31, Y+4	; 0x04
    1b22:	86 89       	ldd	r24, Z+22	; 0x16
    1b24:	80 93 15 03 	sts	0x0315, r24
    1b28:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2c:	86 89       	ldd	r24, Z+22	; 0x16
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	c9 01       	movw	r24, r18
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	ac 01       	movw	r20, r24
    1b46:	44 5e       	subi	r20, 0xE4	; 228
    1b48:	5c 4f       	sbci	r21, 0xFC	; 252
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	9c 01       	movw	r18, r24
    1b50:	2e 5f       	subi	r18, 0xFE	; 254
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	ca 01       	movw	r24, r20
    1b56:	b9 01       	movw	r22, r18
    1b58:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>

			xReturn = pdPASS;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	71 f4       	brne	.+28     	; 0x1b8c <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    1b70:	80 91 16 03 	lds	r24, 0x0316
    1b74:	88 23       	and	r24, r24
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1b78:	e0 91 0e 03 	lds	r30, 0x030E
    1b7c:	f0 91 0f 03 	lds	r31, 0x030F
    1b80:	96 89       	ldd	r25, Z+22	; 0x16
    1b82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b84:	98 17       	cp	r25, r24
    1b86:	10 f4       	brcc	.+4      	; 0x1b8c <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    1b88:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
			}
		}
	}

	return xReturn;
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b8e:	64 96       	adiw	r28, 0x14	; 20
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	08 95       	ret

00001bb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <vTaskDelete+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <vTaskDelete+0x8>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <vTaskDelete+0xa>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1bc8:	20 91 0e 03 	lds	r18, 0x030E
    1bcc:	30 91 0f 03 	lds	r19, 0x030F
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	82 17       	cp	r24, r18
    1bd6:	93 07       	cpc	r25, r19
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    1bda:	1c 82       	std	Y+4, r1	; 0x04
    1bdc:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <vTaskDelete+0x44>
    1be6:	80 91 0e 03 	lds	r24, 0x030E
    1bea:	90 91 0f 03 	lds	r25, 0x030F
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <vTaskDelete+0x4c>
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	02 96       	adiw	r24, 0x02	; 2
    1c0a:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c10:	fa 81       	ldd	r31, Y+2	; 0x02
    1c12:	84 89       	ldd	r24, Z+20	; 0x14
    1c14:	95 89       	ldd	r25, Z+21	; 0x15
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	29 f0       	breq	.+10     	; 0x1c24 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	0c 96       	adiw	r24, 0x0c	; 12
    1c20:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	9c 01       	movw	r18, r24
    1c2a:	2e 5f       	subi	r18, 0xFE	; 254
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	88 e6       	ldi	r24, 0x68	; 104
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	b9 01       	movw	r22, r18
    1c34:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1c38:	80 91 10 03 	lds	r24, 0x0310
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	80 93 10 03 	sts	0x0310, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1c42:	80 91 1b 03 	lds	r24, 0x031B
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	80 93 1b 03 	sts	0x031B, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1c50:	80 91 16 03 	lds	r24, 0x0316
    1c54:	88 23       	and	r24, r24
    1c56:	31 f0       	breq	.+12     	; 0x1c64 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    1c60:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
			}
		}
	}
    1c64:	26 96       	adiw	r28, 0x06	; 6
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	28 97       	sbiw	r28, 0x08	; 8
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	78 87       	std	Y+8, r23	; 0x08
    1c90:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1c92:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1c94:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1c98:	ed 81       	ldd	r30, Y+5	; 0x05
    1c9a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c9c:	20 81       	ld	r18, Z
    1c9e:	31 81       	ldd	r19, Z+1	; 0x01
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	98 85       	ldd	r25, Y+8	; 0x08
    1ca4:	82 0f       	add	r24, r18
    1ca6:	93 1f       	adc	r25, r19
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    1cac:	ed 81       	ldd	r30, Y+5	; 0x05
    1cae:	fe 81       	ldd	r31, Y+6	; 0x06
    1cb0:	20 81       	ld	r18, Z
    1cb2:	31 81       	ldd	r19, Z+1	; 0x01
    1cb4:	80 91 12 03 	lds	r24, 0x0312
    1cb8:	90 91 13 03 	lds	r25, 0x0313
    1cbc:	82 17       	cp	r24, r18
    1cbe:	93 07       	cpc	r25, r19
    1cc0:	a8 f4       	brcc	.+42     	; 0x1cec <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1cc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1cc4:	fe 81       	ldd	r31, Y+6	; 0x06
    1cc6:	20 81       	ld	r18, Z
    1cc8:	31 81       	ldd	r19, Z+1	; 0x01
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	82 17       	cp	r24, r18
    1cd0:	93 07       	cpc	r25, r19
    1cd2:	00 f5       	brcc	.+64     	; 0x1d14 <vTaskDelayUntil+0x9e>
    1cd4:	20 91 12 03 	lds	r18, 0x0312
    1cd8:	30 91 13 03 	lds	r19, 0x0313
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	28 17       	cp	r18, r24
    1ce2:	39 07       	cpc	r19, r25
    1ce4:	b8 f4       	brcc	.+46     	; 0x1d14 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1cec:	ed 81       	ldd	r30, Y+5	; 0x05
    1cee:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf0:	20 81       	ld	r18, Z
    1cf2:	31 81       	ldd	r19, Z+1	; 0x01
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	82 17       	cp	r24, r18
    1cfa:	93 07       	cpc	r25, r19
    1cfc:	48 f0       	brcs	.+18     	; 0x1d10 <vTaskDelayUntil+0x9a>
    1cfe:	20 91 12 03 	lds	r18, 0x0312
    1d02:	30 91 13 03 	lds	r19, 0x0313
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	28 17       	cp	r18, r24
    1d0c:	39 07       	cpc	r19, r25
    1d0e:	10 f4       	brcc	.+4      	; 0x1d14 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1d14:	ed 81       	ldd	r30, Y+5	; 0x05
    1d16:	fe 81       	ldd	r31, Y+6	; 0x06
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	88 23       	and	r24, r24
    1d24:	59 f0       	breq	.+22     	; 0x1d3c <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d26:	80 91 0e 03 	lds	r24, 0x030E
    1d2a:	90 91 0f 03 	lds	r25, 0x030F
    1d2e:	02 96       	adiw	r24, 0x02	; 2
    1d30:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	0e 94 27 13 	call	0x264e	; 0x264e <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1d3c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
    1d40:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	88 23       	and	r24, r24
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    1d48:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
		}
	}
    1d4c:	28 96       	adiw	r28, 0x08	; 8
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <vTaskDelay+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <vTaskDelay+0x8>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	9d 83       	std	Y+5, r25	; 0x05
    1d6e:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1d70:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	d1 f0       	breq	.+52     	; 0x1dae <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    1d7a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1d7e:	20 91 12 03 	lds	r18, 0x0312
    1d82:	30 91 13 03 	lds	r19, 0x0313
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8a:	82 0f       	add	r24, r18
    1d8c:	93 1f       	adc	r25, r19
    1d8e:	9b 83       	std	Y+3, r25	; 0x03
    1d90:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d92:	80 91 0e 03 	lds	r24, 0x030E
    1d96:	90 91 0f 03 	lds	r25, 0x030F
    1d9a:	02 96       	adiw	r24, 0x02	; 2
    1d9c:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	0e 94 27 13 	call	0x264e	; 0x264e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1da8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>
    1dac:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	88 23       	and	r24, r24
    1db2:	11 f4       	brne	.+4      	; 0x1db8 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    1db4:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
		}
	}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1de0:	21 e7       	ldi	r18, 0x71	; 113
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	89 e4       	ldi	r24, 0x49	; 73
    1de6:	92 e1       	ldi	r25, 0x12	; 18
    1de8:	b9 01       	movw	r22, r18
    1dea:	45 e5       	ldi	r20, 0x55	; 85
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	00 e0       	ldi	r16, 0x00	; 0
    1df4:	ee 24       	eor	r14, r14
    1df6:	ff 24       	eor	r15, r15
    1df8:	cc 24       	eor	r12, r12
    1dfa:	dd 24       	eor	r13, r13
    1dfc:	aa 24       	eor	r10, r10
    1dfe:	bb 24       	eor	r11, r11
    1e00:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xTaskGenericCreate>
    1e04:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	51 f4       	brne	.+20     	; 0x1e20 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1e0c:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	80 93 16 03 	sts	0x0316, r24
		xTickCount = ( portTickType ) 0U;
    1e14:	10 92 13 03 	sts	0x0313, r1
    1e18:	10 92 12 03 	sts	0x0312, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1e1c:	0e 94 f4 06 	call	0xde8	; 0xde8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	df 90       	pop	r13
    1e2e:	cf 90       	pop	r12
    1e30:	bf 90       	pop	r11
    1e32:	af 90       	pop	r10
    1e34:	08 95       	ret

00001e36 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1e3e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1e40:	10 92 16 03 	sts	0x0316, r1
	vPortEndScheduler();
    1e44:	0e 94 29 07 	call	0xe52	; 0xe52 <vPortEndScheduler>
}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1e56:	80 91 17 03 	lds	r24, 0x0317
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	80 93 17 03 	sts	0x0317, r24
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <xTaskResumeAll+0x6>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <xTaskResumeAll+0x8>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1e72:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1e7a:	80 91 17 03 	lds	r24, 0x0317
    1e7e:	81 50       	subi	r24, 0x01	; 1
    1e80:	80 93 17 03 	sts	0x0317, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e84:	80 91 17 03 	lds	r24, 0x0317
    1e88:	88 23       	and	r24, r24
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <xTaskResumeAll+0x28>
    1e8c:	6a c0       	rjmp	.+212    	; 0x1f62 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1e8e:	80 91 11 03 	lds	r24, 0x0311
    1e92:	88 23       	and	r24, r24
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <xTaskResumeAll+0x32>
    1e96:	65 c0       	rjmp	.+202    	; 0x1f62 <xTaskResumeAll+0xfc>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1e98:	19 82       	std	Y+1, r1	; 0x01
    1e9a:	41 c0       	rjmp	.+130    	; 0x1f1e <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1e9c:	e0 91 64 03 	lds	r30, 0x0364
    1ea0:	f0 91 65 03 	lds	r31, 0x0365
    1ea4:	86 81       	ldd	r24, Z+6	; 0x06
    1ea6:	97 81       	ldd	r25, Z+7	; 0x07
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	0c 96       	adiw	r24, 0x0c	; 12
    1eb2:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	02 96       	adiw	r24, 0x02	; 2
    1ebc:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	96 89       	ldd	r25, Z+22	; 0x16
    1ec6:	80 91 15 03 	lds	r24, 0x0315
    1eca:	89 17       	cp	r24, r25
    1ecc:	28 f4       	brcc	.+10     	; 0x1ed8 <xTaskResumeAll+0x72>
    1ece:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed2:	86 89       	ldd	r24, Z+22	; 0x16
    1ed4:	80 93 15 03 	sts	0x0315, r24
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	86 89       	ldd	r24, Z+22	; 0x16
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	82 0f       	add	r24, r18
    1ef2:	93 1f       	adc	r25, r19
    1ef4:	84 5e       	subi	r24, 0xE4	; 228
    1ef6:	9c 4f       	sbci	r25, 0xFC	; 252
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	2e 5f       	subi	r18, 0xFE	; 254
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	b9 01       	movw	r22, r18
    1f02:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1f06:	eb 81       	ldd	r30, Y+3	; 0x03
    1f08:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0a:	96 89       	ldd	r25, Z+22	; 0x16
    1f0c:	e0 91 0e 03 	lds	r30, 0x030E
    1f10:	f0 91 0f 03 	lds	r31, 0x030F
    1f14:	86 89       	ldd	r24, Z+22	; 0x16
    1f16:	98 17       	cp	r25, r24
    1f18:	10 f0       	brcs	.+4      	; 0x1f1e <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1f1e:	80 91 5f 03 	lds	r24, 0x035F
    1f22:	88 23       	and	r24, r24
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <xTaskResumeAll+0xc2>
    1f26:	ba cf       	rjmp	.-140    	; 0x1e9c <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1f28:	80 91 18 03 	lds	r24, 0x0318
    1f2c:	88 23       	and	r24, r24
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <xTaskResumeAll+0xe2>
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    1f32:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskIncrementTick>
						--uxMissedTicks;
    1f36:	80 91 18 03 	lds	r24, 0x0318
    1f3a:	81 50       	subi	r24, 0x01	; 1
    1f3c:	80 93 18 03 	sts	0x0318, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1f40:	80 91 18 03 	lds	r24, 0x0318
    1f44:	88 23       	and	r24, r24
    1f46:	a9 f7       	brne	.-22     	; 0x1f32 <xTaskResumeAll+0xcc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	21 f0       	breq	.+8      	; 0x1f56 <xTaskResumeAll+0xf0>
    1f4e:	80 91 19 03 	lds	r24, 0x0319
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	31 f4       	brne	.+12     	; 0x1f62 <xTaskResumeAll+0xfc>
				{
					xAlreadyYielded = pdTRUE;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    1f5a:	10 92 19 03 	sts	0x0319, r1
					portYIELD_WITHIN_API();
    1f5e:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <xTaskGetTickCount+0x6>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1f86:	80 91 12 03 	lds	r24, 0x0312
    1f8a:	90 91 13 03 	lds	r25, 0x0313
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <xTaskGetTickCountFromISR+0x6>
    1faa:	0f 92       	push	r0
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1fb0:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    1fb2:	80 91 12 03 	lds	r24, 0x0312
    1fb6:	90 91 13 03 	lds	r25, 0x0313
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    1fd6:	80 91 11 03 	lds	r24, 0x0311
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <vTaskIncrementTick+0x6>
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <vTaskIncrementTick+0x8>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <vTaskIncrementTick+0xa>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1fee:	80 91 17 03 	lds	r24, 0x0317
    1ff2:	88 23       	and	r24, r24
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <vTaskIncrementTick+0x18>
    1ff6:	bb c0       	rjmp	.+374    	; 0x216e <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    1ff8:	80 91 12 03 	lds	r24, 0x0312
    1ffc:	90 91 13 03 	lds	r25, 0x0313
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	90 93 13 03 	sts	0x0313, r25
    2006:	80 93 12 03 	sts	0x0312, r24
		if( xTickCount == ( portTickType ) 0U )
    200a:	80 91 12 03 	lds	r24, 0x0312
    200e:	90 91 13 03 	lds	r25, 0x0313
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	d1 f5       	brne	.+116    	; 0x208a <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2016:	80 91 5b 03 	lds	r24, 0x035B
    201a:	90 91 5c 03 	lds	r25, 0x035C
    201e:	9c 83       	std	Y+4, r25	; 0x04
    2020:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2022:	80 91 5d 03 	lds	r24, 0x035D
    2026:	90 91 5e 03 	lds	r25, 0x035E
    202a:	90 93 5c 03 	sts	0x035C, r25
    202e:	80 93 5b 03 	sts	0x035B, r24
			pxOverflowDelayedTaskList = pxTemp;
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	90 93 5e 03 	sts	0x035E, r25
    203a:	80 93 5d 03 	sts	0x035D, r24
			xNumOfOverflows++;
    203e:	80 91 1a 03 	lds	r24, 0x031A
    2042:	8f 5f       	subi	r24, 0xFF	; 255
    2044:	80 93 1a 03 	sts	0x031A, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2048:	e0 91 5b 03 	lds	r30, 0x035B
    204c:	f0 91 5c 03 	lds	r31, 0x035C
    2050:	80 81       	ld	r24, Z
    2052:	88 23       	and	r24, r24
    2054:	39 f4       	brne	.+14     	; 0x2064 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	9f ef       	ldi	r25, 0xFF	; 255
    205a:	90 93 78 00 	sts	0x0078, r25
    205e:	80 93 77 00 	sts	0x0077, r24
    2062:	13 c0       	rjmp	.+38     	; 0x208a <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2064:	e0 91 5b 03 	lds	r30, 0x035B
    2068:	f0 91 5c 03 	lds	r31, 0x035C
    206c:	05 80       	ldd	r0, Z+5	; 0x05
    206e:	f6 81       	ldd	r31, Z+6	; 0x06
    2070:	e0 2d       	mov	r30, r0
    2072:	86 81       	ldd	r24, Z+6	; 0x06
    2074:	97 81       	ldd	r25, Z+7	; 0x07
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    207a:	ed 81       	ldd	r30, Y+5	; 0x05
    207c:	fe 81       	ldd	r31, Y+6	; 0x06
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	90 93 78 00 	sts	0x0078, r25
    2086:	80 93 77 00 	sts	0x0077, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    208a:	20 91 12 03 	lds	r18, 0x0312
    208e:	30 91 13 03 	lds	r19, 0x0313
    2092:	80 91 77 00 	lds	r24, 0x0077
    2096:	90 91 78 00 	lds	r25, 0x0078
    209a:	28 17       	cp	r18, r24
    209c:	39 07       	cpc	r19, r25
    209e:	08 f4       	brcc	.+2      	; 0x20a2 <vTaskIncrementTick+0xc2>
    20a0:	6b c0       	rjmp	.+214    	; 0x2178 <vTaskIncrementTick+0x198>
    20a2:	e0 91 5b 03 	lds	r30, 0x035B
    20a6:	f0 91 5c 03 	lds	r31, 0x035C
    20aa:	80 81       	ld	r24, Z
    20ac:	88 23       	and	r24, r24
    20ae:	39 f4       	brne	.+14     	; 0x20be <vTaskIncrementTick+0xde>
    20b0:	8f ef       	ldi	r24, 0xFF	; 255
    20b2:	9f ef       	ldi	r25, 0xFF	; 255
    20b4:	90 93 78 00 	sts	0x0078, r25
    20b8:	80 93 77 00 	sts	0x0077, r24
    20bc:	5d c0       	rjmp	.+186    	; 0x2178 <vTaskIncrementTick+0x198>
    20be:	e0 91 5b 03 	lds	r30, 0x035B
    20c2:	f0 91 5c 03 	lds	r31, 0x035C
    20c6:	05 80       	ldd	r0, Z+5	; 0x05
    20c8:	f6 81       	ldd	r31, Z+6	; 0x06
    20ca:	e0 2d       	mov	r30, r0
    20cc:	86 81       	ldd	r24, Z+6	; 0x06
    20ce:	97 81       	ldd	r25, Z+7	; 0x07
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	ed 81       	ldd	r30, Y+5	; 0x05
    20d6:	fe 81       	ldd	r31, Y+6	; 0x06
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	20 91 12 03 	lds	r18, 0x0312
    20e4:	30 91 13 03 	lds	r19, 0x0313
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	28 17       	cp	r18, r24
    20ee:	39 07       	cpc	r19, r25
    20f0:	38 f4       	brcc	.+14     	; 0x2100 <vTaskIncrementTick+0x120>
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	90 93 78 00 	sts	0x0078, r25
    20fa:	80 93 77 00 	sts	0x0077, r24
    20fe:	3c c0       	rjmp	.+120    	; 0x2178 <vTaskIncrementTick+0x198>
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	02 96       	adiw	r24, 0x02	; 2
    2106:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
    210a:	ed 81       	ldd	r30, Y+5	; 0x05
    210c:	fe 81       	ldd	r31, Y+6	; 0x06
    210e:	84 89       	ldd	r24, Z+20	; 0x14
    2110:	95 89       	ldd	r25, Z+21	; 0x15
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	29 f0       	breq	.+10     	; 0x2120 <vTaskIncrementTick+0x140>
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	0c 96       	adiw	r24, 0x0c	; 12
    211c:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
    2120:	ed 81       	ldd	r30, Y+5	; 0x05
    2122:	fe 81       	ldd	r31, Y+6	; 0x06
    2124:	96 89       	ldd	r25, Z+22	; 0x16
    2126:	80 91 15 03 	lds	r24, 0x0315
    212a:	89 17       	cp	r24, r25
    212c:	28 f4       	brcc	.+10     	; 0x2138 <vTaskIncrementTick+0x158>
    212e:	ed 81       	ldd	r30, Y+5	; 0x05
    2130:	fe 81       	ldd	r31, Y+6	; 0x06
    2132:	86 89       	ldd	r24, Z+22	; 0x16
    2134:	80 93 15 03 	sts	0x0315, r24
    2138:	ed 81       	ldd	r30, Y+5	; 0x05
    213a:	fe 81       	ldd	r31, Y+6	; 0x06
    213c:	86 89       	ldd	r24, Z+22	; 0x16
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	c9 01       	movw	r24, r18
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	82 0f       	add	r24, r18
    2152:	93 1f       	adc	r25, r19
    2154:	ac 01       	movw	r20, r24
    2156:	44 5e       	subi	r20, 0xE4	; 228
    2158:	5c 4f       	sbci	r21, 0xFC	; 252
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	9c 01       	movw	r18, r24
    2160:	2e 5f       	subi	r18, 0xFE	; 254
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	ca 01       	movw	r24, r20
    2166:	b9 01       	movw	r22, r18
    2168:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>
    216c:	9a cf       	rjmp	.-204    	; 0x20a2 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    216e:	80 91 18 03 	lds	r24, 0x0318
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	80 93 18 03 	sts	0x0318, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2178:	26 96       	adiw	r28, 0x06	; 6
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <vTaskSwitchContext+0x6>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2194:	80 91 17 03 	lds	r24, 0x0317
    2198:	88 23       	and	r24, r24
    219a:	49 f0       	breq	.+18     	; 0x21ae <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 19 03 	sts	0x0319, r24
    21a2:	54 c0       	rjmp	.+168    	; 0x224c <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    21a4:	80 91 15 03 	lds	r24, 0x0315
    21a8:	81 50       	subi	r24, 0x01	; 1
    21aa:	80 93 15 03 	sts	0x0315, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    21ae:	80 91 15 03 	lds	r24, 0x0315
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	c9 01       	movw	r24, r18
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	82 0f       	add	r24, r18
    21c6:	93 1f       	adc	r25, r19
    21c8:	fc 01       	movw	r30, r24
    21ca:	e4 5e       	subi	r30, 0xE4	; 228
    21cc:	fc 4f       	sbci	r31, 0xFC	; 252
    21ce:	80 81       	ld	r24, Z
    21d0:	88 23       	and	r24, r24
    21d2:	41 f3       	breq	.-48     	; 0x21a4 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    21d4:	80 91 15 03 	lds	r24, 0x0315
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	c9 01       	movw	r24, r18
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	82 0f       	add	r24, r18
    21ec:	93 1f       	adc	r25, r19
    21ee:	84 5e       	subi	r24, 0xE4	; 228
    21f0:	9c 4f       	sbci	r25, 0xFC	; 252
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	e9 81       	ldd	r30, Y+1	; 0x01
    21f8:	fa 81       	ldd	r31, Y+2	; 0x02
    21fa:	01 80       	ldd	r0, Z+1	; 0x01
    21fc:	f2 81       	ldd	r31, Z+2	; 0x02
    21fe:	e0 2d       	mov	r30, r0
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	e9 81       	ldd	r30, Y+1	; 0x01
    2206:	fa 81       	ldd	r31, Y+2	; 0x02
    2208:	92 83       	std	Z+2, r25	; 0x02
    220a:	81 83       	std	Z+1, r24	; 0x01
    220c:	e9 81       	ldd	r30, Y+1	; 0x01
    220e:	fa 81       	ldd	r31, Y+2	; 0x02
    2210:	21 81       	ldd	r18, Z+1	; 0x01
    2212:	32 81       	ldd	r19, Z+2	; 0x02
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	03 96       	adiw	r24, 0x03	; 3
    221a:	28 17       	cp	r18, r24
    221c:	39 07       	cpc	r19, r25
    221e:	59 f4       	brne	.+22     	; 0x2236 <vTaskSwitchContext+0xac>
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	01 80       	ldd	r0, Z+1	; 0x01
    2226:	f2 81       	ldd	r31, Z+2	; 0x02
    2228:	e0 2d       	mov	r30, r0
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	e9 81       	ldd	r30, Y+1	; 0x01
    2230:	fa 81       	ldd	r31, Y+2	; 0x02
    2232:	92 83       	std	Z+2, r25	; 0x02
    2234:	81 83       	std	Z+1, r24	; 0x01
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	01 80       	ldd	r0, Z+1	; 0x01
    223c:	f2 81       	ldd	r31, Z+2	; 0x02
    223e:	e0 2d       	mov	r30, r0
    2240:	86 81       	ldd	r24, Z+6	; 0x06
    2242:	97 81       	ldd	r25, Z+7	; 0x07
    2244:	90 93 0f 03 	sts	0x030F, r25
    2248:	80 93 0e 03 	sts	0x030E, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <vTaskPlaceOnEventList+0x6>
    225c:	00 d0       	rcall	.+0      	; 0x225e <vTaskPlaceOnEventList+0x8>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <vTaskPlaceOnEventList+0xa>
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	7e 83       	std	Y+6, r23	; 0x06
    226a:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    226c:	4b 81       	ldd	r20, Y+3	; 0x03
    226e:	5c 81       	ldd	r21, Y+4	; 0x04
    2270:	80 91 0e 03 	lds	r24, 0x030E
    2274:	90 91 0f 03 	lds	r25, 0x030F
    2278:	9c 01       	movw	r18, r24
    227a:	24 5f       	subi	r18, 0xF4	; 244
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	ca 01       	movw	r24, r20
    2280:	b9 01       	movw	r22, r18
    2282:	0e 94 bc 04 	call	0x978	; 0x978 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2286:	80 91 0e 03 	lds	r24, 0x030E
    228a:	90 91 0f 03 	lds	r25, 0x030F
    228e:	02 96       	adiw	r24, 0x02	; 2
    2290:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2294:	20 91 12 03 	lds	r18, 0x0312
    2298:	30 91 13 03 	lds	r19, 0x0313
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	0e 94 27 13 	call	0x264e	; 0x264e <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    22b0:	26 96       	adiw	r28, 0x06	; 6
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <xTaskRemoveFromEventList+0x6>
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <xTaskRemoveFromEventList+0x8>
    22ca:	0f 92       	push	r0
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9d 83       	std	Y+5, r25	; 0x05
    22d2:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    22d4:	ec 81       	ldd	r30, Y+4	; 0x04
    22d6:	fd 81       	ldd	r31, Y+5	; 0x05
    22d8:	05 80       	ldd	r0, Z+5	; 0x05
    22da:	f6 81       	ldd	r31, Z+6	; 0x06
    22dc:	e0 2d       	mov	r30, r0
    22de:	86 81       	ldd	r24, Z+6	; 0x06
    22e0:	97 81       	ldd	r25, Z+7	; 0x07
    22e2:	9b 83       	std	Y+3, r25	; 0x03
    22e4:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ea:	0c 96       	adiw	r24, 0x0c	; 12
    22ec:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    22f0:	80 91 17 03 	lds	r24, 0x0317
    22f4:	88 23       	and	r24, r24
    22f6:	61 f5       	brne	.+88     	; 0x2350 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	02 96       	adiw	r24, 0x02	; 2
    22fe:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2302:	ea 81       	ldd	r30, Y+2	; 0x02
    2304:	fb 81       	ldd	r31, Y+3	; 0x03
    2306:	96 89       	ldd	r25, Z+22	; 0x16
    2308:	80 91 15 03 	lds	r24, 0x0315
    230c:	89 17       	cp	r24, r25
    230e:	28 f4       	brcc	.+10     	; 0x231a <xTaskRemoveFromEventList+0x58>
    2310:	ea 81       	ldd	r30, Y+2	; 0x02
    2312:	fb 81       	ldd	r31, Y+3	; 0x03
    2314:	86 89       	ldd	r24, Z+22	; 0x16
    2316:	80 93 15 03 	sts	0x0315, r24
    231a:	ea 81       	ldd	r30, Y+2	; 0x02
    231c:	fb 81       	ldd	r31, Y+3	; 0x03
    231e:	86 89       	ldd	r24, Z+22	; 0x16
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	c9 01       	movw	r24, r18
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	ac 01       	movw	r20, r24
    2338:	44 5e       	subi	r20, 0xE4	; 228
    233a:	5c 4f       	sbci	r21, 0xFC	; 252
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	9c 01       	movw	r18, r24
    2342:	2e 5f       	subi	r18, 0xFE	; 254
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	ca 01       	movw	r24, r20
    2348:	b9 01       	movw	r22, r18
    234a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>
    234e:	0a c0       	rjmp	.+20     	; 0x2364 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	9c 01       	movw	r18, r24
    2356:	24 5f       	subi	r18, 0xF4	; 244
    2358:	3f 4f       	sbci	r19, 0xFF	; 255
    235a:	8f e5       	ldi	r24, 0x5F	; 95
    235c:	93 e0       	ldi	r25, 0x03	; 3
    235e:	b9 01       	movw	r22, r18
    2360:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2364:	ea 81       	ldd	r30, Y+2	; 0x02
    2366:	fb 81       	ldd	r31, Y+3	; 0x03
    2368:	96 89       	ldd	r25, Z+22	; 0x16
    236a:	e0 91 0e 03 	lds	r30, 0x030E
    236e:	f0 91 0f 03 	lds	r31, 0x030F
    2372:	86 89       	ldd	r24, Z+22	; 0x16
    2374:	98 17       	cp	r25, r24
    2376:	18 f0       	brcs	.+6      	; 0x237e <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    237e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	00 d0       	rcall	.+0      	; 0x2398 <vTaskSetTimeOutState+0x6>
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    23a0:	80 91 1a 03 	lds	r24, 0x031A
    23a4:	e9 81       	ldd	r30, Y+1	; 0x01
    23a6:	fa 81       	ldd	r31, Y+2	; 0x02
    23a8:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    23aa:	80 91 12 03 	lds	r24, 0x0312
    23ae:	90 91 13 03 	lds	r25, 0x0313
    23b2:	e9 81       	ldd	r30, Y+1	; 0x01
    23b4:	fa 81       	ldd	r31, Y+2	; 0x02
    23b6:	92 83       	std	Z+2, r25	; 0x02
    23b8:	81 83       	std	Z+1, r24	; 0x01
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <xTaskCheckForTimeOut+0x6>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <xTaskCheckForTimeOut+0x8>
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9b 83       	std	Y+3, r25	; 0x03
    23d4:	8a 83       	std	Y+2, r24	; 0x02
    23d6:	7d 83       	std	Y+5, r23	; 0x05
    23d8:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    23e0:	ea 81       	ldd	r30, Y+2	; 0x02
    23e2:	fb 81       	ldd	r31, Y+3	; 0x03
    23e4:	90 81       	ld	r25, Z
    23e6:	80 91 1a 03 	lds	r24, 0x031A
    23ea:	98 17       	cp	r25, r24
    23ec:	71 f0       	breq	.+28     	; 0x240a <xTaskCheckForTimeOut+0x46>
    23ee:	ea 81       	ldd	r30, Y+2	; 0x02
    23f0:	fb 81       	ldd	r31, Y+3	; 0x03
    23f2:	21 81       	ldd	r18, Z+1	; 0x01
    23f4:	32 81       	ldd	r19, Z+2	; 0x02
    23f6:	80 91 12 03 	lds	r24, 0x0312
    23fa:	90 91 13 03 	lds	r25, 0x0313
    23fe:	82 17       	cp	r24, r18
    2400:	93 07       	cpc	r25, r19
    2402:	18 f0       	brcs	.+6      	; 0x240a <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	2f c0       	rjmp	.+94     	; 0x2468 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    240a:	20 91 12 03 	lds	r18, 0x0312
    240e:	30 91 13 03 	lds	r19, 0x0313
    2412:	ea 81       	ldd	r30, Y+2	; 0x02
    2414:	fb 81       	ldd	r31, Y+3	; 0x03
    2416:	81 81       	ldd	r24, Z+1	; 0x01
    2418:	92 81       	ldd	r25, Z+2	; 0x02
    241a:	28 1b       	sub	r18, r24
    241c:	39 0b       	sbc	r19, r25
    241e:	ec 81       	ldd	r30, Y+4	; 0x04
    2420:	fd 81       	ldd	r31, Y+5	; 0x05
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	28 17       	cp	r18, r24
    2428:	39 07       	cpc	r19, r25
    242a:	e0 f4       	brcc	.+56     	; 0x2464 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    242c:	ec 81       	ldd	r30, Y+4	; 0x04
    242e:	fd 81       	ldd	r31, Y+5	; 0x05
    2430:	40 81       	ld	r20, Z
    2432:	51 81       	ldd	r21, Z+1	; 0x01
    2434:	ea 81       	ldd	r30, Y+2	; 0x02
    2436:	fb 81       	ldd	r31, Y+3	; 0x03
    2438:	21 81       	ldd	r18, Z+1	; 0x01
    243a:	32 81       	ldd	r19, Z+2	; 0x02
    243c:	80 91 12 03 	lds	r24, 0x0312
    2440:	90 91 13 03 	lds	r25, 0x0313
    2444:	b9 01       	movw	r22, r18
    2446:	68 1b       	sub	r22, r24
    2448:	79 0b       	sbc	r23, r25
    244a:	cb 01       	movw	r24, r22
    244c:	84 0f       	add	r24, r20
    244e:	95 1f       	adc	r25, r21
    2450:	ec 81       	ldd	r30, Y+4	; 0x04
    2452:	fd 81       	ldd	r31, Y+5	; 0x05
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	9b 81       	ldd	r25, Y+3	; 0x03
    245c:	0e 94 c9 11 	call	0x2392	; 0x2392 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2460:	19 82       	std	Y+1, r1	; 0x01
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2468:	0f 90       	pop	r0
    246a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
}
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 19 03 	sts	0x0319, r24
}
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	00 d0       	rcall	.+0      	; 0x2498 <prvIdleTask+0x6>
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    24a0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    24a4:	0e 94 30 07 	call	0xe60	; 0xe60 <vPortYield>
    24a8:	fb cf       	rjmp	.-10     	; 0x24a0 <prvIdleTask+0xe>

000024aa <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	29 97       	sbiw	r28, 0x09	; 9
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	7c 83       	std	Y+4, r23	; 0x04
    24c8:	6b 83       	std	Y+3, r22	; 0x03
    24ca:	4d 83       	std	Y+5, r20	; 0x05
    24cc:	3f 83       	std	Y+7, r19	; 0x07
    24ce:	2e 83       	std	Y+6, r18	; 0x06
    24d0:	19 87       	std	Y+9, r17	; 0x09
    24d2:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	49 96       	adiw	r24, 0x19	; 25
    24da:	2b 81       	ldd	r18, Y+3	; 0x03
    24dc:	3c 81       	ldd	r19, Y+4	; 0x04
    24de:	b9 01       	movw	r22, r18
    24e0:	48 e0       	ldi	r20, 0x08	; 8
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	0e 94 e6 13 	call	0x27cc	; 0x27cc <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    24e8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ea:	fa 81       	ldd	r31, Y+2	; 0x02
    24ec:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	85 30       	cpi	r24, 0x05	; 5
    24f2:	10 f0       	brcs	.+4      	; 0x24f8 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	02 96       	adiw	r24, 0x02	; 2
    2506:	0e 94 60 04 	call	0x8c0	; 0x8c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	0c 96       	adiw	r24, 0x0c	; 12
    2510:	0e 94 60 04 	call	0x8c0	; 0x8c0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	91 87       	std	Z+9, r25	; 0x09
    251e:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	85 e0       	ldi	r24, 0x05	; 5
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	82 1b       	sub	r24, r18
    252c:	93 0b       	sbc	r25, r19
    252e:	e9 81       	ldd	r30, Y+1	; 0x01
    2530:	fa 81       	ldd	r31, Y+2	; 0x02
    2532:	95 87       	std	Z+13, r25	; 0x0d
    2534:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2536:	e9 81       	ldd	r30, Y+1	; 0x01
    2538:	fa 81       	ldd	r31, Y+2	; 0x02
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	93 8b       	std	Z+19, r25	; 0x13
    2540:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2542:	29 96       	adiw	r28, 0x09	; 9
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	08 95       	ret

00002558 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2562:	19 82       	std	Y+1, r1	; 0x01
    2564:	13 c0       	rjmp	.+38     	; 0x258c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	c9 01       	movw	r24, r18
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	82 0f       	add	r24, r18
    257c:	93 1f       	adc	r25, r19
    257e:	84 5e       	subi	r24, 0xE4	; 228
    2580:	9c 4f       	sbci	r25, 0xFC	; 252
    2582:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	85 30       	cpi	r24, 0x05	; 5
    2590:	50 f3       	brcs	.-44     	; 0x2566 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2592:	89 e4       	ldi	r24, 0x49	; 73
    2594:	93 e0       	ldi	r25, 0x03	; 3
    2596:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    259a:	82 e5       	ldi	r24, 0x52	; 82
    259c:	93 e0       	ldi	r25, 0x03	; 3
    259e:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    25a2:	8f e5       	ldi	r24, 0x5F	; 95
    25a4:	93 e0       	ldi	r25, 0x03	; 3
    25a6:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    25aa:	88 e6       	ldi	r24, 0x68	; 104
    25ac:	93 e0       	ldi	r25, 0x03	; 3
    25ae:	0e 94 36 04 	call	0x86c	; 0x86c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    25b2:	89 e4       	ldi	r24, 0x49	; 73
    25b4:	93 e0       	ldi	r25, 0x03	; 3
    25b6:	90 93 5c 03 	sts	0x035C, r25
    25ba:	80 93 5b 03 	sts	0x035B, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    25be:	82 e5       	ldi	r24, 0x52	; 82
    25c0:	93 e0       	ldi	r25, 0x03	; 3
    25c2:	90 93 5e 03 	sts	0x035E, r25
    25c6:	80 93 5d 03 	sts	0x035D, r24
}
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <prvCheckTasksWaitingTermination+0x6>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    25de:	80 91 10 03 	lds	r24, 0x0310
    25e2:	88 23       	and	r24, r24
    25e4:	71 f1       	breq	.+92     	; 0x2642 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    25e6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    25ea:	80 91 68 03 	lds	r24, 0x0368
    25ee:	1b 82       	std	Y+3, r1	; 0x03
    25f0:	88 23       	and	r24, r24
    25f2:	11 f4       	brne	.+4      	; 0x25f8 <prvCheckTasksWaitingTermination+0x26>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    25f8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	88 23       	and	r24, r24
    2600:	01 f5       	brne	.+64     	; 0x2642 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2608:	e0 91 6d 03 	lds	r30, 0x036D
    260c:	f0 91 6e 03 	lds	r31, 0x036E
    2610:	86 81       	ldd	r24, Z+6	; 0x06
    2612:	97 81       	ldd	r25, Z+7	; 0x07
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	02 96       	adiw	r24, 0x02	; 2
    261e:	0e 94 28 05 	call	0xa50	; 0xa50 <vListRemove>
					--uxCurrentNumberOfTasks;
    2622:	80 91 11 03 	lds	r24, 0x0311
    2626:	81 50       	subi	r24, 0x01	; 1
    2628:	80 93 11 03 	sts	0x0311, r24
					--uxTasksDeleted;
    262c:	80 91 10 03 	lds	r24, 0x0310
    2630:	81 50       	subi	r24, 0x01	; 1
    2632:	80 93 10 03 	sts	0x0310, r24
				}
				taskEXIT_CRITICAL();
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	0e 94 c0 13 	call	0x2780	; 0x2780 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <prvAddCurrentTaskToDelayedList+0x6>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    265c:	e0 91 0e 03 	lds	r30, 0x030E
    2660:	f0 91 0f 03 	lds	r31, 0x030F
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	93 83       	std	Z+3, r25	; 0x03
    266a:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    266c:	20 91 12 03 	lds	r18, 0x0312
    2670:	30 91 13 03 	lds	r19, 0x0313
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	82 17       	cp	r24, r18
    267a:	93 07       	cpc	r25, r19
    267c:	70 f4       	brcc	.+28     	; 0x269a <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    267e:	80 91 5d 03 	lds	r24, 0x035D
    2682:	90 91 5e 03 	lds	r25, 0x035E
    2686:	20 91 0e 03 	lds	r18, 0x030E
    268a:	30 91 0f 03 	lds	r19, 0x030F
    268e:	2e 5f       	subi	r18, 0xFE	; 254
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	b9 01       	movw	r22, r18
    2694:	0e 94 bc 04 	call	0x978	; 0x978 <vListInsert>
    2698:	1e c0       	rjmp	.+60     	; 0x26d6 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    269a:	40 91 5b 03 	lds	r20, 0x035B
    269e:	50 91 5c 03 	lds	r21, 0x035C
    26a2:	80 91 0e 03 	lds	r24, 0x030E
    26a6:	90 91 0f 03 	lds	r25, 0x030F
    26aa:	9c 01       	movw	r18, r24
    26ac:	2e 5f       	subi	r18, 0xFE	; 254
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	ca 01       	movw	r24, r20
    26b2:	b9 01       	movw	r22, r18
    26b4:	0e 94 bc 04 	call	0x978	; 0x978 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    26b8:	20 91 77 00 	lds	r18, 0x0077
    26bc:	30 91 78 00 	lds	r19, 0x0078
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	9a 81       	ldd	r25, Y+2	; 0x02
    26c4:	82 17       	cp	r24, r18
    26c6:	93 07       	cpc	r25, r19
    26c8:	30 f4       	brcc	.+12     	; 0x26d6 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	90 93 78 00 	sts	0x0078, r25
    26d2:	80 93 77 00 	sts	0x0077, r24
		}
	}
}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	28 97       	sbiw	r28, 0x08	; 8
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
    26f8:	7e 83       	std	Y+6, r23	; 0x06
    26fa:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    26fc:	81 e2       	ldi	r24, 0x21	; 33
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 ca 03 	call	0x794	; 0x794 <pvPortMalloc>
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f1       	breq	.+90     	; 0x276a <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	39 f4       	brne	.+14     	; 0x2726 <prvAllocateTCBAndStack+0x46>
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	0e 94 ca 03 	call	0x794	; 0x794 <pvPortMalloc>
    2720:	98 87       	std	Y+8, r25	; 0x08
    2722:	8f 83       	std	Y+7, r24	; 0x07
    2724:	04 c0       	rjmp	.+8      	; 0x272e <prvAllocateTCBAndStack+0x4e>
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	98 87       	std	Y+8, r25	; 0x08
    272c:	8f 83       	std	Y+7, r24	; 0x07
    272e:	e9 81       	ldd	r30, Y+1	; 0x01
    2730:	fa 81       	ldd	r31, Y+2	; 0x02
    2732:	8f 81       	ldd	r24, Y+7	; 0x07
    2734:	98 85       	ldd	r25, Y+8	; 0x08
    2736:	90 8f       	std	Z+24, r25	; 0x18
    2738:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    273a:	e9 81       	ldd	r30, Y+1	; 0x01
    273c:	fa 81       	ldd	r31, Y+2	; 0x02
    273e:	87 89       	ldd	r24, Z+23	; 0x17
    2740:	90 8d       	ldd	r25, Z+24	; 0x18
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	39 f4       	brne	.+14     	; 0x2754 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
			pxNewTCB = NULL;
    274e:	1a 82       	std	Y+2, r1	; 0x02
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	0b c0       	rjmp	.+22     	; 0x276a <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2754:	e9 81       	ldd	r30, Y+1	; 0x01
    2756:	fa 81       	ldd	r31, Y+2	; 0x02
    2758:	87 89       	ldd	r24, Z+23	; 0x17
    275a:	90 8d       	ldd	r25, Z+24	; 0x18
    275c:	2b 81       	ldd	r18, Y+3	; 0x03
    275e:	3c 81       	ldd	r19, Y+4	; 0x04
    2760:	65 ea       	ldi	r22, 0xA5	; 165
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	a9 01       	movw	r20, r18
    2766:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
		}
	}

	return pxNewTCB;
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    276e:	28 96       	adiw	r28, 0x08	; 8
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <prvDeleteTCB+0x6>
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    278e:	e9 81       	ldd	r30, Y+1	; 0x01
    2790:	fa 81       	ldd	r31, Y+2	; 0x02
    2792:	87 89       	ldd	r24, Z+23	; 0x17
    2794:	90 8d       	ldd	r25, Z+24	; 0x18
    2796:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
		vPortFree( pxTCB );
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	0e 94 10 04 	call	0x820	; 0x820 <vPortFree>
	}
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <memcpy>:
    27ac:	fb 01       	movw	r30, r22
    27ae:	dc 01       	movw	r26, r24
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <memcpy+0xa>
    27b2:	01 90       	ld	r0, Z+
    27b4:	0d 92       	st	X+, r0
    27b6:	41 50       	subi	r20, 0x01	; 1
    27b8:	50 40       	sbci	r21, 0x00	; 0
    27ba:	d8 f7       	brcc	.-10     	; 0x27b2 <memcpy+0x6>
    27bc:	08 95       	ret

000027be <memset>:
    27be:	dc 01       	movw	r26, r24
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <memset+0x6>
    27c2:	6d 93       	st	X+, r22
    27c4:	41 50       	subi	r20, 0x01	; 1
    27c6:	50 40       	sbci	r21, 0x00	; 0
    27c8:	e0 f7       	brcc	.-8      	; 0x27c2 <memset+0x4>
    27ca:	08 95       	ret

000027cc <strncpy>:
    27cc:	fb 01       	movw	r30, r22
    27ce:	dc 01       	movw	r26, r24
    27d0:	41 50       	subi	r20, 0x01	; 1
    27d2:	50 40       	sbci	r21, 0x00	; 0
    27d4:	48 f0       	brcs	.+18     	; 0x27e8 <strncpy+0x1c>
    27d6:	01 90       	ld	r0, Z+
    27d8:	0d 92       	st	X+, r0
    27da:	00 20       	and	r0, r0
    27dc:	c9 f7       	brne	.-14     	; 0x27d0 <strncpy+0x4>
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <strncpy+0x16>
    27e0:	1d 92       	st	X+, r1
    27e2:	41 50       	subi	r20, 0x01	; 1
    27e4:	50 40       	sbci	r21, 0x00	; 0
    27e6:	e0 f7       	brcc	.-8      	; 0x27e0 <strncpy+0x14>
    27e8:	08 95       	ret

000027ea <_exit>:
    27ea:	f8 94       	cli

000027ec <__stop_program>:
    27ec:	ff cf       	rjmp	.-2      	; 0x27ec <__stop_program>
