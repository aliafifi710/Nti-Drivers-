
RTOS_Task7_TryDisableScheduling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002820  000028b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f8  0080007a  0080007a  000028ce  2**0
                  ALLOC
  3 .stab         00004668  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b3c  00000000  00000000  00006f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	df 93       	push	r29
      a2:	cf 93       	push	r28
      a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x14>
      a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x16>
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	1a 82       	std	Y+2, r1	; 0x02
      ae:	19 82       	std	Y+1, r1	; 0x01
      b0:	20 e6       	ldi	r18, 0x60	; 96
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	86 ea       	ldi	r24, 0xA6	; 166
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	b9 01       	movw	r22, r18
      ba:	45 e5       	ldi	r20, 0x55	; 85
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	01 e0       	ldi	r16, 0x01	; 1
      c4:	fe 01       	movw	r30, r28
      c6:	31 96       	adiw	r30, 0x01	; 1
      c8:	7f 01       	movw	r14, r30
      ca:	cc 24       	eor	r12, r12
      cc:	dd 24       	eor	r13, r13
      ce:	aa 24       	eor	r10, r10
      d0:	bb 24       	eor	r11, r11
      d2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <xTaskGenericCreate>
      d6:	1c 82       	std	Y+4, r1	; 0x04
      d8:	1b 82       	std	Y+3, r1	; 0x03
      da:	2c e6       	ldi	r18, 0x6C	; 108
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	8a ee       	ldi	r24, 0xEA	; 234
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fe 01       	movw	r30, r28
      e4:	33 96       	adiw	r30, 0x03	; 3
      e6:	b9 01       	movw	r22, r18
      e8:	45 e5       	ldi	r20, 0x55	; 85
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	02 e0       	ldi	r16, 0x02	; 2
      f2:	7f 01       	movw	r14, r30
      f4:	cc 24       	eor	r12, r12
      f6:	dd 24       	eor	r13, r13
      f8:	aa 24       	eor	r10, r10
      fa:	bb 24       	eor	r11, r11
      fc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <xTaskGenericCreate>
     100:	0e 94 94 00 	call	0x128	; 0x128 <init>
     104:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vTaskStartScheduler>
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	0f 91       	pop	r16
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	08 95       	ret

00000128 <init>:

	/*Never Enter Here */
	return 0;
}

void init(void){
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62

	DDRB = 0xFF;
     130:	e7 e3       	ldi	r30, 0x37	; 55
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	8f ef       	ldi	r24, 0xFF	; 255
     136:	80 83       	st	Z, r24

	DDRC = 0x00;
     138:	e4 e3       	ldi	r30, 0x34	; 52
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	10 82       	st	Z, r1

	PORTC = 0xFF;
     13e:	e5 e3       	ldi	r30, 0x35	; 53
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	80 83       	st	Z, r24

}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <PushButton>:
 void PushButton(void * pvparam){
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	00 d0       	rcall	.+0      	; 0x152 <PushButton+0x6>
     152:	00 d0       	rcall	.+0      	; 0x154 <PushButton+0x8>
     154:	00 d0       	rcall	.+0      	; 0x156 <PushButton+0xa>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9e 83       	std	Y+6, r25	; 0x06
     15c:	8d 83       	std	Y+5, r24	; 0x05
	 portTickType Freq = 250;
     15e:	8a ef       	ldi	r24, 0xFA	; 250
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     166:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <xTaskGetTickCount>
     16a:	9c 83       	std	Y+4, r25	; 0x04
     16c:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */
		 if ((PINC & 0x01) == 0){
     16e:	e3 e3       	ldi	r30, 0x33	; 51
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	90 70       	andi	r25, 0x00	; 0
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	11 f5       	brne	.+68     	; 0x1c4 <PushButton+0x78>
			 SREG = 0;
     180:	ef e5       	ldi	r30, 0x5F	; 95
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	10 82       	st	Z, r1
			 /* If the Resource No One is Using so Stop Scheduling to Use it **/
			 if(ButtonStateFlag == 0){
     186:	80 91 7a 00 	lds	r24, 0x007A
     18a:	88 23       	and	r24, r24
     18c:	99 f4       	brne	.+38     	; 0x1b4 <PushButton+0x68>
				 /**Disable Global Interrupt*/


				 /*Raise the Flag */
				 ButtonStateFlag = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 7a 00 	sts	0x007A, r24

				 #if (FrogetGlobalInterrupt == 0)
				 /**Enable Global Interrupt*/
				  SREG = 128;
     194:	ef e5       	ldi	r30, 0x5F	; 95
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 e8       	ldi	r24, 0x80	; 128
     19a:	80 83       	st	Z, r24
				#endif

				 /*Change the State **/
				 ButtonState = 0;
     19c:	10 92 76 00 	sts	0x0076, r1


				 /**Disable Global Interrupt*/
				 SREG = 0;
     1a0:	ef e5       	ldi	r30, 0x5F	; 95
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	10 82       	st	Z, r1

				 /*Release the Flag */
				 ButtonStateFlag = 0;
     1a6:	10 92 7a 00 	sts	0x007A, r1
				#if (FrogetGlobalInterrupt == 0)
				 /**Enable Global Interrupt*/
				 SREG = 128;
     1aa:	ef e5       	ldi	r30, 0x5F	; 95
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 e8       	ldi	r24, 0x80	; 128
     1b0:	80 83       	st	Z, r24
     1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <PushButton+0x78>
				#endif
			 }
			 /*Else Delay 10 Tick till the Resource is Free **/
			 else {
				 vTaskDelay(10);
     1b4:	8a e0       	ldi	r24, 0x0A	; 10
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <vTaskDelay>
				 SREG = 128;
     1bc:	ef e5       	ldi	r30, 0x5F	; 95
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 e8       	ldi	r24, 0x80	; 128
     1c2:	80 83       	st	Z, r24
			 }

		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
     1c4:	ce 01       	movw	r24, r28
     1c6:	03 96       	adiw	r24, 0x03	; 3
     1c8:	29 81       	ldd	r18, Y+1	; 0x01
     1ca:	3a 81       	ldd	r19, Y+2	; 0x02
     1cc:	b9 01       	movw	r22, r18
     1ce:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <vTaskDelayUntil>
     1d2:	cd cf       	rjmp	.-102    	; 0x16e <PushButton+0x22>

000001d4 <Led>:
	 }

 }


 void Led(void * pvparam){
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	00 d0       	rcall	.+0      	; 0x1da <Led+0x6>
     1da:	00 d0       	rcall	.+0      	; 0x1dc <Led+0x8>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Led+0xa>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9e 83       	std	Y+6, r25	; 0x06
     1e4:	8d 83       	std	Y+5, r24	; 0x05
	 portTickType Freq = 100;
     1e6:	84 e6       	ldi	r24, 0x64	; 100
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	9a 83       	std	Y+2, r25	; 0x02
     1ec:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     1ee:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <xTaskGetTickCount>
     1f2:	9c 83       	std	Y+4, r25	; 0x04
     1f4:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */

		 SREG = 0 ;
     1f6:	ef e5       	ldi	r30, 0x5F	; 95
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
		 /* If the Resource No One is Using so Raise a Flag to Use it **/
		 if(ButtonStateFlag == 0){
     1fc:	80 91 7a 00 	lds	r24, 0x007A
     200:	88 23       	and	r24, r24
     202:	01 f5       	brne	.+64     	; 0x244 <Led+0x70>
			 /**Disable Global Interrupt*/


			 /*Raise the Flag */
			 ButtonStateFlag = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 7a 00 	sts	0x007A, r24

			#if (FrogetGlobalInterrupt == 0)
			 /**Enable Global Interrupt*/
			 SREG = 128;
     20a:	ef e5       	ldi	r30, 0x5F	; 95
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
			#endif

			 if (ButtonState == 0){
     212:	80 91 76 00 	lds	r24, 0x0076
     216:	88 23       	and	r24, r24
     218:	59 f4       	brne	.+22     	; 0x230 <Led+0x5c>
				 PORTB ^= 0x01;
     21a:	a8 e3       	ldi	r26, 0x38	; 56
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	e8 e3       	ldi	r30, 0x38	; 56
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	90 81       	ld	r25, Z
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	89 27       	eor	r24, r25
     228:	8c 93       	st	X, r24
				 ButtonState = 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	80 93 76 00 	sts	0x0076, r24
			 }

			 /**Disable Global Interrupt*/
			 SREG = 0;
     230:	ef e5       	ldi	r30, 0x5F	; 95
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	10 82       	st	Z, r1

			 /*Release the Flag */
			 ButtonStateFlag = 0;
     236:	10 92 7a 00 	sts	0x007A, r1

			#if (FrogetGlobalInterrupt == 0)
			 /**Disable Global Interrupt*/
			 SREG = 128;
     23a:	ef e5       	ldi	r30, 0x5F	; 95
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	80 83       	st	Z, r24
     242:	08 c0       	rjmp	.+16     	; 0x254 <Led+0x80>
			#endif
		 }
		 /*Else Delay 10 Tick till the Resource is Free **/
		 else {
			 vTaskDelay(10);
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <vTaskDelay>
			 SREG = 128;
     24c:	ef e5       	ldi	r30, 0x5F	; 95
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 e8       	ldi	r24, 0x80	; 128
     252:	80 83       	st	Z, r24
		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
     254:	ce 01       	movw	r24, r28
     256:	03 96       	adiw	r24, 0x03	; 3
     258:	29 81       	ldd	r18, Y+1	; 0x01
     25a:	3a 81       	ldd	r19, Y+2	; 0x02
     25c:	b9 01       	movw	r22, r18
     25e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <vTaskDelayUntil>
     262:	c9 cf       	rjmp	.-110    	; 0x1f6 <Led+0x22>

00000264 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	27 97       	sbiw	r28, 0x07	; 7
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	9d 83       	std	Y+5, r25	; 0x05
     27a:	8c 83       	std	Y+4, r24	; 0x04
     27c:	6e 83       	std	Y+6, r22	; 0x06
     27e:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     280:	8a e1       	ldi	r24, 0x1A	; 26
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 0a 04 	call	0x814	; 0x814 <pvPortMalloc>
     288:	9a 83       	std	Y+2, r25	; 0x02
     28a:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	9a 81       	ldd	r25, Y+2	; 0x02
     290:	00 97       	sbiw	r24, 0x00	; 0
     292:	09 f4       	brne	.+2      	; 0x296 <xCoRoutineCreate+0x32>
     294:	6f c0       	rjmp	.+222    	; 0x374 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     296:	80 91 7b 00 	lds	r24, 0x007B
     29a:	90 91 7c 00 	lds	r25, 0x007C
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	41 f4       	brne	.+16     	; 0x2b2 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	90 93 7c 00 	sts	0x007C, r25
     2aa:	80 93 7b 00 	sts	0x007B, r24
			prvInitialiseCoRoutineLists();
     2ae:	0e 94 99 03 	call	0x732	; 0x732 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	10 f0       	brcs	.+4      	; 0x2bc <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2bc:	e9 81       	ldd	r30, Y+1	; 0x01
     2be:	fa 81       	ldd	r31, Y+2	; 0x02
     2c0:	11 8e       	std	Z+25, r1	; 0x19
     2c2:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     2c4:	e9 81       	ldd	r30, Y+1	; 0x01
     2c6:	fa 81       	ldd	r31, Y+2	; 0x02
     2c8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ca:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     2cc:	e9 81       	ldd	r30, Y+1	; 0x01
     2ce:	fa 81       	ldd	r31, Y+2	; 0x02
     2d0:	8f 81       	ldd	r24, Y+7	; 0x07
     2d2:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     2d4:	e9 81       	ldd	r30, Y+1	; 0x01
     2d6:	fa 81       	ldd	r31, Y+2	; 0x02
     2d8:	8c 81       	ldd	r24, Y+4	; 0x04
     2da:	9d 81       	ldd	r25, Y+5	; 0x05
     2dc:	91 83       	std	Z+1, r25	; 0x01
     2de:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	9a 81       	ldd	r25, Y+2	; 0x02
     2e4:	02 96       	adiw	r24, 0x02	; 2
     2e6:	0e 94 a0 04 	call	0x940	; 0x940 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	0c 96       	adiw	r24, 0x0c	; 12
     2f0:	0e 94 a0 04 	call	0x940	; 0x940 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	91 87       	std	Z+9, r25	; 0x09
     2fe:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     300:	e9 81       	ldd	r30, Y+1	; 0x01
     302:	fa 81       	ldd	r31, Y+2	; 0x02
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	93 8b       	std	Z+19, r25	; 0x13
     30a:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     30c:	8e 81       	ldd	r24, Y+6	; 0x06
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	85 e0       	ldi	r24, 0x05	; 5
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	82 1b       	sub	r24, r18
     318:	93 0b       	sbc	r25, r19
     31a:	e9 81       	ldd	r30, Y+1	; 0x01
     31c:	fa 81       	ldd	r31, Y+2	; 0x02
     31e:	95 87       	std	Z+13, r25	; 0x0d
     320:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     322:	e9 81       	ldd	r30, Y+1	; 0x01
     324:	fa 81       	ldd	r31, Y+2	; 0x02
     326:	96 89       	ldd	r25, Z+22	; 0x16
     328:	80 91 7d 00 	lds	r24, 0x007D
     32c:	89 17       	cp	r24, r25
     32e:	28 f4       	brcc	.+10     	; 0x33a <xCoRoutineCreate+0xd6>
     330:	e9 81       	ldd	r30, Y+1	; 0x01
     332:	fa 81       	ldd	r31, Y+2	; 0x02
     334:	86 89       	ldd	r24, Z+22	; 0x16
     336:	80 93 7d 00 	sts	0x007D, r24
     33a:	e9 81       	ldd	r30, Y+1	; 0x01
     33c:	fa 81       	ldd	r31, Y+2	; 0x02
     33e:	86 89       	ldd	r24, Z+22	; 0x16
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	c9 01       	movw	r24, r18
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	82 0f       	add	r24, r18
     354:	93 1f       	adc	r25, r19
     356:	ac 01       	movw	r20, r24
     358:	4c 57       	subi	r20, 0x7C	; 124
     35a:	5f 4f       	sbci	r21, 0xFF	; 255
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	9c 01       	movw	r18, r24
     362:	2e 5f       	subi	r18, 0xFE	; 254
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	ca 01       	movw	r24, r20
     368:	b9 01       	movw	r22, r18
     36a:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>

		xReturn = pdPASS;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	8b 83       	std	Y+3, r24	; 0x03
     372:	02 c0       	rjmp	.+4      	; 0x378 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     378:	8b 81       	ldd	r24, Y+3	; 0x03
}
     37a:	27 96       	adiw	r28, 0x07	; 7
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	00 d0       	rcall	.+0      	; 0x392 <vCoRoutineAddToDelayedList+0x6>
     392:	00 d0       	rcall	.+0      	; 0x394 <vCoRoutineAddToDelayedList+0x8>
     394:	00 d0       	rcall	.+0      	; 0x396 <vCoRoutineAddToDelayedList+0xa>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	9c 83       	std	Y+4, r25	; 0x04
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	7e 83       	std	Y+6, r23	; 0x06
     3a0:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3a2:	20 91 7e 00 	lds	r18, 0x007E
     3a6:	30 91 7f 00 	lds	r19, 0x007F
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	9c 81       	ldd	r25, Y+4	; 0x04
     3ae:	82 0f       	add	r24, r18
     3b0:	93 1f       	adc	r25, r19
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3b6:	80 91 7b 00 	lds	r24, 0x007B
     3ba:	90 91 7c 00 	lds	r25, 0x007C
     3be:	02 96       	adiw	r24, 0x02	; 2
     3c0:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     3c4:	e0 91 7b 00 	lds	r30, 0x007B
     3c8:	f0 91 7c 00 	lds	r31, 0x007C
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	93 83       	std	Z+3, r25	; 0x03
     3d2:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     3d4:	20 91 7e 00 	lds	r18, 0x007E
     3d8:	30 91 7f 00 	lds	r19, 0x007F
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	82 17       	cp	r24, r18
     3e2:	93 07       	cpc	r25, r19
     3e4:	70 f4       	brcc	.+28     	; 0x402 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3e6:	80 91 aa 00 	lds	r24, 0x00AA
     3ea:	90 91 ab 00 	lds	r25, 0x00AB
     3ee:	20 91 7b 00 	lds	r18, 0x007B
     3f2:	30 91 7c 00 	lds	r19, 0x007C
     3f6:	2e 5f       	subi	r18, 0xFE	; 254
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	b9 01       	movw	r22, r18
     3fc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInsert>
     400:	0d c0       	rjmp	.+26     	; 0x41c <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     402:	80 91 a8 00 	lds	r24, 0x00A8
     406:	90 91 a9 00 	lds	r25, 0x00A9
     40a:	20 91 7b 00 	lds	r18, 0x007B
     40e:	30 91 7c 00 	lds	r19, 0x007C
     412:	2e 5f       	subi	r18, 0xFE	; 254
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	b9 01       	movw	r22, r18
     418:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInsert>
	}

	if( pxEventList )
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	9e 81       	ldd	r25, Y+6	; 0x06
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	61 f0       	breq	.+24     	; 0x43c <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     424:	80 91 7b 00 	lds	r24, 0x007B
     428:	90 91 7c 00 	lds	r25, 0x007C
     42c:	9c 01       	movw	r18, r24
     42e:	24 5f       	subi	r18, 0xF4	; 244
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	b9 01       	movw	r22, r18
     438:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInsert>
	}
}
     43c:	26 96       	adiw	r28, 0x06	; 6
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	00 d0       	rcall	.+0      	; 0x454 <prvCheckPendingReadyList+0x6>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	3a c0       	rjmp	.+116    	; 0x4ce <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     45a:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     45c:	e0 91 b1 00 	lds	r30, 0x00B1
     460:	f0 91 b2 00 	lds	r31, 0x00B2
     464:	86 81       	ldd	r24, Z+6	; 0x06
     466:	97 81       	ldd	r25, Z+7	; 0x07
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	9a 81       	ldd	r25, Y+2	; 0x02
     470:	0c 96       	adiw	r24, 0x0c	; 12
     472:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     476:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	02 96       	adiw	r24, 0x02	; 2
     47e:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     482:	e9 81       	ldd	r30, Y+1	; 0x01
     484:	fa 81       	ldd	r31, Y+2	; 0x02
     486:	96 89       	ldd	r25, Z+22	; 0x16
     488:	80 91 7d 00 	lds	r24, 0x007D
     48c:	89 17       	cp	r24, r25
     48e:	28 f4       	brcc	.+10     	; 0x49a <prvCheckPendingReadyList+0x4c>
     490:	e9 81       	ldd	r30, Y+1	; 0x01
     492:	fa 81       	ldd	r31, Y+2	; 0x02
     494:	86 89       	ldd	r24, Z+22	; 0x16
     496:	80 93 7d 00 	sts	0x007D, r24
     49a:	e9 81       	ldd	r30, Y+1	; 0x01
     49c:	fa 81       	ldd	r31, Y+2	; 0x02
     49e:	86 89       	ldd	r24, Z+22	; 0x16
     4a0:	28 2f       	mov	r18, r24
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	c9 01       	movw	r24, r18
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	ac 01       	movw	r20, r24
     4b8:	4c 57       	subi	r20, 0x7C	; 124
     4ba:	5f 4f       	sbci	r21, 0xFF	; 255
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	9c 01       	movw	r18, r24
     4c2:	2e 5f       	subi	r18, 0xFE	; 254
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	ca 01       	movw	r24, r20
     4c8:	b9 01       	movw	r22, r18
     4ca:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     4ce:	80 91 ac 00 	lds	r24, 0x00AC
     4d2:	88 23       	and	r24, r24
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <prvCheckPendingReadyList+0x8a>
     4d6:	c1 cf       	rjmp	.-126    	; 0x45a <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     4e2:	df 93       	push	r29
     4e4:	cf 93       	push	r28
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <prvCheckDelayedList+0x6>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <prvCheckDelayedList+0x8>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     4ee:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <xTaskGetTickCount>
     4f2:	20 91 80 00 	lds	r18, 0x0080
     4f6:	30 91 81 00 	lds	r19, 0x0081
     4fa:	82 1b       	sub	r24, r18
     4fc:	93 0b       	sbc	r25, r19
     4fe:	90 93 83 00 	sts	0x0083, r25
     502:	80 93 82 00 	sts	0x0082, r24
     506:	85 c0       	rjmp	.+266    	; 0x612 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     508:	80 91 7e 00 	lds	r24, 0x007E
     50c:	90 91 7f 00 	lds	r25, 0x007F
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	90 93 7f 00 	sts	0x007F, r25
     516:	80 93 7e 00 	sts	0x007E, r24
		xPassedTicks--;
     51a:	80 91 82 00 	lds	r24, 0x0082
     51e:	90 91 83 00 	lds	r25, 0x0083
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	90 93 83 00 	sts	0x0083, r25
     528:	80 93 82 00 	sts	0x0082, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     52c:	80 91 7e 00 	lds	r24, 0x007E
     530:	90 91 7f 00 	lds	r25, 0x007F
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	09 f0       	breq	.+2      	; 0x53a <prvCheckDelayedList+0x58>
     538:	64 c0       	rjmp	.+200    	; 0x602 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     53a:	80 91 a8 00 	lds	r24, 0x00A8
     53e:	90 91 a9 00 	lds	r25, 0x00A9
     542:	9a 83       	std	Y+2, r25	; 0x02
     544:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     546:	80 91 aa 00 	lds	r24, 0x00AA
     54a:	90 91 ab 00 	lds	r25, 0x00AB
     54e:	90 93 a9 00 	sts	0x00A9, r25
     552:	80 93 a8 00 	sts	0x00A8, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	90 93 ab 00 	sts	0x00AB, r25
     55e:	80 93 aa 00 	sts	0x00AA, r24
     562:	4f c0       	rjmp	.+158    	; 0x602 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     564:	e0 91 a8 00 	lds	r30, 0x00A8
     568:	f0 91 a9 00 	lds	r31, 0x00A9
     56c:	05 80       	ldd	r0, Z+5	; 0x05
     56e:	f6 81       	ldd	r31, Z+6	; 0x06
     570:	e0 2d       	mov	r30, r0
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	97 81       	ldd	r25, Z+7	; 0x07
     576:	9c 83       	std	Y+4, r25	; 0x04
     578:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     57a:	eb 81       	ldd	r30, Y+3	; 0x03
     57c:	fc 81       	ldd	r31, Y+4	; 0x04
     57e:	22 81       	ldd	r18, Z+2	; 0x02
     580:	33 81       	ldd	r19, Z+3	; 0x03
     582:	80 91 7e 00 	lds	r24, 0x007E
     586:	90 91 7f 00 	lds	r25, 0x007F
     58a:	82 17       	cp	r24, r18
     58c:	93 07       	cpc	r25, r19
     58e:	08 f4       	brcc	.+2      	; 0x592 <prvCheckDelayedList+0xb0>
     590:	40 c0       	rjmp	.+128    	; 0x612 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     592:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	02 96       	adiw	r24, 0x02	; 2
     59a:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     59e:	eb 81       	ldd	r30, Y+3	; 0x03
     5a0:	fc 81       	ldd	r31, Y+4	; 0x04
     5a2:	84 89       	ldd	r24, Z+20	; 0x14
     5a4:	95 89       	ldd	r25, Z+21	; 0x15
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	0c 96       	adiw	r24, 0x0c	; 12
     5b0:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     5b4:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     5b6:	eb 81       	ldd	r30, Y+3	; 0x03
     5b8:	fc 81       	ldd	r31, Y+4	; 0x04
     5ba:	96 89       	ldd	r25, Z+22	; 0x16
     5bc:	80 91 7d 00 	lds	r24, 0x007D
     5c0:	89 17       	cp	r24, r25
     5c2:	28 f4       	brcc	.+10     	; 0x5ce <prvCheckDelayedList+0xec>
     5c4:	eb 81       	ldd	r30, Y+3	; 0x03
     5c6:	fc 81       	ldd	r31, Y+4	; 0x04
     5c8:	86 89       	ldd	r24, Z+22	; 0x16
     5ca:	80 93 7d 00 	sts	0x007D, r24
     5ce:	eb 81       	ldd	r30, Y+3	; 0x03
     5d0:	fc 81       	ldd	r31, Y+4	; 0x04
     5d2:	86 89       	ldd	r24, Z+22	; 0x16
     5d4:	28 2f       	mov	r18, r24
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	c9 01       	movw	r24, r18
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	ac 01       	movw	r20, r24
     5ec:	4c 57       	subi	r20, 0x7C	; 124
     5ee:	5f 4f       	sbci	r21, 0xFF	; 255
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	9c 81       	ldd	r25, Y+4	; 0x04
     5f4:	9c 01       	movw	r18, r24
     5f6:	2e 5f       	subi	r18, 0xFE	; 254
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	ca 01       	movw	r24, r20
     5fc:	b9 01       	movw	r22, r18
     5fe:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     602:	e0 91 a8 00 	lds	r30, 0x00A8
     606:	f0 91 a9 00 	lds	r31, 0x00A9
     60a:	80 81       	ld	r24, Z
     60c:	88 23       	and	r24, r24
     60e:	09 f0       	breq	.+2      	; 0x612 <prvCheckDelayedList+0x130>
     610:	a9 cf       	rjmp	.-174    	; 0x564 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     612:	80 91 82 00 	lds	r24, 0x0082
     616:	90 91 83 00 	lds	r25, 0x0083
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	09 f0       	breq	.+2      	; 0x620 <prvCheckDelayedList+0x13e>
     61e:	74 cf       	rjmp	.-280    	; 0x508 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     620:	80 91 7e 00 	lds	r24, 0x007E
     624:	90 91 7f 00 	lds	r25, 0x007F
     628:	90 93 81 00 	sts	0x0081, r25
     62c:	80 93 80 00 	sts	0x0080, r24
}
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	cf 91       	pop	r28
     63a:	df 91       	pop	r29
     63c:	08 95       	ret

0000063e <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	00 d0       	rcall	.+0      	; 0x644 <vCoRoutineSchedule+0x6>
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     648:	0e 94 27 02 	call	0x44e	; 0x44e <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     64c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <prvCheckDelayedList>
     650:	0a c0       	rjmp	.+20     	; 0x666 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     652:	80 91 7d 00 	lds	r24, 0x007D
     656:	88 23       	and	r24, r24
     658:	09 f4       	brne	.+2      	; 0x65c <vCoRoutineSchedule+0x1e>
     65a:	66 c0       	rjmp	.+204    	; 0x728 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     65c:	80 91 7d 00 	lds	r24, 0x007D
     660:	81 50       	subi	r24, 0x01	; 1
     662:	80 93 7d 00 	sts	0x007D, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     666:	80 91 7d 00 	lds	r24, 0x007D
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	c9 01       	movw	r24, r18
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
     680:	fc 01       	movw	r30, r24
     682:	ec 57       	subi	r30, 0x7C	; 124
     684:	ff 4f       	sbci	r31, 0xFF	; 255
     686:	80 81       	ld	r24, Z
     688:	88 23       	and	r24, r24
     68a:	19 f3       	breq	.-58     	; 0x652 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     68c:	80 91 7d 00 	lds	r24, 0x007D
     690:	28 2f       	mov	r18, r24
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	c9 01       	movw	r24, r18
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	8c 57       	subi	r24, 0x7C	; 124
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	e9 81       	ldd	r30, Y+1	; 0x01
     6b0:	fa 81       	ldd	r31, Y+2	; 0x02
     6b2:	01 80       	ldd	r0, Z+1	; 0x01
     6b4:	f2 81       	ldd	r31, Z+2	; 0x02
     6b6:	e0 2d       	mov	r30, r0
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	e9 81       	ldd	r30, Y+1	; 0x01
     6be:	fa 81       	ldd	r31, Y+2	; 0x02
     6c0:	92 83       	std	Z+2, r25	; 0x02
     6c2:	81 83       	std	Z+1, r24	; 0x01
     6c4:	e9 81       	ldd	r30, Y+1	; 0x01
     6c6:	fa 81       	ldd	r31, Y+2	; 0x02
     6c8:	21 81       	ldd	r18, Z+1	; 0x01
     6ca:	32 81       	ldd	r19, Z+2	; 0x02
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	03 96       	adiw	r24, 0x03	; 3
     6d2:	28 17       	cp	r18, r24
     6d4:	39 07       	cpc	r19, r25
     6d6:	59 f4       	brne	.+22     	; 0x6ee <vCoRoutineSchedule+0xb0>
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	01 80       	ldd	r0, Z+1	; 0x01
     6de:	f2 81       	ldd	r31, Z+2	; 0x02
     6e0:	e0 2d       	mov	r30, r0
     6e2:	82 81       	ldd	r24, Z+2	; 0x02
     6e4:	93 81       	ldd	r25, Z+3	; 0x03
     6e6:	e9 81       	ldd	r30, Y+1	; 0x01
     6e8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ea:	92 83       	std	Z+2, r25	; 0x02
     6ec:	81 83       	std	Z+1, r24	; 0x01
     6ee:	e9 81       	ldd	r30, Y+1	; 0x01
     6f0:	fa 81       	ldd	r31, Y+2	; 0x02
     6f2:	01 80       	ldd	r0, Z+1	; 0x01
     6f4:	f2 81       	ldd	r31, Z+2	; 0x02
     6f6:	e0 2d       	mov	r30, r0
     6f8:	86 81       	ldd	r24, Z+6	; 0x06
     6fa:	97 81       	ldd	r25, Z+7	; 0x07
     6fc:	90 93 7c 00 	sts	0x007C, r25
     700:	80 93 7b 00 	sts	0x007B, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     704:	e0 91 7b 00 	lds	r30, 0x007B
     708:	f0 91 7c 00 	lds	r31, 0x007C
     70c:	40 81       	ld	r20, Z
     70e:	51 81       	ldd	r21, Z+1	; 0x01
     710:	80 91 7b 00 	lds	r24, 0x007B
     714:	90 91 7c 00 	lds	r25, 0x007C
     718:	e0 91 7b 00 	lds	r30, 0x007B
     71c:	f0 91 7c 00 	lds	r31, 0x007C
     720:	27 89       	ldd	r18, Z+23	; 0x17
     722:	62 2f       	mov	r22, r18
     724:	fa 01       	movw	r30, r20
     726:	09 95       	icall

	return;
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	08 95       	ret

00000732 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	0f 92       	push	r0
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     73c:	19 82       	std	Y+1, r1	; 0x01
     73e:	13 c0       	rjmp	.+38     	; 0x766 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	28 2f       	mov	r18, r24
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	c9 01       	movw	r24, r18
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	8c 57       	subi	r24, 0x7C	; 124
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	50 f3       	brcs	.-44     	; 0x740 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     76c:	86 e9       	ldi	r24, 0x96	; 150
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     774:	8f e9       	ldi	r24, 0x9F	; 159
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     77c:	8c ea       	ldi	r24, 0xAC	; 172
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     784:	86 e9       	ldi	r24, 0x96	; 150
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 a9 00 	sts	0x00A9, r25
     78c:	80 93 a8 00 	sts	0x00A8, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     790:	8f e9       	ldi	r24, 0x9F	; 159
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 ab 00 	sts	0x00AB, r25
     798:	80 93 aa 00 	sts	0x00AA, r24
}
     79c:	0f 90       	pop	r0
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <xCoRoutineRemoveFromEventList+0x6>
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <xCoRoutineRemoveFromEventList+0x8>
     7ac:	0f 92       	push	r0
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     7b6:	ec 81       	ldd	r30, Y+4	; 0x04
     7b8:	fd 81       	ldd	r31, Y+5	; 0x05
     7ba:	05 80       	ldd	r0, Z+5	; 0x05
     7bc:	f6 81       	ldd	r31, Z+6	; 0x06
     7be:	e0 2d       	mov	r30, r0
     7c0:	86 81       	ldd	r24, Z+6	; 0x06
     7c2:	97 81       	ldd	r25, Z+7	; 0x07
     7c4:	9b 83       	std	Y+3, r25	; 0x03
     7c6:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     7c8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ca:	9b 81       	ldd	r25, Y+3	; 0x03
     7cc:	0c 96       	adiw	r24, 0x0c	; 12
     7ce:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	9b 81       	ldd	r25, Y+3	; 0x03
     7d6:	9c 01       	movw	r18, r24
     7d8:	24 5f       	subi	r18, 0xF4	; 244
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	8c ea       	ldi	r24, 0xAC	; 172
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	b9 01       	movw	r22, r18
     7e2:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     7e6:	ea 81       	ldd	r30, Y+2	; 0x02
     7e8:	fb 81       	ldd	r31, Y+3	; 0x03
     7ea:	96 89       	ldd	r25, Z+22	; 0x16
     7ec:	e0 91 7b 00 	lds	r30, 0x007B
     7f0:	f0 91 7c 00 	lds	r31, 0x007C
     7f4:	86 89       	ldd	r24, Z+22	; 0x16
     7f6:	98 17       	cp	r25, r24
     7f8:	18 f0       	brcs	.+6      	; 0x800 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     800:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     802:	89 81       	ldd	r24, Y+1	; 0x01
}
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	00 d0       	rcall	.+0      	; 0x81a <pvPortMalloc+0x6>
     81a:	00 d0       	rcall	.+0      	; 0x81c <pvPortMalloc+0x8>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     824:	1a 82       	std	Y+2, r1	; 0x02
     826:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     828:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     82c:	80 91 b5 00 	lds	r24, 0x00B5
     830:	90 91 b6 00 	lds	r25, 0x00B6
     834:	2b 81       	ldd	r18, Y+3	; 0x03
     836:	3c 81       	ldd	r19, Y+4	; 0x04
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	22 e0       	ldi	r18, 0x02	; 2
     83e:	88 35       	cpi	r24, 0x58	; 88
     840:	92 07       	cpc	r25, r18
     842:	18 f5       	brcc	.+70     	; 0x88a <__stack+0x2b>
     844:	20 91 b5 00 	lds	r18, 0x00B5
     848:	30 91 b6 00 	lds	r19, 0x00B6
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	28 0f       	add	r18, r24
     852:	39 1f       	adc	r19, r25
     854:	80 91 b5 00 	lds	r24, 0x00B5
     858:	90 91 b6 00 	lds	r25, 0x00B6
     85c:	82 17       	cp	r24, r18
     85e:	93 07       	cpc	r25, r19
     860:	a0 f4       	brcc	.+40     	; 0x88a <__stack+0x2b>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     862:	80 91 b5 00 	lds	r24, 0x00B5
     866:	90 91 b6 00 	lds	r25, 0x00B6
     86a:	89 54       	subi	r24, 0x49	; 73
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     872:	20 91 b5 00 	lds	r18, 0x00B5
     876:	30 91 b6 00 	lds	r19, 0x00B6
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	90 93 b6 00 	sts	0x00B6, r25
     886:	80 93 b5 00 	sts	0x00B5, r24
		}	
	}
	xTaskResumeAll();
     88a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
}
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	08 95       	ret

000008a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <vPortFree+0x6>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     8c0:	10 92 b6 00 	sts	0x00B6, r1
     8c4:	10 92 b5 00 	sts	0x00B5, r1
}
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     8d6:	20 91 b5 00 	lds	r18, 0x00B5
     8da:	30 91 b6 00 	lds	r19, 0x00B6
     8de:	88 e5       	ldi	r24, 0x58	; 88
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	82 1b       	sub	r24, r18
     8e4:	93 0b       	sbc	r25, r19
}
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <vListInitialise+0x6>
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9a 83       	std	Y+2, r25	; 0x02
     8f8:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	03 96       	adiw	r24, 0x03	; 3
     900:	e9 81       	ldd	r30, Y+1	; 0x01
     902:	fa 81       	ldd	r31, Y+2	; 0x02
     904:	92 83       	std	Z+2, r25	; 0x02
     906:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     908:	e9 81       	ldd	r30, Y+1	; 0x01
     90a:	fa 81       	ldd	r31, Y+2	; 0x02
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	94 83       	std	Z+4, r25	; 0x04
     912:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	03 96       	adiw	r24, 0x03	; 3
     91a:	e9 81       	ldd	r30, Y+1	; 0x01
     91c:	fa 81       	ldd	r31, Y+2	; 0x02
     91e:	96 83       	std	Z+6, r25	; 0x06
     920:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	03 96       	adiw	r24, 0x03	; 3
     928:	e9 81       	ldd	r30, Y+1	; 0x01
     92a:	fa 81       	ldd	r31, Y+2	; 0x02
     92c:	90 87       	std	Z+8, r25	; 0x08
     92e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     930:	e9 81       	ldd	r30, Y+1	; 0x01
     932:	fa 81       	ldd	r31, Y+2	; 0x02
     934:	10 82       	st	Z, r1
}
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	08 95       	ret

00000940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	00 d0       	rcall	.+0      	; 0x946 <vListInitialiseItem+0x6>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	11 86       	std	Z+9, r1	; 0x09
     954:	10 86       	std	Z+8, r1	; 0x08
}
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	00 d0       	rcall	.+0      	; 0x966 <vListInsertEnd+0x6>
     966:	00 d0       	rcall	.+0      	; 0x968 <vListInsertEnd+0x8>
     968:	00 d0       	rcall	.+0      	; 0x96a <vListInsertEnd+0xa>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	9c 83       	std	Y+4, r25	; 0x04
     970:	8b 83       	std	Y+3, r24	; 0x03
     972:	7e 83       	std	Y+6, r23	; 0x06
     974:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     976:	eb 81       	ldd	r30, Y+3	; 0x03
     978:	fc 81       	ldd	r31, Y+4	; 0x04
     97a:	81 81       	ldd	r24, Z+1	; 0x01
     97c:	92 81       	ldd	r25, Z+2	; 0x02
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     982:	e9 81       	ldd	r30, Y+1	; 0x01
     984:	fa 81       	ldd	r31, Y+2	; 0x02
     986:	82 81       	ldd	r24, Z+2	; 0x02
     988:	93 81       	ldd	r25, Z+3	; 0x03
     98a:	ed 81       	ldd	r30, Y+5	; 0x05
     98c:	fe 81       	ldd	r31, Y+6	; 0x06
     98e:	93 83       	std	Z+3, r25	; 0x03
     990:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     992:	eb 81       	ldd	r30, Y+3	; 0x03
     994:	fc 81       	ldd	r31, Y+4	; 0x04
     996:	81 81       	ldd	r24, Z+1	; 0x01
     998:	92 81       	ldd	r25, Z+2	; 0x02
     99a:	ed 81       	ldd	r30, Y+5	; 0x05
     99c:	fe 81       	ldd	r31, Y+6	; 0x06
     99e:	95 83       	std	Z+5, r25	; 0x05
     9a0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     9a2:	e9 81       	ldd	r30, Y+1	; 0x01
     9a4:	fa 81       	ldd	r31, Y+2	; 0x02
     9a6:	02 80       	ldd	r0, Z+2	; 0x02
     9a8:	f3 81       	ldd	r31, Z+3	; 0x03
     9aa:	e0 2d       	mov	r30, r0
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	9e 81       	ldd	r25, Y+6	; 0x06
     9b0:	95 83       	std	Z+5, r25	; 0x05
     9b2:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     9b4:	8d 81       	ldd	r24, Y+5	; 0x05
     9b6:	9e 81       	ldd	r25, Y+6	; 0x06
     9b8:	e9 81       	ldd	r30, Y+1	; 0x01
     9ba:	fa 81       	ldd	r31, Y+2	; 0x02
     9bc:	93 83       	std	Z+3, r25	; 0x03
     9be:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     9c0:	8d 81       	ldd	r24, Y+5	; 0x05
     9c2:	9e 81       	ldd	r25, Y+6	; 0x06
     9c4:	eb 81       	ldd	r30, Y+3	; 0x03
     9c6:	fc 81       	ldd	r31, Y+4	; 0x04
     9c8:	92 83       	std	Z+2, r25	; 0x02
     9ca:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9cc:	ed 81       	ldd	r30, Y+5	; 0x05
     9ce:	fe 81       	ldd	r31, Y+6	; 0x06
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	91 87       	std	Z+9, r25	; 0x09
     9d6:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     9d8:	eb 81       	ldd	r30, Y+3	; 0x03
     9da:	fc 81       	ldd	r31, Y+4	; 0x04
     9dc:	80 81       	ld	r24, Z
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	eb 81       	ldd	r30, Y+3	; 0x03
     9e2:	fc 81       	ldd	r31, Y+4	; 0x04
     9e4:	80 83       	st	Z, r24
}
     9e6:	26 96       	adiw	r28, 0x06	; 6
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	08 95       	ret

000009f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     9f8:	df 93       	push	r29
     9fa:	cf 93       	push	r28
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	28 97       	sbiw	r28, 0x08	; 8
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	9e 83       	std	Y+6, r25	; 0x06
     a0e:	8d 83       	std	Y+5, r24	; 0x05
     a10:	78 87       	std	Y+8, r23	; 0x08
     a12:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     a14:	ef 81       	ldd	r30, Y+7	; 0x07
     a16:	f8 85       	ldd	r31, Y+8	; 0x08
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	8f 3f       	cpi	r24, 0xFF	; 255
     a28:	92 07       	cpc	r25, r18
     a2a:	39 f4       	brne	.+14     	; 0xa3a <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     a2c:	ed 81       	ldd	r30, Y+5	; 0x05
     a2e:	fe 81       	ldd	r31, Y+6	; 0x06
     a30:	87 81       	ldd	r24, Z+7	; 0x07
     a32:	90 85       	ldd	r25, Z+8	; 0x08
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	18 c0       	rjmp	.+48     	; 0xa6a <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     a3a:	8d 81       	ldd	r24, Y+5	; 0x05
     a3c:	9e 81       	ldd	r25, Y+6	; 0x06
     a3e:	03 96       	adiw	r24, 0x03	; 3
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <vListInsert+0x5a>
     a46:	eb 81       	ldd	r30, Y+3	; 0x03
     a48:	fc 81       	ldd	r31, Y+4	; 0x04
     a4a:	82 81       	ldd	r24, Z+2	; 0x02
     a4c:	93 81       	ldd	r25, Z+3	; 0x03
     a4e:	9c 83       	std	Y+4, r25	; 0x04
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	eb 81       	ldd	r30, Y+3	; 0x03
     a54:	fc 81       	ldd	r31, Y+4	; 0x04
     a56:	02 80       	ldd	r0, Z+2	; 0x02
     a58:	f3 81       	ldd	r31, Z+3	; 0x03
     a5a:	e0 2d       	mov	r30, r0
     a5c:	20 81       	ld	r18, Z
     a5e:	31 81       	ldd	r19, Z+1	; 0x01
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	82 17       	cp	r24, r18
     a66:	93 07       	cpc	r25, r19
     a68:	70 f7       	brcc	.-36     	; 0xa46 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a6a:	eb 81       	ldd	r30, Y+3	; 0x03
     a6c:	fc 81       	ldd	r31, Y+4	; 0x04
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	93 81       	ldd	r25, Z+3	; 0x03
     a72:	ef 81       	ldd	r30, Y+7	; 0x07
     a74:	f8 85       	ldd	r31, Y+8	; 0x08
     a76:	93 83       	std	Z+3, r25	; 0x03
     a78:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     a7a:	ef 81       	ldd	r30, Y+7	; 0x07
     a7c:	f8 85       	ldd	r31, Y+8	; 0x08
     a7e:	02 80       	ldd	r0, Z+2	; 0x02
     a80:	f3 81       	ldd	r31, Z+3	; 0x03
     a82:	e0 2d       	mov	r30, r0
     a84:	8f 81       	ldd	r24, Y+7	; 0x07
     a86:	98 85       	ldd	r25, Y+8	; 0x08
     a88:	95 83       	std	Z+5, r25	; 0x05
     a8a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     a8c:	ef 81       	ldd	r30, Y+7	; 0x07
     a8e:	f8 85       	ldd	r31, Y+8	; 0x08
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	95 83       	std	Z+5, r25	; 0x05
     a96:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     a98:	8f 81       	ldd	r24, Y+7	; 0x07
     a9a:	98 85       	ldd	r25, Y+8	; 0x08
     a9c:	eb 81       	ldd	r30, Y+3	; 0x03
     a9e:	fc 81       	ldd	r31, Y+4	; 0x04
     aa0:	93 83       	std	Z+3, r25	; 0x03
     aa2:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     aa4:	ef 81       	ldd	r30, Y+7	; 0x07
     aa6:	f8 85       	ldd	r31, Y+8	; 0x08
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	9e 81       	ldd	r25, Y+6	; 0x06
     aac:	91 87       	std	Z+9, r25	; 0x09
     aae:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     ab0:	ed 81       	ldd	r30, Y+5	; 0x05
     ab2:	fe 81       	ldd	r31, Y+6	; 0x06
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	ed 81       	ldd	r30, Y+5	; 0x05
     aba:	fe 81       	ldd	r31, Y+6	; 0x06
     abc:	80 83       	st	Z, r24
}
     abe:	28 96       	adiw	r28, 0x08	; 8
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <vListRemove+0x6>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <vListRemove+0x8>
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	9c 83       	std	Y+4, r25	; 0x04
     ade:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ae0:	eb 81       	ldd	r30, Y+3	; 0x03
     ae2:	fc 81       	ldd	r31, Y+4	; 0x04
     ae4:	a2 81       	ldd	r26, Z+2	; 0x02
     ae6:	b3 81       	ldd	r27, Z+3	; 0x03
     ae8:	eb 81       	ldd	r30, Y+3	; 0x03
     aea:	fc 81       	ldd	r31, Y+4	; 0x04
     aec:	84 81       	ldd	r24, Z+4	; 0x04
     aee:	95 81       	ldd	r25, Z+5	; 0x05
     af0:	15 96       	adiw	r26, 0x05	; 5
     af2:	9c 93       	st	X, r25
     af4:	8e 93       	st	-X, r24
     af6:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     af8:	eb 81       	ldd	r30, Y+3	; 0x03
     afa:	fc 81       	ldd	r31, Y+4	; 0x04
     afc:	a4 81       	ldd	r26, Z+4	; 0x04
     afe:	b5 81       	ldd	r27, Z+5	; 0x05
     b00:	eb 81       	ldd	r30, Y+3	; 0x03
     b02:	fc 81       	ldd	r31, Y+4	; 0x04
     b04:	82 81       	ldd	r24, Z+2	; 0x02
     b06:	93 81       	ldd	r25, Z+3	; 0x03
     b08:	13 96       	adiw	r26, 0x03	; 3
     b0a:	9c 93       	st	X, r25
     b0c:	8e 93       	st	-X, r24
     b0e:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     b10:	eb 81       	ldd	r30, Y+3	; 0x03
     b12:	fc 81       	ldd	r31, Y+4	; 0x04
     b14:	80 85       	ldd	r24, Z+8	; 0x08
     b16:	91 85       	ldd	r25, Z+9	; 0x09
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b1c:	e9 81       	ldd	r30, Y+1	; 0x01
     b1e:	fa 81       	ldd	r31, Y+2	; 0x02
     b20:	21 81       	ldd	r18, Z+1	; 0x01
     b22:	32 81       	ldd	r19, Z+2	; 0x02
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	28 17       	cp	r18, r24
     b2a:	39 07       	cpc	r19, r25
     b2c:	41 f4       	brne	.+16     	; 0xb3e <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	84 81       	ldd	r24, Z+4	; 0x04
     b34:	95 81       	ldd	r25, Z+5	; 0x05
     b36:	e9 81       	ldd	r30, Y+1	; 0x01
     b38:	fa 81       	ldd	r31, Y+2	; 0x02
     b3a:	92 83       	std	Z+2, r25	; 0x02
     b3c:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     b3e:	eb 81       	ldd	r30, Y+3	; 0x03
     b40:	fc 81       	ldd	r31, Y+4	; 0x04
     b42:	11 86       	std	Z+9, r1	; 0x09
     b44:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     b46:	e9 81       	ldd	r30, Y+1	; 0x01
     b48:	fa 81       	ldd	r31, Y+2	; 0x02
     b4a:	80 81       	ld	r24, Z
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	e9 81       	ldd	r30, Y+1	; 0x01
     b50:	fa 81       	ldd	r31, Y+2	; 0x02
     b52:	80 83       	st	Z, r24
}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	28 97       	sbiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	8b 83       	std	Y+3, r24	; 0x03
     b7a:	7e 83       	std	Y+6, r23	; 0x06
     b7c:	6d 83       	std	Y+5, r22	; 0x05
     b7e:	58 87       	std	Y+8, r21	; 0x08
     b80:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     b82:	eb 81       	ldd	r30, Y+3	; 0x03
     b84:	fc 81       	ldd	r31, Y+4	; 0x04
     b86:	81 e1       	ldi	r24, 0x11	; 17
     b88:	80 83       	st	Z, r24
	pxTopOfStack--;
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	9c 83       	std	Y+4, r25	; 0x04
     b92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     b94:	eb 81       	ldd	r30, Y+3	; 0x03
     b96:	fc 81       	ldd	r31, Y+4	; 0x04
     b98:	82 e2       	ldi	r24, 0x22	; 34
     b9a:	80 83       	st	Z, r24
	pxTopOfStack--;
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	9c 83       	std	Y+4, r25	; 0x04
     ba4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	83 e3       	ldi	r24, 0x33	; 51
     bac:	80 83       	st	Z, r24
	pxTopOfStack--;
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	9c 83       	std	Y+4, r25	; 0x04
     bb6:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
     bb8:	8d 81       	ldd	r24, Y+5	; 0x05
     bba:	9e 81       	ldd	r25, Y+6	; 0x06
     bbc:	9a 83       	std	Y+2, r25	; 0x02
     bbe:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	eb 81       	ldd	r30, Y+3	; 0x03
     bc4:	fc 81       	ldd	r31, Y+4	; 0x04
     bc6:	80 83       	st	Z, r24
	pxTopOfStack--;
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	9c 83       	std	Y+4, r25	; 0x04
     bd0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	89 2f       	mov	r24, r25
     bd8:	99 27       	eor	r25, r25
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	eb 81       	ldd	r30, Y+3	; 0x03
     be2:	fc 81       	ldd	r31, Y+4	; 0x04
     be4:	80 83       	st	Z, r24
	pxTopOfStack--;
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     bf0:	eb 81       	ldd	r30, Y+3	; 0x03
     bf2:	fc 81       	ldd	r31, Y+4	; 0x04
     bf4:	10 82       	st	Z, r1
	pxTopOfStack--;
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     c00:	eb 81       	ldd	r30, Y+3	; 0x03
     c02:	fc 81       	ldd	r31, Y+4	; 0x04
     c04:	80 e8       	ldi	r24, 0x80	; 128
     c06:	80 83       	st	Z, r24
	pxTopOfStack--;
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	10 82       	st	Z, r1
	pxTopOfStack--;
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     c22:	eb 81       	ldd	r30, Y+3	; 0x03
     c24:	fc 81       	ldd	r31, Y+4	; 0x04
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	80 83       	st	Z, r24
	pxTopOfStack--;
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9c 83       	std	Y+4, r25	; 0x04
     c32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     c34:	eb 81       	ldd	r30, Y+3	; 0x03
     c36:	fc 81       	ldd	r31, Y+4	; 0x04
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	80 83       	st	Z, r24
	pxTopOfStack--;
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     c46:	eb 81       	ldd	r30, Y+3	; 0x03
     c48:	fc 81       	ldd	r31, Y+4	; 0x04
     c4a:	84 e0       	ldi	r24, 0x04	; 4
     c4c:	80 83       	st	Z, r24
	pxTopOfStack--;
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     c58:	eb 81       	ldd	r30, Y+3	; 0x03
     c5a:	fc 81       	ldd	r31, Y+4	; 0x04
     c5c:	85 e0       	ldi	r24, 0x05	; 5
     c5e:	80 83       	st	Z, r24
	pxTopOfStack--;
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9c 83       	std	Y+4, r25	; 0x04
     c68:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     c6a:	eb 81       	ldd	r30, Y+3	; 0x03
     c6c:	fc 81       	ldd	r31, Y+4	; 0x04
     c6e:	86 e0       	ldi	r24, 0x06	; 6
     c70:	80 83       	st	Z, r24
	pxTopOfStack--;
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     c7c:	eb 81       	ldd	r30, Y+3	; 0x03
     c7e:	fc 81       	ldd	r31, Y+4	; 0x04
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	80 83       	st	Z, r24
	pxTopOfStack--;
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	9c 83       	std	Y+4, r25	; 0x04
     c8c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     c8e:	eb 81       	ldd	r30, Y+3	; 0x03
     c90:	fc 81       	ldd	r31, Y+4	; 0x04
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	80 83       	st	Z, r24
	pxTopOfStack--;
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9c 83       	std	Y+4, r25	; 0x04
     c9e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     ca0:	eb 81       	ldd	r30, Y+3	; 0x03
     ca2:	fc 81       	ldd	r31, Y+4	; 0x04
     ca4:	89 e0       	ldi	r24, 0x09	; 9
     ca6:	80 83       	st	Z, r24
	pxTopOfStack--;
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     cb2:	eb 81       	ldd	r30, Y+3	; 0x03
     cb4:	fc 81       	ldd	r31, Y+4	; 0x04
     cb6:	80 e1       	ldi	r24, 0x10	; 16
     cb8:	80 83       	st	Z, r24
	pxTopOfStack--;
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     cc4:	eb 81       	ldd	r30, Y+3	; 0x03
     cc6:	fc 81       	ldd	r31, Y+4	; 0x04
     cc8:	81 e1       	ldi	r24, 0x11	; 17
     cca:	80 83       	st	Z, r24
	pxTopOfStack--;
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	9c 83       	std	Y+4, r25	; 0x04
     cd4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     cd6:	eb 81       	ldd	r30, Y+3	; 0x03
     cd8:	fc 81       	ldd	r31, Y+4	; 0x04
     cda:	82 e1       	ldi	r24, 0x12	; 18
     cdc:	80 83       	st	Z, r24
	pxTopOfStack--;
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	9c 83       	std	Y+4, r25	; 0x04
     ce6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     ce8:	eb 81       	ldd	r30, Y+3	; 0x03
     cea:	fc 81       	ldd	r31, Y+4	; 0x04
     cec:	83 e1       	ldi	r24, 0x13	; 19
     cee:	80 83       	st	Z, r24
	pxTopOfStack--;
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	9c 83       	std	Y+4, r25	; 0x04
     cf8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     cfa:	eb 81       	ldd	r30, Y+3	; 0x03
     cfc:	fc 81       	ldd	r31, Y+4	; 0x04
     cfe:	84 e1       	ldi	r24, 0x14	; 20
     d00:	80 83       	st	Z, r24
	pxTopOfStack--;
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	9c 83       	std	Y+4, r25	; 0x04
     d0a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	85 e1       	ldi	r24, 0x15	; 21
     d12:	80 83       	st	Z, r24
	pxTopOfStack--;
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	9c 83       	std	Y+4, r25	; 0x04
     d1c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	86 e1       	ldi	r24, 0x16	; 22
     d24:	80 83       	st	Z, r24
	pxTopOfStack--;
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     d30:	eb 81       	ldd	r30, Y+3	; 0x03
     d32:	fc 81       	ldd	r31, Y+4	; 0x04
     d34:	87 e1       	ldi	r24, 0x17	; 23
     d36:	80 83       	st	Z, r24
	pxTopOfStack--;
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9c 83       	std	Y+4, r25	; 0x04
     d40:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     d42:	eb 81       	ldd	r30, Y+3	; 0x03
     d44:	fc 81       	ldd	r31, Y+4	; 0x04
     d46:	88 e1       	ldi	r24, 0x18	; 24
     d48:	80 83       	st	Z, r24
	pxTopOfStack--;
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	9c 83       	std	Y+4, r25	; 0x04
     d52:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     d54:	eb 81       	ldd	r30, Y+3	; 0x03
     d56:	fc 81       	ldd	r31, Y+4	; 0x04
     d58:	89 e1       	ldi	r24, 0x19	; 25
     d5a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     d66:	eb 81       	ldd	r30, Y+3	; 0x03
     d68:	fc 81       	ldd	r31, Y+4	; 0x04
     d6a:	80 e2       	ldi	r24, 0x20	; 32
     d6c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     d78:	eb 81       	ldd	r30, Y+3	; 0x03
     d7a:	fc 81       	ldd	r31, Y+4	; 0x04
     d7c:	81 e2       	ldi	r24, 0x21	; 33
     d7e:	80 83       	st	Z, r24
	pxTopOfStack--;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     d8a:	eb 81       	ldd	r30, Y+3	; 0x03
     d8c:	fc 81       	ldd	r31, Y+4	; 0x04
     d8e:	82 e2       	ldi	r24, 0x22	; 34
     d90:	80 83       	st	Z, r24
	pxTopOfStack--;
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     d9c:	eb 81       	ldd	r30, Y+3	; 0x03
     d9e:	fc 81       	ldd	r31, Y+4	; 0x04
     da0:	83 e2       	ldi	r24, 0x23	; 35
     da2:	80 83       	st	Z, r24
	pxTopOfStack--;
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
     dae:	8f 81       	ldd	r24, Y+7	; 0x07
     db0:	98 85       	ldd	r25, Y+8	; 0x08
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	eb 81       	ldd	r30, Y+3	; 0x03
     dba:	fc 81       	ldd	r31, Y+4	; 0x04
     dbc:	80 83       	st	Z, r24
	pxTopOfStack--;
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	89 2f       	mov	r24, r25
     dce:	99 27       	eor	r25, r25
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	eb 81       	ldd	r30, Y+3	; 0x03
     dd8:	fc 81       	ldd	r31, Y+4	; 0x04
     dda:	80 83       	st	Z, r24
	pxTopOfStack--;
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	86 e2       	ldi	r24, 0x26	; 38
     dec:	80 83       	st	Z, r24
	pxTopOfStack--;
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	87 e2       	ldi	r24, 0x27	; 39
     dfe:	80 83       	st	Z, r24
	pxTopOfStack--;
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     e0a:	eb 81       	ldd	r30, Y+3	; 0x03
     e0c:	fc 81       	ldd	r31, Y+4	; 0x04
     e0e:	88 e2       	ldi	r24, 0x28	; 40
     e10:	80 83       	st	Z, r24
	pxTopOfStack--;
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	9c 83       	std	Y+4, r25	; 0x04
     e1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     e1c:	eb 81       	ldd	r30, Y+3	; 0x03
     e1e:	fc 81       	ldd	r31, Y+4	; 0x04
     e20:	89 e2       	ldi	r24, 0x29	; 41
     e22:	80 83       	st	Z, r24
	pxTopOfStack--;
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     e2e:	eb 81       	ldd	r30, Y+3	; 0x03
     e30:	fc 81       	ldd	r31, Y+4	; 0x04
     e32:	80 e3       	ldi	r24, 0x30	; 48
     e34:	80 83       	st	Z, r24
	pxTopOfStack--;
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     e40:	eb 81       	ldd	r30, Y+3	; 0x03
     e42:	fc 81       	ldd	r31, Y+4	; 0x04
     e44:	81 e3       	ldi	r24, 0x31	; 49
     e46:	80 83       	st	Z, r24
	pxTopOfStack--;
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
}
     e56:	28 96       	adiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     e70:	0e 94 24 08 	call	0x1048	; 0x1048 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     e74:	a0 91 0f 03 	lds	r26, 0x030F
     e78:	b0 91 10 03 	lds	r27, 0x0310
     e7c:	cd 91       	ld	r28, X+
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	dd 91       	ld	r29, X+
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	4f 91       	pop	r20
     e9c:	3f 91       	pop	r19
     e9e:	2f 91       	pop	r18
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	df 90       	pop	r13
     eaa:	cf 90       	pop	r12
     eac:	bf 90       	pop	r11
     eae:	af 90       	pop	r10
     eb0:	9f 90       	pop	r9
     eb2:	8f 90       	pop	r8
     eb4:	7f 90       	pop	r7
     eb6:	6f 90       	pop	r6
     eb8:	5f 90       	pop	r5
     eba:	4f 90       	pop	r4
     ebc:	3f 90       	pop	r3
     ebe:	2f 90       	pop	r2
     ec0:	1f 90       	pop	r1
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     ec8:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
     eca:	81 e0       	ldi	r24, 0x01	; 1
}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ee0:	0f 92       	push	r0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	0f 92       	push	r0
     ee8:	1f 92       	push	r1
     eea:	11 24       	eor	r1, r1
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	a0 91 0f 03 	lds	r26, 0x030F
     f2c:	b0 91 10 03 	lds	r27, 0x0310
     f30:	0d b6       	in	r0, 0x3d	; 61
     f32:	0d 92       	st	X+, r0
     f34:	0e b6       	in	r0, 0x3e	; 62
     f36:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f38:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f3c:	a0 91 0f 03 	lds	r26, 0x030F
     f40:	b0 91 10 03 	lds	r27, 0x0310
     f44:	cd 91       	ld	r28, X+
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	dd 91       	ld	r29, X+
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	7f 90       	pop	r7
     f7e:	6f 90       	pop	r6
     f80:	5f 90       	pop	r5
     f82:	4f 90       	pop	r4
     f84:	3f 90       	pop	r3
     f86:	2f 90       	pop	r2
     f88:	1f 90       	pop	r1
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f90:	08 95       	ret

00000f92 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	0f 92       	push	r0
     f9a:	1f 92       	push	r1
     f9c:	11 24       	eor	r1, r1
     f9e:	2f 92       	push	r2
     fa0:	3f 92       	push	r3
     fa2:	4f 92       	push	r4
     fa4:	5f 92       	push	r5
     fa6:	6f 92       	push	r6
     fa8:	7f 92       	push	r7
     faa:	8f 92       	push	r8
     fac:	9f 92       	push	r9
     fae:	af 92       	push	r10
     fb0:	bf 92       	push	r11
     fb2:	cf 92       	push	r12
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	a0 91 0f 03 	lds	r26, 0x030F
     fde:	b0 91 10 03 	lds	r27, 0x0310
     fe2:	0d b6       	in	r0, 0x3d	; 61
     fe4:	0d 92       	st	X+, r0
     fe6:	0e b6       	in	r0, 0x3e	; 62
     fe8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     fea:	0e 94 0b 10 	call	0x2016	; 0x2016 <vTaskIncrementTick>
	vTaskSwitchContext();
     fee:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ff2:	a0 91 0f 03 	lds	r26, 0x030F
     ff6:	b0 91 10 03 	lds	r27, 0x0310
     ffa:	cd 91       	ld	r28, X+
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	dd 91       	ld	r29, X+
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	7f 90       	pop	r7
    1034:	6f 90       	pop	r6
    1036:	5f 90       	pop	r5
    1038:	4f 90       	pop	r4
    103a:	3f 90       	pop	r3
    103c:	2f 90       	pop	r2
    103e:	1f 90       	pop	r1
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1046:	08 95       	ret

00001048 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <prvSetupTimerInterrupt+0x6>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <prvSetupTimerInterrupt+0x8>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <prvSetupTimerInterrupt+0xa>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1056:	80 e4       	ldi	r24, 0x40	; 64
    1058:	9f e1       	ldi	r25, 0x1F	; 31
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	ad 83       	std	Y+5, r26	; 0x05
    1064:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	ad 81       	ldd	r26, Y+5	; 0x05
    106c:	be 81       	ldd	r27, Y+6	; 0x06
    106e:	68 94       	set
    1070:	15 f8       	bld	r1, 5
    1072:	b6 95       	lsr	r27
    1074:	a7 95       	ror	r26
    1076:	97 95       	ror	r25
    1078:	87 95       	ror	r24
    107a:	16 94       	lsr	r1
    107c:	d1 f7       	brne	.-12     	; 0x1072 <prvSetupTimerInterrupt+0x2a>
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	ad 83       	std	Y+5, r26	; 0x05
    1084:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	ad 81       	ldd	r26, Y+5	; 0x05
    108c:	be 81       	ldd	r27, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	a1 09       	sbc	r26, r1
    1092:	b1 09       	sbc	r27, r1
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	9c 83       	std	Y+4, r25	; 0x04
    1098:	ad 83       	std	Y+5, r26	; 0x05
    109a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	ad 81       	ldd	r26, Y+5	; 0x05
    10a6:	be 81       	ldd	r27, Y+6	; 0x06
    10a8:	89 2f       	mov	r24, r25
    10aa:	9a 2f       	mov	r25, r26
    10ac:	ab 2f       	mov	r26, r27
    10ae:	bb 27       	eor	r27, r27
    10b0:	8b 83       	std	Y+3, r24	; 0x03
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	ad 83       	std	Y+5, r26	; 0x05
    10b6:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    10bc:	eb e4       	ldi	r30, 0x4B	; 75
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    10c4:	ea e4       	ldi	r30, 0x4A	; 74
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    10cc:	8b e0       	ldi	r24, 0x0B	; 11
    10ce:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    10d0:	ee e4       	ldi	r30, 0x4E	; 78
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    10d8:	e9 e5       	ldi	r30, 0x59	; 89
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	80 61       	ori	r24, 0x10	; 16
    10e4:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    10e6:	e9 e5       	ldi	r30, 0x59	; 89
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	80 83       	st	Z, r24
}
    10ee:	26 96       	adiw	r28, 0x06	; 6
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1100:	0e 94 c9 07 	call	0xf92	; 0xf92 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1104:	18 95       	reti

00001106 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	28 97       	sbiw	r28, 0x08	; 8
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	8f 83       	std	Y+7, r24	; 0x07
    111c:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    111e:	1a 82       	std	Y+2, r1	; 0x02
    1120:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1122:	8f 81       	ldd	r24, Y+7	; 0x07
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <xQueueCreate+0x24>
    1128:	8c c0       	rjmp	.+280    	; 0x1242 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    112a:	8f e1       	ldi	r24, 0x1F	; 31
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 0a 04 	call	0x814	; 0x814 <pvPortMalloc>
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	09 f4       	brne	.+2      	; 0x1140 <xQueueCreate+0x3a>
    113e:	81 c0       	rjmp	.+258    	; 0x1242 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	88 85       	ldd	r24, Y+8	; 0x08
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	ac 01       	movw	r20, r24
    114e:	24 9f       	mul	r18, r20
    1150:	c0 01       	movw	r24, r0
    1152:	25 9f       	mul	r18, r21
    1154:	90 0d       	add	r25, r0
    1156:	34 9f       	mul	r19, r20
    1158:	90 0d       	add	r25, r0
    115a:	11 24       	eor	r1, r1
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	0e 94 0a 04 	call	0x814	; 0x814 <pvPortMalloc>
    116a:	ed 81       	ldd	r30, Y+5	; 0x05
    116c:	fe 81       	ldd	r31, Y+6	; 0x06
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1172:	ed 81       	ldd	r30, Y+5	; 0x05
    1174:	fe 81       	ldd	r31, Y+6	; 0x06
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	09 f4       	brne	.+2      	; 0x1180 <xQueueCreate+0x7a>
    117e:	5d c0       	rjmp	.+186    	; 0x123a <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1180:	ed 81       	ldd	r30, Y+5	; 0x05
    1182:	fe 81       	ldd	r31, Y+6	; 0x06
    1184:	40 81       	ld	r20, Z
    1186:	51 81       	ldd	r21, Z+1	; 0x01
    1188:	8f 81       	ldd	r24, Y+7	; 0x07
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	88 85       	ldd	r24, Y+8	; 0x08
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	bc 01       	movw	r22, r24
    1196:	26 9f       	mul	r18, r22
    1198:	c0 01       	movw	r24, r0
    119a:	27 9f       	mul	r18, r23
    119c:	90 0d       	add	r25, r0
    119e:	36 9f       	mul	r19, r22
    11a0:	90 0d       	add	r25, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	84 0f       	add	r24, r20
    11a6:	95 1f       	adc	r25, r21
    11a8:	ed 81       	ldd	r30, Y+5	; 0x05
    11aa:	fe 81       	ldd	r31, Y+6	; 0x06
    11ac:	93 83       	std	Z+3, r25	; 0x03
    11ae:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    11b0:	ed 81       	ldd	r30, Y+5	; 0x05
    11b2:	fe 81       	ldd	r31, Y+6	; 0x06
    11b4:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	ed 81       	ldd	r30, Y+5	; 0x05
    11c0:	fe 81       	ldd	r31, Y+6	; 0x06
    11c2:	95 83       	std	Z+5, r25	; 0x05
    11c4:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    11c6:	ed 81       	ldd	r30, Y+5	; 0x05
    11c8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ca:	40 81       	ld	r20, Z
    11cc:	51 81       	ldd	r21, Z+1	; 0x01
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 01       	movw	r18, r24
    11d6:	21 50       	subi	r18, 0x01	; 1
    11d8:	30 40       	sbci	r19, 0x00	; 0
    11da:	88 85       	ldd	r24, Y+8	; 0x08
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	bc 01       	movw	r22, r24
    11e2:	26 9f       	mul	r18, r22
    11e4:	c0 01       	movw	r24, r0
    11e6:	27 9f       	mul	r18, r23
    11e8:	90 0d       	add	r25, r0
    11ea:	36 9f       	mul	r19, r22
    11ec:	90 0d       	add	r25, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	84 0f       	add	r24, r20
    11f2:	95 1f       	adc	r25, r21
    11f4:	ed 81       	ldd	r30, Y+5	; 0x05
    11f6:	fe 81       	ldd	r31, Y+6	; 0x06
    11f8:	97 83       	std	Z+7, r25	; 0x07
    11fa:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    11fc:	ed 81       	ldd	r30, Y+5	; 0x05
    11fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1204:	ed 81       	ldd	r30, Y+5	; 0x05
    1206:	fe 81       	ldd	r31, Y+6	; 0x06
    1208:	88 85       	ldd	r24, Y+8	; 0x08
    120a:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    120c:	ed 81       	ldd	r30, Y+5	; 0x05
    120e:	fe 81       	ldd	r31, Y+6	; 0x06
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1214:	ed 81       	ldd	r30, Y+5	; 0x05
    1216:	fe 81       	ldd	r31, Y+6	; 0x06
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	08 96       	adiw	r24, 0x08	; 8
    1222:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	41 96       	adiw	r24, 0x11	; 17
    122c:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1246:	28 96       	adiw	r28, 0x08	; 8
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	2c 97       	sbiw	r28, 0x0c	; 12
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	9e 83       	std	Y+6, r25	; 0x06
    126e:	8d 83       	std	Y+5, r24	; 0x05
    1270:	78 87       	std	Y+8, r23	; 0x08
    1272:	6f 83       	std	Y+7, r22	; 0x07
    1274:	5a 87       	std	Y+10, r21	; 0x0a
    1276:	49 87       	std	Y+9, r20	; 0x09
    1278:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    127a:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1282:	ed 81       	ldd	r30, Y+5	; 0x05
    1284:	fe 81       	ldd	r31, Y+6	; 0x06
    1286:	92 8d       	ldd	r25, Z+26	; 0x1a
    1288:	ed 81       	ldd	r30, Y+5	; 0x05
    128a:	fe 81       	ldd	r31, Y+6	; 0x06
    128c:	83 8d       	ldd	r24, Z+27	; 0x1b
    128e:	98 17       	cp	r25, r24
    1290:	d8 f4       	brcc	.+54     	; 0x12c8 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	2f 81       	ldd	r18, Y+7	; 0x07
    1298:	38 85       	ldd	r19, Y+8	; 0x08
    129a:	b9 01       	movw	r22, r18
    129c:	4b 85       	ldd	r20, Y+11	; 0x0b
    129e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    12a2:	ed 81       	ldd	r30, Y+5	; 0x05
    12a4:	fe 81       	ldd	r31, Y+6	; 0x06
    12a6:	81 89       	ldd	r24, Z+17	; 0x11
    12a8:	88 23       	and	r24, r24
    12aa:	49 f0       	breq	.+18     	; 0x12be <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	41 96       	adiw	r24, 0x11	; 17
    12b2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	11 f4       	brne	.+4      	; 0x12be <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    12ba:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	8c 87       	std	Y+12, r24	; 0x0c
    12c6:	5c c0       	rjmp	.+184    	; 0x1380 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    12c8:	89 85       	ldd	r24, Y+9	; 0x09
    12ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	21 f4       	brne	.+8      	; 0x12d8 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    12d4:	1c 86       	std	Y+12, r1	; 0x0c
    12d6:	54 c0       	rjmp	.+168    	; 0x1380 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	88 23       	and	r24, r24
    12dc:	31 f4       	brne	.+12     	; 0x12ea <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    12de:	ce 01       	movw	r24, r28
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    12ee:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	0f 92       	push	r0
    12f8:	ed 81       	ldd	r30, Y+5	; 0x05
    12fa:	fe 81       	ldd	r31, Y+6	; 0x06
    12fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    12fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1300:	19 f4       	brne	.+6      	; 0x1308 <xQueueGenericSend+0xb0>
    1302:	ed 81       	ldd	r30, Y+5	; 0x05
    1304:	fe 81       	ldd	r31, Y+6	; 0x06
    1306:	15 8e       	std	Z+29, r1	; 0x1d
    1308:	ed 81       	ldd	r30, Y+5	; 0x05
    130a:	fe 81       	ldd	r31, Y+6	; 0x06
    130c:	86 8d       	ldd	r24, Z+30	; 0x1e
    130e:	8f 3f       	cpi	r24, 0xFF	; 255
    1310:	19 f4       	brne	.+6      	; 0x1318 <xQueueGenericSend+0xc0>
    1312:	ed 81       	ldd	r30, Y+5	; 0x05
    1314:	fe 81       	ldd	r31, Y+6	; 0x06
    1316:	16 8e       	std	Z+30, r1	; 0x1e
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    131c:	ce 01       	movw	r24, r28
    131e:	02 96       	adiw	r24, 0x02	; 2
    1320:	9e 01       	movw	r18, r28
    1322:	27 5f       	subi	r18, 0xF7	; 247
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 fd 11 	call	0x23fa	; 0x23fa <xTaskCheckForTimeOut>
    132c:	88 23       	and	r24, r24
    132e:	09 f5       	brne	.+66     	; 0x1372 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	0e 94 cb 0c 	call	0x1996	; 0x1996 <prvIsQueueFull>
    1338:	88 23       	and	r24, r24
    133a:	a1 f0       	breq	.+40     	; 0x1364 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	08 96       	adiw	r24, 0x08	; 8
    1342:	29 85       	ldd	r18, Y+9	; 0x09
    1344:	3a 85       	ldd	r19, Y+10	; 0x0a
    1346:	b9 01       	movw	r22, r18
    1348:	0e 94 46 11 	call	0x228c	; 0x228c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1354:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
    1358:	88 23       	and	r24, r24
    135a:	09 f0       	breq	.+2      	; 0x135e <xQueueGenericSend+0x106>
    135c:	8f cf       	rjmp	.-226    	; 0x127c <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    135e:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
    1362:	8c cf       	rjmp	.-232    	; 0x127c <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    136c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
    1370:	85 cf       	rjmp	.-246    	; 0x127c <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    137a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    137e:	1c 86       	std	Y+12, r1	; 0x0c
    1380:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1382:	2c 96       	adiw	r28, 0x0c	; 12
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	29 97       	sbiw	r28, 0x09	; 9
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	7e 83       	std	Y+6, r23	; 0x06
    13ae:	6d 83       	std	Y+5, r22	; 0x05
    13b0:	58 87       	std	Y+8, r21	; 0x08
    13b2:	4f 83       	std	Y+7, r20	; 0x07
    13b4:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    13b6:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    13b8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ba:	fc 81       	ldd	r31, Y+4	; 0x04
    13bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    13be:	eb 81       	ldd	r30, Y+3	; 0x03
    13c0:	fc 81       	ldd	r31, Y+4	; 0x04
    13c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    13c4:	98 17       	cp	r25, r24
    13c6:	40 f5       	brcc	.+80     	; 0x1418 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	2d 81       	ldd	r18, Y+5	; 0x05
    13ce:	3e 81       	ldd	r19, Y+6	; 0x06
    13d0:	b9 01       	movw	r22, r18
    13d2:	49 85       	ldd	r20, Y+9	; 0x09
    13d4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    13d8:	eb 81       	ldd	r30, Y+3	; 0x03
    13da:	fc 81       	ldd	r31, Y+4	; 0x04
    13dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	89 f4       	brne	.+34     	; 0x1404 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13e2:	eb 81       	ldd	r30, Y+3	; 0x03
    13e4:	fc 81       	ldd	r31, Y+4	; 0x04
    13e6:	81 89       	ldd	r24, Z+17	; 0x11
    13e8:	88 23       	and	r24, r24
    13ea:	99 f0       	breq	.+38     	; 0x1412 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	41 96       	adiw	r24, 0x11	; 17
    13f2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    13f6:	88 23       	and	r24, r24
    13f8:	61 f0       	breq	.+24     	; 0x1412 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    13fa:	ef 81       	ldd	r30, Y+7	; 0x07
    13fc:	f8 85       	ldd	r31, Y+8	; 0x08
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 83       	st	Z, r24
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1404:	eb 81       	ldd	r30, Y+3	; 0x03
    1406:	fc 81       	ldd	r31, Y+4	; 0x04
    1408:	86 8d       	ldd	r24, Z+30	; 0x1e
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	eb 81       	ldd	r30, Y+3	; 0x03
    140e:	fc 81       	ldd	r31, Y+4	; 0x04
    1410:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	8a 83       	std	Y+2, r24	; 0x02
    1416:	01 c0       	rjmp	.+2      	; 0x141a <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1418:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    141c:	29 96       	adiw	r28, 0x09	; 9
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	2e 97       	sbiw	r28, 0x0e	; 14
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	98 87       	std	Y+8, r25	; 0x08
    1444:	8f 83       	std	Y+7, r24	; 0x07
    1446:	7a 87       	std	Y+10, r23	; 0x0a
    1448:	69 87       	std	Y+9, r22	; 0x09
    144a:	5c 87       	std	Y+12, r21	; 0x0c
    144c:	4b 87       	std	Y+11, r20	; 0x0b
    144e:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1450:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1458:	ef 81       	ldd	r30, Y+7	; 0x07
    145a:	f8 85       	ldd	r31, Y+8	; 0x08
    145c:	82 8d       	ldd	r24, Z+26	; 0x1a
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <xQueueGenericReceive+0x36>
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1464:	ef 81       	ldd	r30, Y+7	; 0x07
    1466:	f8 85       	ldd	r31, Y+8	; 0x08
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	97 81       	ldd	r25, Z+7	; 0x07
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1470:	8f 81       	ldd	r24, Y+7	; 0x07
    1472:	98 85       	ldd	r25, Y+8	; 0x08
    1474:	29 85       	ldd	r18, Y+9	; 0x09
    1476:	3a 85       	ldd	r19, Y+10	; 0x0a
    1478:	b9 01       	movw	r22, r18
    147a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    147e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1480:	88 23       	and	r24, r24
    1482:	b1 f4       	brne	.+44     	; 0x14b0 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1484:	ef 81       	ldd	r30, Y+7	; 0x07
    1486:	f8 85       	ldd	r31, Y+8	; 0x08
    1488:	82 8d       	ldd	r24, Z+26	; 0x1a
    148a:	81 50       	subi	r24, 0x01	; 1
    148c:	ef 81       	ldd	r30, Y+7	; 0x07
    148e:	f8 85       	ldd	r31, Y+8	; 0x08
    1490:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1492:	ef 81       	ldd	r30, Y+7	; 0x07
    1494:	f8 85       	ldd	r31, Y+8	; 0x08
    1496:	80 85       	ldd	r24, Z+8	; 0x08
    1498:	88 23       	and	r24, r24
    149a:	f1 f0       	breq	.+60     	; 0x14d8 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    149c:	8f 81       	ldd	r24, Y+7	; 0x07
    149e:	98 85       	ldd	r25, Y+8	; 0x08
    14a0:	08 96       	adiw	r24, 0x08	; 8
    14a2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	b9 f4       	brne	.+46     	; 0x14d8 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    14aa:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    14b0:	ef 81       	ldd	r30, Y+7	; 0x07
    14b2:	f8 85       	ldd	r31, Y+8	; 0x08
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	97 83       	std	Z+7, r25	; 0x07
    14ba:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    14bc:	ef 81       	ldd	r30, Y+7	; 0x07
    14be:	f8 85       	ldd	r31, Y+8	; 0x08
    14c0:	81 89       	ldd	r24, Z+17	; 0x11
    14c2:	88 23       	and	r24, r24
    14c4:	49 f0       	breq	.+18     	; 0x14d8 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    14c6:	8f 81       	ldd	r24, Y+7	; 0x07
    14c8:	98 85       	ldd	r25, Y+8	; 0x08
    14ca:	41 96       	adiw	r24, 0x11	; 17
    14cc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    14d0:	88 23       	and	r24, r24
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    14d4:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	8e 87       	std	Y+14, r24	; 0x0e
    14e0:	5c c0       	rjmp	.+184    	; 0x159a <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    14e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    14ee:	1e 86       	std	Y+14, r1	; 0x0e
    14f0:	54 c0       	rjmp	.+168    	; 0x159a <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	88 23       	and	r24, r24
    14f6:	31 f4       	brne	.+12     	; 0x1504 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    14f8:	ce 01       	movw	r24, r28
    14fa:	04 96       	adiw	r24, 0x04	; 4
    14fc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1508:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	0f 92       	push	r0
    1512:	ef 81       	ldd	r30, Y+7	; 0x07
    1514:	f8 85       	ldd	r31, Y+8	; 0x08
    1516:	85 8d       	ldd	r24, Z+29	; 0x1d
    1518:	8f 3f       	cpi	r24, 0xFF	; 255
    151a:	19 f4       	brne	.+6      	; 0x1522 <xQueueGenericReceive+0xf4>
    151c:	ef 81       	ldd	r30, Y+7	; 0x07
    151e:	f8 85       	ldd	r31, Y+8	; 0x08
    1520:	15 8e       	std	Z+29, r1	; 0x1d
    1522:	ef 81       	ldd	r30, Y+7	; 0x07
    1524:	f8 85       	ldd	r31, Y+8	; 0x08
    1526:	86 8d       	ldd	r24, Z+30	; 0x1e
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	19 f4       	brne	.+6      	; 0x1532 <xQueueGenericReceive+0x104>
    152c:	ef 81       	ldd	r30, Y+7	; 0x07
    152e:	f8 85       	ldd	r31, Y+8	; 0x08
    1530:	16 8e       	std	Z+30, r1	; 0x1e
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1536:	ce 01       	movw	r24, r28
    1538:	04 96       	adiw	r24, 0x04	; 4
    153a:	9e 01       	movw	r18, r28
    153c:	25 5f       	subi	r18, 0xF5	; 245
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	b9 01       	movw	r22, r18
    1542:	0e 94 fd 11 	call	0x23fa	; 0x23fa <xTaskCheckForTimeOut>
    1546:	88 23       	and	r24, r24
    1548:	09 f5       	brne	.+66     	; 0x158c <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	98 85       	ldd	r25, Y+8	; 0x08
    154e:	0e 94 98 0c 	call	0x1930	; 0x1930 <prvIsQueueEmpty>
    1552:	88 23       	and	r24, r24
    1554:	a1 f0       	breq	.+40     	; 0x157e <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	41 96       	adiw	r24, 0x11	; 17
    155c:	2b 85       	ldd	r18, Y+11	; 0x0b
    155e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1560:	b9 01       	movw	r22, r18
    1562:	0e 94 46 11 	call	0x228c	; 0x228c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1566:	8f 81       	ldd	r24, Y+7	; 0x07
    1568:	98 85       	ldd	r25, Y+8	; 0x08
    156a:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    156e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
    1572:	88 23       	and	r24, r24
    1574:	09 f0       	breq	.+2      	; 0x1578 <xQueueGenericReceive+0x14a>
    1576:	6d cf       	rjmp	.-294    	; 0x1452 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1578:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
    157c:	6a cf       	rjmp	.-300    	; 0x1452 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    157e:	8f 81       	ldd	r24, Y+7	; 0x07
    1580:	98 85       	ldd	r25, Y+8	; 0x08
    1582:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1586:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
    158a:	63 cf       	rjmp	.-314    	; 0x1452 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1594:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1598:	1e 86       	std	Y+14, r1	; 0x0e
    159a:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    159c:	2e 96       	adiw	r28, 0x0e	; 14
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	28 97       	sbiw	r28, 0x08	; 8
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	9c 83       	std	Y+4, r25	; 0x04
    15c4:	8b 83       	std	Y+3, r24	; 0x03
    15c6:	7e 83       	std	Y+6, r23	; 0x06
    15c8:	6d 83       	std	Y+5, r22	; 0x05
    15ca:	58 87       	std	Y+8, r21	; 0x08
    15cc:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    15ce:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    15d0:	eb 81       	ldd	r30, Y+3	; 0x03
    15d2:	fc 81       	ldd	r31, Y+4	; 0x04
    15d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    15d6:	88 23       	and	r24, r24
    15d8:	71 f1       	breq	.+92     	; 0x1636 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	2d 81       	ldd	r18, Y+5	; 0x05
    15e0:	3e 81       	ldd	r19, Y+6	; 0x06
    15e2:	b9 01       	movw	r22, r18
    15e4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	eb 81       	ldd	r30, Y+3	; 0x03
    15f2:	fc 81       	ldd	r31, Y+4	; 0x04
    15f4:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    15f6:	eb 81       	ldd	r30, Y+3	; 0x03
    15f8:	fc 81       	ldd	r31, Y+4	; 0x04
    15fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    15fc:	8f 3f       	cpi	r24, 0xFF	; 255
    15fe:	89 f4       	brne	.+34     	; 0x1622 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	80 85       	ldd	r24, Z+8	; 0x08
    1606:	88 23       	and	r24, r24
    1608:	99 f0       	breq	.+38     	; 0x1630 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	08 96       	adiw	r24, 0x08	; 8
    1610:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    1614:	88 23       	and	r24, r24
    1616:	61 f0       	breq	.+24     	; 0x1630 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1618:	ef 81       	ldd	r30, Y+7	; 0x07
    161a:	f8 85       	ldd	r31, Y+8	; 0x08
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 83       	st	Z, r24
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	85 8d       	ldd	r24, Z+29	; 0x1d
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	eb 81       	ldd	r30, Y+3	; 0x03
    162c:	fc 81       	ldd	r31, Y+4	; 0x04
    162e:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1636:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
}
    163a:	28 96       	adiw	r28, 0x08	; 8
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <uxQueueMessagesWaiting+0x6>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	9b 83       	std	Y+3, r25	; 0x03
    165a:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1662:	ea 81       	ldd	r30, Y+2	; 0x02
    1664:	fb 81       	ldd	r31, Y+3	; 0x03
    1666:	82 8d       	ldd	r24, Z+26	; 0x1a
    1668:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <uxQueueMessagesWaitingFromISR+0x6>
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9b 83       	std	Y+3, r25	; 0x03
    168a:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    168c:	ea 81       	ldd	r30, Y+2	; 0x02
    168e:	fb 81       	ldd	r31, Y+3	; 0x03
    1690:	82 8d       	ldd	r24, Z+26	; 0x1a
    1692:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <vQueueDelete+0x6>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vPortFree>
	vPortFree( pxQueue );
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vPortFree>
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <prvCopyDataToQueue+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <prvCopyDataToQueue+0x8>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	7c 83       	std	Y+4, r23	; 0x04
    16e2:	6b 83       	std	Y+3, r22	; 0x03
    16e4:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    16e6:	e9 81       	ldd	r30, Y+1	; 0x01
    16e8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    16ec:	88 23       	and	r24, r24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <prvCopyDataToQueue+0x24>
    16f0:	74 c0       	rjmp	.+232    	; 0x17da <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	88 23       	and	r24, r24
    16f6:	99 f5       	brne	.+102    	; 0x175e <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    16f8:	e9 81       	ldd	r30, Y+1	; 0x01
    16fa:	fa 81       	ldd	r31, Y+2	; 0x02
    16fc:	64 81       	ldd	r22, Z+4	; 0x04
    16fe:	75 81       	ldd	r23, Z+5	; 0x05
    1700:	e9 81       	ldd	r30, Y+1	; 0x01
    1702:	fa 81       	ldd	r31, Y+2	; 0x02
    1704:	84 8d       	ldd	r24, Z+28	; 0x1c
    1706:	48 2f       	mov	r20, r24
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	cb 01       	movw	r24, r22
    1710:	b9 01       	movw	r22, r18
    1712:	0e 94 ef 13 	call	0x27de	; 0x27de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	24 81       	ldd	r18, Z+4	; 0x04
    171c:	35 81       	ldd	r19, Z+5	; 0x05
    171e:	e9 81       	ldd	r30, Y+1	; 0x01
    1720:	fa 81       	ldd	r31, Y+2	; 0x02
    1722:	84 8d       	ldd	r24, Z+28	; 0x1c
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	82 0f       	add	r24, r18
    172a:	93 1f       	adc	r25, r19
    172c:	e9 81       	ldd	r30, Y+1	; 0x01
    172e:	fa 81       	ldd	r31, Y+2	; 0x02
    1730:	95 83       	std	Z+5, r25	; 0x05
    1732:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	24 81       	ldd	r18, Z+4	; 0x04
    173a:	35 81       	ldd	r19, Z+5	; 0x05
    173c:	e9 81       	ldd	r30, Y+1	; 0x01
    173e:	fa 81       	ldd	r31, Y+2	; 0x02
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	28 17       	cp	r18, r24
    1746:	39 07       	cpc	r19, r25
    1748:	08 f4       	brcc	.+2      	; 0x174c <prvCopyDataToQueue+0x7e>
    174a:	47 c0       	rjmp	.+142    	; 0x17da <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	95 83       	std	Z+5, r25	; 0x05
    175a:	84 83       	std	Z+4, r24	; 0x04
    175c:	3e c0       	rjmp	.+124    	; 0x17da <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    175e:	e9 81       	ldd	r30, Y+1	; 0x01
    1760:	fa 81       	ldd	r31, Y+2	; 0x02
    1762:	66 81       	ldd	r22, Z+6	; 0x06
    1764:	77 81       	ldd	r23, Z+7	; 0x07
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	84 8d       	ldd	r24, Z+28	; 0x1c
    176c:	48 2f       	mov	r20, r24
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	3c 81       	ldd	r19, Y+4	; 0x04
    1774:	cb 01       	movw	r24, r22
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 ef 13 	call	0x27de	; 0x27de <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    177c:	e9 81       	ldd	r30, Y+1	; 0x01
    177e:	fa 81       	ldd	r31, Y+2	; 0x02
    1780:	26 81       	ldd	r18, Z+6	; 0x06
    1782:	37 81       	ldd	r19, Z+7	; 0x07
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	84 8d       	ldd	r24, Z+28	; 0x1c
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	90 95       	com	r25
    1790:	81 95       	neg	r24
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	82 0f       	add	r24, r18
    1796:	93 1f       	adc	r25, r19
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	97 83       	std	Z+7, r25	; 0x07
    179e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	26 81       	ldd	r18, Z+6	; 0x06
    17a6:	37 81       	ldd	r19, Z+7	; 0x07
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	28 17       	cp	r18, r24
    17b2:	39 07       	cpc	r19, r25
    17b4:	90 f4       	brcc	.+36     	; 0x17da <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    17b6:	e9 81       	ldd	r30, Y+1	; 0x01
    17b8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ba:	22 81       	ldd	r18, Z+2	; 0x02
    17bc:	33 81       	ldd	r19, Z+3	; 0x03
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	90 95       	com	r25
    17ca:	81 95       	neg	r24
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	82 0f       	add	r24, r18
    17d0:	93 1f       	adc	r25, r19
    17d2:	e9 81       	ldd	r30, Y+1	; 0x01
    17d4:	fa 81       	ldd	r31, Y+2	; 0x02
    17d6:	97 83       	std	Z+7, r25	; 0x07
    17d8:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    17da:	e9 81       	ldd	r30, Y+1	; 0x01
    17dc:	fa 81       	ldd	r31, Y+2	; 0x02
    17de:	82 8d       	ldd	r24, Z+26	; 0x1a
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	82 8f       	std	Z+26, r24	; 0x1a
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <prvCopyDataFromQueue+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <prvCopyDataFromQueue+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	7c 83       	std	Y+4, r23	; 0x04
    180a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    180c:	e9 81       	ldd	r30, Y+1	; 0x01
    180e:	fa 81       	ldd	r31, Y+2	; 0x02
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	89 f1       	breq	.+98     	; 0x187a <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1818:	e9 81       	ldd	r30, Y+1	; 0x01
    181a:	fa 81       	ldd	r31, Y+2	; 0x02
    181c:	26 81       	ldd	r18, Z+6	; 0x06
    181e:	37 81       	ldd	r19, Z+7	; 0x07
    1820:	e9 81       	ldd	r30, Y+1	; 0x01
    1822:	fa 81       	ldd	r31, Y+2	; 0x02
    1824:	84 8d       	ldd	r24, Z+28	; 0x1c
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	82 0f       	add	r24, r18
    182c:	93 1f       	adc	r25, r19
    182e:	e9 81       	ldd	r30, Y+1	; 0x01
    1830:	fa 81       	ldd	r31, Y+2	; 0x02
    1832:	97 83       	std	Z+7, r25	; 0x07
    1834:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	26 81       	ldd	r18, Z+6	; 0x06
    183c:	37 81       	ldd	r19, Z+7	; 0x07
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	28 17       	cp	r18, r24
    1848:	39 07       	cpc	r19, r25
    184a:	40 f0       	brcs	.+16     	; 0x185c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    184c:	e9 81       	ldd	r30, Y+1	; 0x01
    184e:	fa 81       	ldd	r31, Y+2	; 0x02
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	e9 81       	ldd	r30, Y+1	; 0x01
    1856:	fa 81       	ldd	r31, Y+2	; 0x02
    1858:	97 83       	std	Z+7, r25	; 0x07
    185a:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    185c:	e9 81       	ldd	r30, Y+1	; 0x01
    185e:	fa 81       	ldd	r31, Y+2	; 0x02
    1860:	46 81       	ldd	r20, Z+6	; 0x06
    1862:	57 81       	ldd	r21, Z+7	; 0x07
    1864:	e9 81       	ldd	r30, Y+1	; 0x01
    1866:	fa 81       	ldd	r31, Y+2	; 0x02
    1868:	84 8d       	ldd	r24, Z+28	; 0x1c
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	ba 01       	movw	r22, r20
    1874:	a9 01       	movw	r20, r18
    1876:	0e 94 ef 13 	call	0x27de	; 0x27de <memcpy>
	}
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <prvUnlockQueue+0x6>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	0f 92       	push	r0
    189c:	15 c0       	rjmp	.+42     	; 0x18c8 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    189e:	e9 81       	ldd	r30, Y+1	; 0x01
    18a0:	fa 81       	ldd	r31, Y+2	; 0x02
    18a2:	81 89       	ldd	r24, Z+17	; 0x11
    18a4:	88 23       	and	r24, r24
    18a6:	a9 f0       	breq	.+42     	; 0x18d2 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	41 96       	adiw	r24, 0x11	; 17
    18ae:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    18b2:	88 23       	and	r24, r24
    18b4:	11 f0       	breq	.+4      	; 0x18ba <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    18b6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	86 8d       	ldd	r24, Z+30	; 0x1e
    18c0:	81 50       	subi	r24, 0x01	; 1
    18c2:	e9 81       	ldd	r30, Y+1	; 0x01
    18c4:	fa 81       	ldd	r31, Y+2	; 0x02
    18c6:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    18c8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ca:	fa 81       	ldd	r31, Y+2	; 0x02
    18cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    18ce:	18 16       	cp	r1, r24
    18d0:	34 f3       	brlt	.-52     	; 0x189e <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    18d2:	e9 81       	ldd	r30, Y+1	; 0x01
    18d4:	fa 81       	ldd	r31, Y+2	; 0x02
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	0f 92       	push	r0
    18e4:	15 c0       	rjmp	.+42     	; 0x1910 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	80 85       	ldd	r24, Z+8	; 0x08
    18ec:	88 23       	and	r24, r24
    18ee:	a9 f0       	breq	.+42     	; 0x191a <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	08 96       	adiw	r24, 0x08	; 8
    18f6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskRemoveFromEventList>
    18fa:	88 23       	and	r24, r24
    18fc:	11 f0       	breq	.+4      	; 0x1902 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    18fe:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1902:	e9 81       	ldd	r30, Y+1	; 0x01
    1904:	fa 81       	ldd	r31, Y+2	; 0x02
    1906:	85 8d       	ldd	r24, Z+29	; 0x1d
    1908:	81 50       	subi	r24, 0x01	; 1
    190a:	e9 81       	ldd	r30, Y+1	; 0x01
    190c:	fa 81       	ldd	r31, Y+2	; 0x02
    190e:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	85 8d       	ldd	r24, Z+29	; 0x1d
    1916:	18 16       	cp	r1, r24
    1918:	34 f3       	brlt	.-52     	; 0x18e6 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <prvIsQueueEmpty+0x6>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	9b 83       	std	Y+3, r25	; 0x03
    193e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1946:	ea 81       	ldd	r30, Y+2	; 0x02
    1948:	fb 81       	ldd	r31, Y+3	; 0x03
    194a:	82 8d       	ldd	r24, Z+26	; 0x1a
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	88 23       	and	r24, r24
    1950:	11 f4       	brne	.+4      	; 0x1956 <prvIsQueueEmpty+0x26>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <xQueueIsQueueEmptyFromISR+0x6>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	9b 83       	std	Y+3, r25	; 0x03
    1976:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1978:	ea 81       	ldd	r30, Y+2	; 0x02
    197a:	fb 81       	ldd	r31, Y+3	; 0x03
    197c:	82 8d       	ldd	r24, Z+26	; 0x1a
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	88 23       	and	r24, r24
    1982:	11 f4       	brne	.+4      	; 0x1988 <xQueueIsQueueEmptyFromISR+0x20>
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <prvIsQueueFull+0x6>
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9b 83       	std	Y+3, r25	; 0x03
    19a4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    19ac:	ea 81       	ldd	r30, Y+2	; 0x02
    19ae:	fb 81       	ldd	r31, Y+3	; 0x03
    19b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19b2:	ea 81       	ldd	r30, Y+2	; 0x02
    19b4:	fb 81       	ldd	r31, Y+3	; 0x03
    19b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    19b8:	19 82       	std	Y+1, r1	; 0x01
    19ba:	98 17       	cp	r25, r24
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <prvIsQueueFull+0x2c>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    19c2:	0f 90       	pop	r0
    19c4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <xQueueIsQueueFullFromISR+0x6>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    19e4:	ea 81       	ldd	r30, Y+2	; 0x02
    19e6:	fb 81       	ldd	r31, Y+3	; 0x03
    19e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    19ea:	ea 81       	ldd	r30, Y+2	; 0x02
    19ec:	fb 81       	ldd	r31, Y+3	; 0x03
    19ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    19f0:	19 82       	std	Y+1, r1	; 0x01
    19f2:	98 17       	cp	r25, r24
    19f4:	11 f4       	brne	.+4      	; 0x19fa <xQueueIsQueueFullFromISR+0x26>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	64 97       	sbiw	r28, 0x14	; 20
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	9f 83       	std	Y+7, r25	; 0x07
    1a2e:	8e 83       	std	Y+6, r24	; 0x06
    1a30:	79 87       	std	Y+9, r23	; 0x09
    1a32:	68 87       	std	Y+8, r22	; 0x08
    1a34:	5b 87       	std	Y+11, r21	; 0x0b
    1a36:	4a 87       	std	Y+10, r20	; 0x0a
    1a38:	3d 87       	std	Y+13, r19	; 0x0d
    1a3a:	2c 87       	std	Y+12, r18	; 0x0c
    1a3c:	0e 87       	std	Y+14, r16	; 0x0e
    1a3e:	f8 8a       	std	Y+16, r15	; 0x10
    1a40:	ef 86       	std	Y+15, r14	; 0x0f
    1a42:	da 8a       	std	Y+18, r13	; 0x12
    1a44:	c9 8a       	std	Y+17, r12	; 0x11
    1a46:	bc 8a       	std	Y+20, r11	; 0x14
    1a48:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1a4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a4e:	29 89       	ldd	r18, Y+17	; 0x11
    1a50:	3a 89       	ldd	r19, Y+18	; 0x12
    1a52:	b9 01       	movw	r22, r18
    1a54:	0e 94 89 13 	call	0x2712	; 0x2712 <prvAllocateTCBAndStack>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <xTaskGenericCreate+0x5e>
    1a64:	99 c0       	rjmp	.+306    	; 0x1b98 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1a66:	eb 81       	ldd	r30, Y+3	; 0x03
    1a68:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6a:	27 89       	ldd	r18, Z+23	; 0x17
    1a6c:	30 8d       	ldd	r19, Z+24	; 0x18
    1a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	82 0f       	add	r24, r18
    1a76:	93 1f       	adc	r25, r19
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	28 85       	ldd	r18, Y+8	; 0x08
    1a82:	39 85       	ldd	r19, Y+9	; 0x09
    1a84:	eb 89       	ldd	r30, Y+19	; 0x13
    1a86:	fc 89       	ldd	r31, Y+20	; 0x14
    1a88:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a8a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a8c:	b9 01       	movw	r22, r18
    1a8e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a90:	9f 01       	movw	r18, r30
    1a92:	8d 01       	movw	r16, r26
    1a94:	0e 94 6e 12 	call	0x24dc	; 0x24dc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1aa2:	5d 85       	ldd	r21, Y+13	; 0x0d
    1aa4:	b9 01       	movw	r22, r18
    1aa6:	0e 94 b1 05 	call	0xb62	; 0xb62 <pxPortInitialiseStack>
    1aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1aac:	fc 81       	ldd	r31, Y+4	; 0x04
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab4:	98 89       	ldd	r25, Y+16	; 0x10
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1aba:	ef 85       	ldd	r30, Y+15	; 0x0f
    1abc:	f8 89       	ldd	r31, Y+16	; 0x10
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1acc:	80 91 12 03 	lds	r24, 0x0312
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 93 12 03 	sts	0x0312, r24
			if( pxCurrentTCB == NULL )
    1ad6:	80 91 0f 03 	lds	r24, 0x030F
    1ada:	90 91 10 03 	lds	r25, 0x0310
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f4       	brne	.+26     	; 0x1afc <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	90 93 10 03 	sts	0x0310, r25
    1aea:	80 93 0f 03 	sts	0x030F, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1aee:	80 91 12 03 	lds	r24, 0x0312
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	a9 f4       	brne	.+42     	; 0x1b20 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1af6:	0e 94 c5 12 	call	0x258a	; 0x258a <prvInitialiseTaskLists>
    1afa:	12 c0       	rjmp	.+36     	; 0x1b20 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1afc:	80 91 17 03 	lds	r24, 0x0317
    1b00:	88 23       	and	r24, r24
    1b02:	71 f4       	brne	.+28     	; 0x1b20 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1b04:	e0 91 0f 03 	lds	r30, 0x030F
    1b08:	f0 91 10 03 	lds	r31, 0x0310
    1b0c:	96 89       	ldd	r25, Z+22	; 0x16
    1b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b10:	89 17       	cp	r24, r25
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	90 93 10 03 	sts	0x0310, r25
    1b1c:	80 93 0f 03 	sts	0x030F, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1b20:	eb 81       	ldd	r30, Y+3	; 0x03
    1b22:	fc 81       	ldd	r31, Y+4	; 0x04
    1b24:	96 89       	ldd	r25, Z+22	; 0x16
    1b26:	80 91 15 03 	lds	r24, 0x0315
    1b2a:	89 17       	cp	r24, r25
    1b2c:	28 f4       	brcc	.+10     	; 0x1b38 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b30:	fc 81       	ldd	r31, Y+4	; 0x04
    1b32:	86 89       	ldd	r24, Z+22	; 0x16
    1b34:	80 93 15 03 	sts	0x0315, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1b38:	80 91 1c 03 	lds	r24, 0x031C
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	80 93 1c 03 	sts	0x031C, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    1b42:	eb 81       	ldd	r30, Y+3	; 0x03
    1b44:	fc 81       	ldd	r31, Y+4	; 0x04
    1b46:	96 89       	ldd	r25, Z+22	; 0x16
    1b48:	80 91 16 03 	lds	r24, 0x0316
    1b4c:	89 17       	cp	r24, r25
    1b4e:	28 f4       	brcc	.+10     	; 0x1b5a <xTaskGenericCreate+0x152>
    1b50:	eb 81       	ldd	r30, Y+3	; 0x03
    1b52:	fc 81       	ldd	r31, Y+4	; 0x04
    1b54:	86 89       	ldd	r24, Z+22	; 0x16
    1b56:	80 93 16 03 	sts	0x0316, r24
    1b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5e:	86 89       	ldd	r24, Z+22	; 0x16
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	c9 01       	movw	r24, r18
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	82 0f       	add	r24, r18
    1b74:	93 1f       	adc	r25, r19
    1b76:	ac 01       	movw	r20, r24
    1b78:	43 5e       	subi	r20, 0xE3	; 227
    1b7a:	5c 4f       	sbci	r21, 0xFC	; 252
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	9c 01       	movw	r18, r24
    1b82:	2e 5f       	subi	r18, 0xFE	; 254
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	ca 01       	movw	r24, r20
    1b88:	b9 01       	movw	r22, r18
    1b8a:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>

			xReturn = pdPASS;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	71 f4       	brne	.+28     	; 0x1bbe <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    1ba2:	80 91 17 03 	lds	r24, 0x0317
    1ba6:	88 23       	and	r24, r24
    1ba8:	51 f0       	breq	.+20     	; 0x1bbe <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1baa:	e0 91 0f 03 	lds	r30, 0x030F
    1bae:	f0 91 10 03 	lds	r31, 0x0310
    1bb2:	96 89       	ldd	r25, Z+22	; 0x16
    1bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bb6:	98 17       	cp	r25, r24
    1bb8:	10 f4       	brcc	.+4      	; 0x1bbe <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    1bba:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
			}
		}
	}

	return xReturn;
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bc0:	64 96       	adiw	r28, 0x14	; 20
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	df 90       	pop	r13
    1bda:	cf 90       	pop	r12
    1bdc:	bf 90       	pop	r11
    1bde:	af 90       	pop	r10
    1be0:	08 95       	ret

00001be2 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <vTaskDelete+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <vTaskDelete+0x8>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <vTaskDelete+0xa>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1bfa:	20 91 0f 03 	lds	r18, 0x030F
    1bfe:	30 91 10 03 	lds	r19, 0x0310
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	82 17       	cp	r24, r18
    1c08:	93 07       	cpc	r25, r19
    1c0a:	11 f4       	brne	.+4      	; 0x1c10 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    1c0c:	1c 82       	std	Y+4, r1	; 0x04
    1c0e:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	39 f4       	brne	.+14     	; 0x1c26 <vTaskDelete+0x44>
    1c18:	80 91 0f 03 	lds	r24, 0x030F
    1c1c:	90 91 10 03 	lds	r25, 0x0310
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <vTaskDelete+0x4c>
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	02 96       	adiw	r24, 0x02	; 2
    1c3c:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	84 89       	ldd	r24, Z+20	; 0x14
    1c46:	95 89       	ldd	r25, Z+21	; 0x15
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	29 f0       	breq	.+10     	; 0x1c56 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	0c 96       	adiw	r24, 0x0c	; 12
    1c52:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	2e 5f       	subi	r18, 0xFE	; 254
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	89 e6       	ldi	r24, 0x69	; 105
    1c62:	93 e0       	ldi	r25, 0x03	; 3
    1c64:	b9 01       	movw	r22, r18
    1c66:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1c6a:	80 91 11 03 	lds	r24, 0x0311
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	80 93 11 03 	sts	0x0311, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1c74:	80 91 1c 03 	lds	r24, 0x031C
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	80 93 1c 03 	sts	0x031C, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1c82:	80 91 17 03 	lds	r24, 0x0317
    1c86:	88 23       	and	r24, r24
    1c88:	31 f0       	breq	.+12     	; 0x1c96 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    1c92:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
			}
		}
	}
    1c96:	26 96       	adiw	r28, 0x06	; 6
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	28 97       	sbiw	r28, 0x08	; 8
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	78 87       	std	Y+8, r23	; 0x08
    1cc2:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1cc4:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1cc6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1cca:	ed 81       	ldd	r30, Y+5	; 0x05
    1ccc:	fe 81       	ldd	r31, Y+6	; 0x06
    1cce:	20 81       	ld	r18, Z
    1cd0:	31 81       	ldd	r19, Z+1	; 0x01
    1cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd4:	98 85       	ldd	r25, Y+8	; 0x08
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    1cde:	ed 81       	ldd	r30, Y+5	; 0x05
    1ce0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ce2:	20 81       	ld	r18, Z
    1ce4:	31 81       	ldd	r19, Z+1	; 0x01
    1ce6:	80 91 13 03 	lds	r24, 0x0313
    1cea:	90 91 14 03 	lds	r25, 0x0314
    1cee:	82 17       	cp	r24, r18
    1cf0:	93 07       	cpc	r25, r19
    1cf2:	a8 f4       	brcc	.+42     	; 0x1d1e <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1cf4:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf6:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	82 17       	cp	r24, r18
    1d02:	93 07       	cpc	r25, r19
    1d04:	00 f5       	brcc	.+64     	; 0x1d46 <vTaskDelayUntil+0x9e>
    1d06:	20 91 13 03 	lds	r18, 0x0313
    1d0a:	30 91 14 03 	lds	r19, 0x0314
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	28 17       	cp	r18, r24
    1d14:	39 07       	cpc	r19, r25
    1d16:	b8 f4       	brcc	.+46     	; 0x1d46 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	14 c0       	rjmp	.+40     	; 0x1d46 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1d1e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d20:	fe 81       	ldd	r31, Y+6	; 0x06
    1d22:	20 81       	ld	r18, Z
    1d24:	31 81       	ldd	r19, Z+1	; 0x01
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2a:	82 17       	cp	r24, r18
    1d2c:	93 07       	cpc	r25, r19
    1d2e:	48 f0       	brcs	.+18     	; 0x1d42 <vTaskDelayUntil+0x9a>
    1d30:	20 91 13 03 	lds	r18, 0x0313
    1d34:	30 91 14 03 	lds	r19, 0x0314
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	28 17       	cp	r18, r24
    1d3e:	39 07       	cpc	r19, r25
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1d46:	ed 81       	ldd	r30, Y+5	; 0x05
    1d48:	fe 81       	ldd	r31, Y+6	; 0x06
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	88 23       	and	r24, r24
    1d56:	59 f0       	breq	.+22     	; 0x1d6e <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d58:	80 91 0f 03 	lds	r24, 0x030F
    1d5c:	90 91 10 03 	lds	r25, 0x0310
    1d60:	02 96       	adiw	r24, 0x02	; 2
    1d62:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	0e 94 40 13 	call	0x2680	; 0x2680 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1d6e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
    1d72:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	88 23       	and	r24, r24
    1d78:	11 f4       	brne	.+4      	; 0x1d7e <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    1d7a:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
		}
	}
    1d7e:	28 96       	adiw	r28, 0x08	; 8
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <vTaskDelay+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <vTaskDelay+0x8>
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	9d 83       	std	Y+5, r25	; 0x05
    1da0:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1da2:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	d1 f0       	breq	.+52     	; 0x1de0 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    1dac:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1db0:	20 91 13 03 	lds	r18, 0x0313
    1db4:	30 91 14 03 	lds	r19, 0x0314
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1dc4:	80 91 0f 03 	lds	r24, 0x030F
    1dc8:	90 91 10 03 	lds	r25, 0x0310
    1dcc:	02 96       	adiw	r24, 0x02	; 2
    1dce:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	0e 94 40 13 	call	0x2680	; 0x2680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1dda:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>
    1dde:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	88 23       	and	r24, r24
    1de4:	11 f4       	brne	.+4      	; 0x1dea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    1de6:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
		}
	}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	0f 92       	push	r0
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1e12:	21 e7       	ldi	r18, 0x71	; 113
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	84 e6       	ldi	r24, 0x64	; 100
    1e18:	92 e1       	ldi	r25, 0x12	; 18
    1e1a:	b9 01       	movw	r22, r18
    1e1c:	45 e5       	ldi	r20, 0x55	; 85
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	ee 24       	eor	r14, r14
    1e28:	ff 24       	eor	r15, r15
    1e2a:	cc 24       	eor	r12, r12
    1e2c:	dd 24       	eor	r13, r13
    1e2e:	aa 24       	eor	r10, r10
    1e30:	bb 24       	eor	r11, r11
    1e32:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <xTaskGenericCreate>
    1e36:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	51 f4       	brne	.+20     	; 0x1e52 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1e3e:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 93 17 03 	sts	0x0317, r24
		xTickCount = ( portTickType ) 0U;
    1e46:	10 92 14 03 	sts	0x0314, r1
    1e4a:	10 92 13 03 	sts	0x0313, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1e4e:	0e 94 34 07 	call	0xe68	; 0xe68 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	08 95       	ret

00001e68 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1e70:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1e72:	10 92 17 03 	sts	0x0317, r1
	vPortEndScheduler();
    1e76:	0e 94 69 07 	call	0xed2	; 0xed2 <vPortEndScheduler>
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1e88:	80 91 18 03 	lds	r24, 0x0318
    1e8c:	8f 5f       	subi	r24, 0xFF	; 255
    1e8e:	80 93 18 03 	sts	0x0318, r24
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <xTaskResumeAll+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <xTaskResumeAll+0x8>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1ea4:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1eac:	80 91 18 03 	lds	r24, 0x0318
    1eb0:	81 50       	subi	r24, 0x01	; 1
    1eb2:	80 93 18 03 	sts	0x0318, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1eb6:	80 91 18 03 	lds	r24, 0x0318
    1eba:	88 23       	and	r24, r24
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <xTaskResumeAll+0x28>
    1ebe:	6c c0       	rjmp	.+216    	; 0x1f98 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1ec0:	80 91 12 03 	lds	r24, 0x0312
    1ec4:	88 23       	and	r24, r24
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <xTaskResumeAll+0x32>
    1ec8:	67 c0       	rjmp	.+206    	; 0x1f98 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1eca:	19 82       	std	Y+1, r1	; 0x01
    1ecc:	41 c0       	rjmp	.+130    	; 0x1f50 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1ece:	e0 91 65 03 	lds	r30, 0x0365
    1ed2:	f0 91 66 03 	lds	r31, 0x0366
    1ed6:	86 81       	ldd	r24, Z+6	; 0x06
    1ed8:	97 81       	ldd	r25, Z+7	; 0x07
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	0c 96       	adiw	r24, 0x0c	; 12
    1ee4:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	02 96       	adiw	r24, 0x02	; 2
    1eee:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef6:	96 89       	ldd	r25, Z+22	; 0x16
    1ef8:	80 91 16 03 	lds	r24, 0x0316
    1efc:	89 17       	cp	r24, r25
    1efe:	28 f4       	brcc	.+10     	; 0x1f0a <xTaskResumeAll+0x72>
    1f00:	eb 81       	ldd	r30, Y+3	; 0x03
    1f02:	fc 81       	ldd	r31, Y+4	; 0x04
    1f04:	86 89       	ldd	r24, Z+22	; 0x16
    1f06:	80 93 16 03 	sts	0x0316, r24
    1f0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0e:	86 89       	ldd	r24, Z+22	; 0x16
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	c9 01       	movw	r24, r18
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	83 5e       	subi	r24, 0xE3	; 227
    1f28:	9c 4f       	sbci	r25, 0xFC	; 252
    1f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2e:	2e 5f       	subi	r18, 0xFE	; 254
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	b9 01       	movw	r22, r18
    1f34:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1f38:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3c:	96 89       	ldd	r25, Z+22	; 0x16
    1f3e:	e0 91 0f 03 	lds	r30, 0x030F
    1f42:	f0 91 10 03 	lds	r31, 0x0310
    1f46:	86 89       	ldd	r24, Z+22	; 0x16
    1f48:	98 17       	cp	r25, r24
    1f4a:	10 f0       	brcs	.+4      	; 0x1f50 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1f50:	80 91 60 03 	lds	r24, 0x0360
    1f54:	88 23       	and	r24, r24
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <xTaskResumeAll+0xc2>
    1f58:	ba cf       	rjmp	.-140    	; 0x1ece <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1f5a:	80 91 19 03 	lds	r24, 0x0319
    1f5e:	88 23       	and	r24, r24
    1f60:	71 f0       	breq	.+28     	; 0x1f7e <xTaskResumeAll+0xe6>
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    1f64:	0e 94 0b 10 	call	0x2016	; 0x2016 <vTaskIncrementTick>
						--uxMissedTicks;
    1f68:	80 91 19 03 	lds	r24, 0x0319
    1f6c:	81 50       	subi	r24, 0x01	; 1
    1f6e:	80 93 19 03 	sts	0x0319, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1f72:	80 91 19 03 	lds	r24, 0x0319
    1f76:	88 23       	and	r24, r24
    1f78:	a9 f7       	brne	.-22     	; 0x1f64 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	21 f0       	breq	.+8      	; 0x1f8c <xTaskResumeAll+0xf4>
    1f84:	80 91 1a 03 	lds	r24, 0x031A
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	31 f4       	brne	.+12     	; 0x1f98 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    1f90:	10 92 1a 03 	sts	0x031A, r1
					portYIELD_WITHIN_API();
    1f94:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <xTaskGetTickCount+0x6>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1fbc:	80 91 13 03 	lds	r24, 0x0313
    1fc0:	90 91 14 03 	lds	r25, 0x0314
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <xTaskGetTickCountFromISR+0x6>
    1fe0:	0f 92       	push	r0
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1fe6:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    1fe8:	80 91 13 03 	lds	r24, 0x0313
    1fec:	90 91 14 03 	lds	r25, 0x0314
    1ff0:	9b 83       	std	Y+3, r25	; 0x03
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    200c:	80 91 12 03 	lds	r24, 0x0312
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <vTaskIncrementTick+0x6>
    201c:	00 d0       	rcall	.+0      	; 0x201e <vTaskIncrementTick+0x8>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <vTaskIncrementTick+0xa>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2024:	80 91 18 03 	lds	r24, 0x0318
    2028:	88 23       	and	r24, r24
    202a:	09 f0       	breq	.+2      	; 0x202e <vTaskIncrementTick+0x18>
    202c:	bb c0       	rjmp	.+374    	; 0x21a4 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    202e:	80 91 13 03 	lds	r24, 0x0313
    2032:	90 91 14 03 	lds	r25, 0x0314
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	90 93 14 03 	sts	0x0314, r25
    203c:	80 93 13 03 	sts	0x0313, r24
		if( xTickCount == ( portTickType ) 0U )
    2040:	80 91 13 03 	lds	r24, 0x0313
    2044:	90 91 14 03 	lds	r25, 0x0314
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	d1 f5       	brne	.+116    	; 0x20c0 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    204c:	80 91 5c 03 	lds	r24, 0x035C
    2050:	90 91 5d 03 	lds	r25, 0x035D
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2058:	80 91 5e 03 	lds	r24, 0x035E
    205c:	90 91 5f 03 	lds	r25, 0x035F
    2060:	90 93 5d 03 	sts	0x035D, r25
    2064:	80 93 5c 03 	sts	0x035C, r24
			pxOverflowDelayedTaskList = pxTemp;
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	90 93 5f 03 	sts	0x035F, r25
    2070:	80 93 5e 03 	sts	0x035E, r24
			xNumOfOverflows++;
    2074:	80 91 1b 03 	lds	r24, 0x031B
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	80 93 1b 03 	sts	0x031B, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    207e:	e0 91 5c 03 	lds	r30, 0x035C
    2082:	f0 91 5d 03 	lds	r31, 0x035D
    2086:	80 81       	ld	r24, Z
    2088:	88 23       	and	r24, r24
    208a:	39 f4       	brne	.+14     	; 0x209a <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	90 93 78 00 	sts	0x0078, r25
    2094:	80 93 77 00 	sts	0x0077, r24
    2098:	13 c0       	rjmp	.+38     	; 0x20c0 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    209a:	e0 91 5c 03 	lds	r30, 0x035C
    209e:	f0 91 5d 03 	lds	r31, 0x035D
    20a2:	05 80       	ldd	r0, Z+5	; 0x05
    20a4:	f6 81       	ldd	r31, Z+6	; 0x06
    20a6:	e0 2d       	mov	r30, r0
    20a8:	86 81       	ldd	r24, Z+6	; 0x06
    20aa:	97 81       	ldd	r25, Z+7	; 0x07
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    20b0:	ed 81       	ldd	r30, Y+5	; 0x05
    20b2:	fe 81       	ldd	r31, Y+6	; 0x06
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	90 93 78 00 	sts	0x0078, r25
    20bc:	80 93 77 00 	sts	0x0077, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    20c0:	20 91 13 03 	lds	r18, 0x0313
    20c4:	30 91 14 03 	lds	r19, 0x0314
    20c8:	80 91 77 00 	lds	r24, 0x0077
    20cc:	90 91 78 00 	lds	r25, 0x0078
    20d0:	28 17       	cp	r18, r24
    20d2:	39 07       	cpc	r19, r25
    20d4:	08 f4       	brcc	.+2      	; 0x20d8 <vTaskIncrementTick+0xc2>
    20d6:	6b c0       	rjmp	.+214    	; 0x21ae <vTaskIncrementTick+0x198>
    20d8:	e0 91 5c 03 	lds	r30, 0x035C
    20dc:	f0 91 5d 03 	lds	r31, 0x035D
    20e0:	80 81       	ld	r24, Z
    20e2:	88 23       	and	r24, r24
    20e4:	39 f4       	brne	.+14     	; 0x20f4 <vTaskIncrementTick+0xde>
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	9f ef       	ldi	r25, 0xFF	; 255
    20ea:	90 93 78 00 	sts	0x0078, r25
    20ee:	80 93 77 00 	sts	0x0077, r24
    20f2:	5d c0       	rjmp	.+186    	; 0x21ae <vTaskIncrementTick+0x198>
    20f4:	e0 91 5c 03 	lds	r30, 0x035C
    20f8:	f0 91 5d 03 	lds	r31, 0x035D
    20fc:	05 80       	ldd	r0, Z+5	; 0x05
    20fe:	f6 81       	ldd	r31, Z+6	; 0x06
    2100:	e0 2d       	mov	r30, r0
    2102:	86 81       	ldd	r24, Z+6	; 0x06
    2104:	97 81       	ldd	r25, Z+7	; 0x07
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	ed 81       	ldd	r30, Y+5	; 0x05
    210c:	fe 81       	ldd	r31, Y+6	; 0x06
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	20 91 13 03 	lds	r18, 0x0313
    211a:	30 91 14 03 	lds	r19, 0x0314
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	28 17       	cp	r18, r24
    2124:	39 07       	cpc	r19, r25
    2126:	38 f4       	brcc	.+14     	; 0x2136 <vTaskIncrementTick+0x120>
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	90 93 78 00 	sts	0x0078, r25
    2130:	80 93 77 00 	sts	0x0077, r24
    2134:	3c c0       	rjmp	.+120    	; 0x21ae <vTaskIncrementTick+0x198>
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	02 96       	adiw	r24, 0x02	; 2
    213c:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
    2140:	ed 81       	ldd	r30, Y+5	; 0x05
    2142:	fe 81       	ldd	r31, Y+6	; 0x06
    2144:	84 89       	ldd	r24, Z+20	; 0x14
    2146:	95 89       	ldd	r25, Z+21	; 0x15
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	29 f0       	breq	.+10     	; 0x2156 <vTaskIncrementTick+0x140>
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	0c 96       	adiw	r24, 0x0c	; 12
    2152:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
    2156:	ed 81       	ldd	r30, Y+5	; 0x05
    2158:	fe 81       	ldd	r31, Y+6	; 0x06
    215a:	96 89       	ldd	r25, Z+22	; 0x16
    215c:	80 91 16 03 	lds	r24, 0x0316
    2160:	89 17       	cp	r24, r25
    2162:	28 f4       	brcc	.+10     	; 0x216e <vTaskIncrementTick+0x158>
    2164:	ed 81       	ldd	r30, Y+5	; 0x05
    2166:	fe 81       	ldd	r31, Y+6	; 0x06
    2168:	86 89       	ldd	r24, Z+22	; 0x16
    216a:	80 93 16 03 	sts	0x0316, r24
    216e:	ed 81       	ldd	r30, Y+5	; 0x05
    2170:	fe 81       	ldd	r31, Y+6	; 0x06
    2172:	86 89       	ldd	r24, Z+22	; 0x16
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	c9 01       	movw	r24, r18
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	82 0f       	add	r24, r18
    2188:	93 1f       	adc	r25, r19
    218a:	ac 01       	movw	r20, r24
    218c:	43 5e       	subi	r20, 0xE3	; 227
    218e:	5c 4f       	sbci	r21, 0xFC	; 252
    2190:	8d 81       	ldd	r24, Y+5	; 0x05
    2192:	9e 81       	ldd	r25, Y+6	; 0x06
    2194:	9c 01       	movw	r18, r24
    2196:	2e 5f       	subi	r18, 0xFE	; 254
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	ca 01       	movw	r24, r20
    219c:	b9 01       	movw	r22, r18
    219e:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>
    21a2:	9a cf       	rjmp	.-204    	; 0x20d8 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    21a4:	80 91 19 03 	lds	r24, 0x0319
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	80 93 19 03 	sts	0x0319, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    21ae:	26 96       	adiw	r28, 0x06	; 6
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <vTaskSwitchContext+0x6>
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    21ca:	80 91 18 03 	lds	r24, 0x0318
    21ce:	88 23       	and	r24, r24
    21d0:	49 f0       	breq	.+18     	; 0x21e4 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	80 93 1a 03 	sts	0x031A, r24
    21d8:	54 c0       	rjmp	.+168    	; 0x2282 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    21da:	80 91 16 03 	lds	r24, 0x0316
    21de:	81 50       	subi	r24, 0x01	; 1
    21e0:	80 93 16 03 	sts	0x0316, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    21e4:	80 91 16 03 	lds	r24, 0x0316
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	c9 01       	movw	r24, r18
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	82 0f       	add	r24, r18
    21fc:	93 1f       	adc	r25, r19
    21fe:	fc 01       	movw	r30, r24
    2200:	e3 5e       	subi	r30, 0xE3	; 227
    2202:	fc 4f       	sbci	r31, 0xFC	; 252
    2204:	80 81       	ld	r24, Z
    2206:	88 23       	and	r24, r24
    2208:	41 f3       	breq	.-48     	; 0x21da <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    220a:	80 91 16 03 	lds	r24, 0x0316
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	c9 01       	movw	r24, r18
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	82 0f       	add	r24, r18
    2222:	93 1f       	adc	r25, r19
    2224:	83 5e       	subi	r24, 0xE3	; 227
    2226:	9c 4f       	sbci	r25, 0xFC	; 252
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	01 80       	ldd	r0, Z+1	; 0x01
    2232:	f2 81       	ldd	r31, Z+2	; 0x02
    2234:	e0 2d       	mov	r30, r0
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	92 83       	std	Z+2, r25	; 0x02
    2240:	81 83       	std	Z+1, r24	; 0x01
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	21 81       	ldd	r18, Z+1	; 0x01
    2248:	32 81       	ldd	r19, Z+2	; 0x02
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	03 96       	adiw	r24, 0x03	; 3
    2250:	28 17       	cp	r18, r24
    2252:	39 07       	cpc	r19, r25
    2254:	59 f4       	brne	.+22     	; 0x226c <vTaskSwitchContext+0xac>
    2256:	e9 81       	ldd	r30, Y+1	; 0x01
    2258:	fa 81       	ldd	r31, Y+2	; 0x02
    225a:	01 80       	ldd	r0, Z+1	; 0x01
    225c:	f2 81       	ldd	r31, Z+2	; 0x02
    225e:	e0 2d       	mov	r30, r0
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	e9 81       	ldd	r30, Y+1	; 0x01
    2266:	fa 81       	ldd	r31, Y+2	; 0x02
    2268:	92 83       	std	Z+2, r25	; 0x02
    226a:	81 83       	std	Z+1, r24	; 0x01
    226c:	e9 81       	ldd	r30, Y+1	; 0x01
    226e:	fa 81       	ldd	r31, Y+2	; 0x02
    2270:	01 80       	ldd	r0, Z+1	; 0x01
    2272:	f2 81       	ldd	r31, Z+2	; 0x02
    2274:	e0 2d       	mov	r30, r0
    2276:	86 81       	ldd	r24, Z+6	; 0x06
    2278:	97 81       	ldd	r25, Z+7	; 0x07
    227a:	90 93 10 03 	sts	0x0310, r25
    227e:	80 93 0f 03 	sts	0x030F, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <vTaskPlaceOnEventList+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <vTaskPlaceOnEventList+0x8>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <vTaskPlaceOnEventList+0xa>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	7e 83       	std	Y+6, r23	; 0x06
    22a0:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    22a2:	4b 81       	ldd	r20, Y+3	; 0x03
    22a4:	5c 81       	ldd	r21, Y+4	; 0x04
    22a6:	80 91 0f 03 	lds	r24, 0x030F
    22aa:	90 91 10 03 	lds	r25, 0x0310
    22ae:	9c 01       	movw	r18, r24
    22b0:	24 5f       	subi	r18, 0xF4	; 244
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	ca 01       	movw	r24, r20
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    22bc:	80 91 0f 03 	lds	r24, 0x030F
    22c0:	90 91 10 03 	lds	r25, 0x0310
    22c4:	02 96       	adiw	r24, 0x02	; 2
    22c6:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    22ca:	20 91 13 03 	lds	r18, 0x0313
    22ce:	30 91 14 03 	lds	r19, 0x0314
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	0e 94 40 13 	call	0x2680	; 0x2680 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    22e6:	26 96       	adiw	r28, 0x06	; 6
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <xTaskRemoveFromEventList+0x6>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <xTaskRemoveFromEventList+0x8>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9d 83       	std	Y+5, r25	; 0x05
    2308:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    230a:	ec 81       	ldd	r30, Y+4	; 0x04
    230c:	fd 81       	ldd	r31, Y+5	; 0x05
    230e:	05 80       	ldd	r0, Z+5	; 0x05
    2310:	f6 81       	ldd	r31, Z+6	; 0x06
    2312:	e0 2d       	mov	r30, r0
    2314:	86 81       	ldd	r24, Z+6	; 0x06
    2316:	97 81       	ldd	r25, Z+7	; 0x07
    2318:	9b 83       	std	Y+3, r25	; 0x03
    231a:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	0c 96       	adiw	r24, 0x0c	; 12
    2322:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2326:	80 91 18 03 	lds	r24, 0x0318
    232a:	88 23       	and	r24, r24
    232c:	61 f5       	brne	.+88     	; 0x2386 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	02 96       	adiw	r24, 0x02	; 2
    2334:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2338:	ea 81       	ldd	r30, Y+2	; 0x02
    233a:	fb 81       	ldd	r31, Y+3	; 0x03
    233c:	96 89       	ldd	r25, Z+22	; 0x16
    233e:	80 91 16 03 	lds	r24, 0x0316
    2342:	89 17       	cp	r24, r25
    2344:	28 f4       	brcc	.+10     	; 0x2350 <xTaskRemoveFromEventList+0x58>
    2346:	ea 81       	ldd	r30, Y+2	; 0x02
    2348:	fb 81       	ldd	r31, Y+3	; 0x03
    234a:	86 89       	ldd	r24, Z+22	; 0x16
    234c:	80 93 16 03 	sts	0x0316, r24
    2350:	ea 81       	ldd	r30, Y+2	; 0x02
    2352:	fb 81       	ldd	r31, Y+3	; 0x03
    2354:	86 89       	ldd	r24, Z+22	; 0x16
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	c9 01       	movw	r24, r18
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	ac 01       	movw	r20, r24
    236e:	43 5e       	subi	r20, 0xE3	; 227
    2370:	5c 4f       	sbci	r21, 0xFC	; 252
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	9c 01       	movw	r18, r24
    2378:	2e 5f       	subi	r18, 0xFE	; 254
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	ca 01       	movw	r24, r20
    237e:	b9 01       	movw	r22, r18
    2380:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>
    2384:	0a c0       	rjmp	.+20     	; 0x239a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	9c 01       	movw	r18, r24
    238c:	24 5f       	subi	r18, 0xF4	; 244
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	80 e6       	ldi	r24, 0x60	; 96
    2392:	93 e0       	ldi	r25, 0x03	; 3
    2394:	b9 01       	movw	r22, r18
    2396:	0e 94 b0 04 	call	0x960	; 0x960 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    239a:	ea 81       	ldd	r30, Y+2	; 0x02
    239c:	fb 81       	ldd	r31, Y+3	; 0x03
    239e:	96 89       	ldd	r25, Z+22	; 0x16
    23a0:	e0 91 0f 03 	lds	r30, 0x030F
    23a4:	f0 91 10 03 	lds	r31, 0x0310
    23a8:	86 89       	ldd	r24, Z+22	; 0x16
    23aa:	98 17       	cp	r25, r24
    23ac:	18 f0       	brcs	.+6      	; 0x23b4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    23b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <vTaskSetTimeOutState+0x6>
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    23d6:	80 91 1b 03 	lds	r24, 0x031B
    23da:	e9 81       	ldd	r30, Y+1	; 0x01
    23dc:	fa 81       	ldd	r31, Y+2	; 0x02
    23de:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    23e0:	80 91 13 03 	lds	r24, 0x0313
    23e4:	90 91 14 03 	lds	r25, 0x0314
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	92 83       	std	Z+2, r25	; 0x02
    23ee:	81 83       	std	Z+1, r24	; 0x01
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <xTaskCheckForTimeOut+0x6>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <xTaskCheckForTimeOut+0x8>
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	9b 83       	std	Y+3, r25	; 0x03
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	7d 83       	std	Y+5, r23	; 0x05
    240e:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2416:	ea 81       	ldd	r30, Y+2	; 0x02
    2418:	fb 81       	ldd	r31, Y+3	; 0x03
    241a:	90 81       	ld	r25, Z
    241c:	80 91 1b 03 	lds	r24, 0x031B
    2420:	98 17       	cp	r25, r24
    2422:	71 f0       	breq	.+28     	; 0x2440 <xTaskCheckForTimeOut+0x46>
    2424:	ea 81       	ldd	r30, Y+2	; 0x02
    2426:	fb 81       	ldd	r31, Y+3	; 0x03
    2428:	21 81       	ldd	r18, Z+1	; 0x01
    242a:	32 81       	ldd	r19, Z+2	; 0x02
    242c:	80 91 13 03 	lds	r24, 0x0313
    2430:	90 91 14 03 	lds	r25, 0x0314
    2434:	82 17       	cp	r24, r18
    2436:	93 07       	cpc	r25, r19
    2438:	18 f0       	brcs	.+6      	; 0x2440 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	2f c0       	rjmp	.+94     	; 0x249e <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2440:	20 91 13 03 	lds	r18, 0x0313
    2444:	30 91 14 03 	lds	r19, 0x0314
    2448:	ea 81       	ldd	r30, Y+2	; 0x02
    244a:	fb 81       	ldd	r31, Y+3	; 0x03
    244c:	81 81       	ldd	r24, Z+1	; 0x01
    244e:	92 81       	ldd	r25, Z+2	; 0x02
    2450:	28 1b       	sub	r18, r24
    2452:	39 0b       	sbc	r19, r25
    2454:	ec 81       	ldd	r30, Y+4	; 0x04
    2456:	fd 81       	ldd	r31, Y+5	; 0x05
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	e0 f4       	brcc	.+56     	; 0x249a <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2462:	ec 81       	ldd	r30, Y+4	; 0x04
    2464:	fd 81       	ldd	r31, Y+5	; 0x05
    2466:	40 81       	ld	r20, Z
    2468:	51 81       	ldd	r21, Z+1	; 0x01
    246a:	ea 81       	ldd	r30, Y+2	; 0x02
    246c:	fb 81       	ldd	r31, Y+3	; 0x03
    246e:	21 81       	ldd	r18, Z+1	; 0x01
    2470:	32 81       	ldd	r19, Z+2	; 0x02
    2472:	80 91 13 03 	lds	r24, 0x0313
    2476:	90 91 14 03 	lds	r25, 0x0314
    247a:	b9 01       	movw	r22, r18
    247c:	68 1b       	sub	r22, r24
    247e:	79 0b       	sbc	r23, r25
    2480:	cb 01       	movw	r24, r22
    2482:	84 0f       	add	r24, r20
    2484:	95 1f       	adc	r25, r21
    2486:	ec 81       	ldd	r30, Y+4	; 0x04
    2488:	fd 81       	ldd	r31, Y+5	; 0x05
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	9b 81       	ldd	r25, Y+3	; 0x03
    2492:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2496:	19 82       	std	Y+1, r1	; 0x01
    2498:	02 c0       	rjmp	.+4      	; 0x249e <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 93 1a 03 	sts	0x031A, r24
}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <prvIdleTask+0x6>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    24d6:	0e 94 02 13 	call	0x2604	; 0x2604 <prvCheckTasksWaitingTermination>
    24da:	fd cf       	rjmp	.-6      	; 0x24d6 <prvIdleTask+0xe>

000024dc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	29 97       	sbiw	r28, 0x09	; 9
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	7c 83       	std	Y+4, r23	; 0x04
    24fa:	6b 83       	std	Y+3, r22	; 0x03
    24fc:	4d 83       	std	Y+5, r20	; 0x05
    24fe:	3f 83       	std	Y+7, r19	; 0x07
    2500:	2e 83       	std	Y+6, r18	; 0x06
    2502:	19 87       	std	Y+9, r17	; 0x09
    2504:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	49 96       	adiw	r24, 0x19	; 25
    250c:	2b 81       	ldd	r18, Y+3	; 0x03
    250e:	3c 81       	ldd	r19, Y+4	; 0x04
    2510:	b9 01       	movw	r22, r18
    2512:	48 e0       	ldi	r20, 0x08	; 8
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	0e 94 ff 13 	call	0x27fe	; 0x27fe <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    251a:	e9 81       	ldd	r30, Y+1	; 0x01
    251c:	fa 81       	ldd	r31, Y+2	; 0x02
    251e:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	85 30       	cpi	r24, 0x05	; 5
    2524:	10 f0       	brcs	.+4      	; 0x252a <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    2526:	84 e0       	ldi	r24, 0x04	; 4
    2528:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    252a:	e9 81       	ldd	r30, Y+1	; 0x01
    252c:	fa 81       	ldd	r31, Y+2	; 0x02
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	02 96       	adiw	r24, 0x02	; 2
    2538:	0e 94 a0 04 	call	0x940	; 0x940 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	0c 96       	adiw	r24, 0x0c	; 12
    2542:	0e 94 a0 04 	call	0x940	; 0x940 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2546:	e9 81       	ldd	r30, Y+1	; 0x01
    2548:	fa 81       	ldd	r31, Y+2	; 0x02
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	91 87       	std	Z+9, r25	; 0x09
    2550:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	85 e0       	ldi	r24, 0x05	; 5
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	82 1b       	sub	r24, r18
    255e:	93 0b       	sbc	r25, r19
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	95 87       	std	Z+13, r25	; 0x0d
    2566:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2568:	e9 81       	ldd	r30, Y+1	; 0x01
    256a:	fa 81       	ldd	r31, Y+2	; 0x02
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	93 8b       	std	Z+19, r25	; 0x13
    2572:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2574:	29 96       	adiw	r28, 0x09	; 9
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	08 95       	ret

0000258a <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	0f 92       	push	r0
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	13 c0       	rjmp	.+38     	; 0x25be <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	c9 01       	movw	r24, r18
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	82 0f       	add	r24, r18
    25ae:	93 1f       	adc	r25, r19
    25b0:	83 5e       	subi	r24, 0xE3	; 227
    25b2:	9c 4f       	sbci	r25, 0xFC	; 252
    25b4:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	50 f3       	brcs	.-44     	; 0x2598 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    25c4:	8a e4       	ldi	r24, 0x4A	; 74
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    25cc:	83 e5       	ldi	r24, 0x53	; 83
    25ce:	93 e0       	ldi	r25, 0x03	; 3
    25d0:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    25d4:	80 e6       	ldi	r24, 0x60	; 96
    25d6:	93 e0       	ldi	r25, 0x03	; 3
    25d8:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    25dc:	89 e6       	ldi	r24, 0x69	; 105
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    25e4:	8a e4       	ldi	r24, 0x4A	; 74
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	90 93 5d 03 	sts	0x035D, r25
    25ec:	80 93 5c 03 	sts	0x035C, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    25f0:	83 e5       	ldi	r24, 0x53	; 83
    25f2:	93 e0       	ldi	r25, 0x03	; 3
    25f4:	90 93 5f 03 	sts	0x035F, r25
    25f8:	80 93 5e 03 	sts	0x035E, r24
}
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <prvCheckTasksWaitingTermination+0x6>
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2610:	80 91 11 03 	lds	r24, 0x0311
    2614:	88 23       	and	r24, r24
    2616:	71 f1       	breq	.+92     	; 0x2674 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    2618:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    261c:	80 91 69 03 	lds	r24, 0x0369
    2620:	1b 82       	std	Y+3, r1	; 0x03
    2622:	88 23       	and	r24, r24
    2624:	11 f4       	brne	.+4      	; 0x262a <prvCheckTasksWaitingTermination+0x26>
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    262a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	88 23       	and	r24, r24
    2632:	01 f5       	brne	.+64     	; 0x2674 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    263a:	e0 91 6e 03 	lds	r30, 0x036E
    263e:	f0 91 6f 03 	lds	r31, 0x036F
    2642:	86 81       	ldd	r24, Z+6	; 0x06
    2644:	97 81       	ldd	r25, Z+7	; 0x07
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	02 96       	adiw	r24, 0x02	; 2
    2650:	0e 94 68 05 	call	0xad0	; 0xad0 <vListRemove>
					--uxCurrentNumberOfTasks;
    2654:	80 91 12 03 	lds	r24, 0x0312
    2658:	81 50       	subi	r24, 0x01	; 1
    265a:	80 93 12 03 	sts	0x0312, r24
					--uxTasksDeleted;
    265e:	80 91 11 03 	lds	r24, 0x0311
    2662:	81 50       	subi	r24, 0x01	; 1
    2664:	80 93 11 03 	sts	0x0311, r24
				}
				taskEXIT_CRITICAL();
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <prvAddCurrentTaskToDelayedList+0x6>
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    268e:	e0 91 0f 03 	lds	r30, 0x030F
    2692:	f0 91 10 03 	lds	r31, 0x0310
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	93 83       	std	Z+3, r25	; 0x03
    269c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    269e:	20 91 13 03 	lds	r18, 0x0313
    26a2:	30 91 14 03 	lds	r19, 0x0314
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	82 17       	cp	r24, r18
    26ac:	93 07       	cpc	r25, r19
    26ae:	70 f4       	brcc	.+28     	; 0x26cc <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    26b0:	80 91 5e 03 	lds	r24, 0x035E
    26b4:	90 91 5f 03 	lds	r25, 0x035F
    26b8:	20 91 0f 03 	lds	r18, 0x030F
    26bc:	30 91 10 03 	lds	r19, 0x0310
    26c0:	2e 5f       	subi	r18, 0xFE	; 254
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	b9 01       	movw	r22, r18
    26c6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInsert>
    26ca:	1e c0       	rjmp	.+60     	; 0x2708 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    26cc:	40 91 5c 03 	lds	r20, 0x035C
    26d0:	50 91 5d 03 	lds	r21, 0x035D
    26d4:	80 91 0f 03 	lds	r24, 0x030F
    26d8:	90 91 10 03 	lds	r25, 0x0310
    26dc:	9c 01       	movw	r18, r24
    26de:	2e 5f       	subi	r18, 0xFE	; 254
    26e0:	3f 4f       	sbci	r19, 0xFF	; 255
    26e2:	ca 01       	movw	r24, r20
    26e4:	b9 01       	movw	r22, r18
    26e6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    26ea:	20 91 77 00 	lds	r18, 0x0077
    26ee:	30 91 78 00 	lds	r19, 0x0078
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	82 17       	cp	r24, r18
    26f8:	93 07       	cpc	r25, r19
    26fa:	30 f4       	brcc	.+12     	; 0x2708 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	90 93 78 00 	sts	0x0078, r25
    2704:	80 93 77 00 	sts	0x0077, r24
		}
	}
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	28 97       	sbiw	r28, 0x08	; 8
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	9c 83       	std	Y+4, r25	; 0x04
    2728:	8b 83       	std	Y+3, r24	; 0x03
    272a:	7e 83       	std	Y+6, r23	; 0x06
    272c:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    272e:	81 e2       	ldi	r24, 0x21	; 33
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 0a 04 	call	0x814	; 0x814 <pvPortMalloc>
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f1       	breq	.+90     	; 0x279c <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	39 f4       	brne	.+14     	; 0x2758 <prvAllocateTCBAndStack+0x46>
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	0e 94 0a 04 	call	0x814	; 0x814 <pvPortMalloc>
    2752:	98 87       	std	Y+8, r25	; 0x08
    2754:	8f 83       	std	Y+7, r24	; 0x07
    2756:	04 c0       	rjmp	.+8      	; 0x2760 <prvAllocateTCBAndStack+0x4e>
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	98 87       	std	Y+8, r25	; 0x08
    275e:	8f 83       	std	Y+7, r24	; 0x07
    2760:	e9 81       	ldd	r30, Y+1	; 0x01
    2762:	fa 81       	ldd	r31, Y+2	; 0x02
    2764:	8f 81       	ldd	r24, Y+7	; 0x07
    2766:	98 85       	ldd	r25, Y+8	; 0x08
    2768:	90 8f       	std	Z+24, r25	; 0x18
    276a:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	87 89       	ldd	r24, Z+23	; 0x17
    2772:	90 8d       	ldd	r25, Z+24	; 0x18
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	39 f4       	brne	.+14     	; 0x2786 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vPortFree>
			pxNewTCB = NULL;
    2780:	1a 82       	std	Y+2, r1	; 0x02
    2782:	19 82       	std	Y+1, r1	; 0x01
    2784:	0b c0       	rjmp	.+22     	; 0x279c <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2786:	e9 81       	ldd	r30, Y+1	; 0x01
    2788:	fa 81       	ldd	r31, Y+2	; 0x02
    278a:	87 89       	ldd	r24, Z+23	; 0x17
    278c:	90 8d       	ldd	r25, Z+24	; 0x18
    278e:	2b 81       	ldd	r18, Y+3	; 0x03
    2790:	3c 81       	ldd	r19, Y+4	; 0x04
    2792:	65 ea       	ldi	r22, 0xA5	; 165
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	a9 01       	movw	r20, r18
    2798:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <memset>
		}
	}

	return pxNewTCB;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27a0:	28 96       	adiw	r28, 0x08	; 8
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <prvDeleteTCB+0x6>
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    27c0:	e9 81       	ldd	r30, Y+1	; 0x01
    27c2:	fa 81       	ldd	r31, Y+2	; 0x02
    27c4:	87 89       	ldd	r24, Z+23	; 0x17
    27c6:	90 8d       	ldd	r25, Z+24	; 0x18
    27c8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vPortFree>
		vPortFree( pxTCB );
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vPortFree>
	}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <memcpy>:
    27de:	fb 01       	movw	r30, r22
    27e0:	dc 01       	movw	r26, r24
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <memcpy+0xa>
    27e4:	01 90       	ld	r0, Z+
    27e6:	0d 92       	st	X+, r0
    27e8:	41 50       	subi	r20, 0x01	; 1
    27ea:	50 40       	sbci	r21, 0x00	; 0
    27ec:	d8 f7       	brcc	.-10     	; 0x27e4 <memcpy+0x6>
    27ee:	08 95       	ret

000027f0 <memset>:
    27f0:	dc 01       	movw	r26, r24
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <memset+0x6>
    27f4:	6d 93       	st	X+, r22
    27f6:	41 50       	subi	r20, 0x01	; 1
    27f8:	50 40       	sbci	r21, 0x00	; 0
    27fa:	e0 f7       	brcc	.-8      	; 0x27f4 <memset+0x4>
    27fc:	08 95       	ret

000027fe <strncpy>:
    27fe:	fb 01       	movw	r30, r22
    2800:	dc 01       	movw	r26, r24
    2802:	41 50       	subi	r20, 0x01	; 1
    2804:	50 40       	sbci	r21, 0x00	; 0
    2806:	48 f0       	brcs	.+18     	; 0x281a <strncpy+0x1c>
    2808:	01 90       	ld	r0, Z+
    280a:	0d 92       	st	X+, r0
    280c:	00 20       	and	r0, r0
    280e:	c9 f7       	brne	.-14     	; 0x2802 <strncpy+0x4>
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <strncpy+0x16>
    2812:	1d 92       	st	X+, r1
    2814:	41 50       	subi	r20, 0x01	; 1
    2816:	50 40       	sbci	r21, 0x00	; 0
    2818:	e0 f7       	brcc	.-8      	; 0x2812 <strncpy+0x14>
    281a:	08 95       	ret

0000281c <_exit>:
    281c:	f8 94       	cli

0000281e <__stop_program>:
    281e:	ff cf       	rjmp	.-2      	; 0x281e <__stop_program>
