
ddd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00800060  000044da  0000456e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001d0  008001d0  000046de  2**0
                  ALLOC
  3 .stab         00005250  00000000  00000000  000046e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d3c  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c80c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ee09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001018f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011368  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001181e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001218c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_1>
       8:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_2>
       c:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 20 	call	0x4038	; 0x4038 <main>
      8a:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 27 22 	jmp	0x444e	; 0x444e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2f 22 	jmp	0x445e	; 0x445e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 27 22 	jmp	0x444e	; 0x444e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 56       	subi	r30, 0x6E	; 110
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:

void (*ADC_ptr)(void);


void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	//	ADC_REGS->ADCSRA_r.Bitfield.B7=0;  //DISABLE ADC

	ADC_REGS->ADMUX_r.Reg =((ADC_REGS->ADMUX_r.Reg) & 0x3F) | ((Config_Ptr->ref_volt) << 6); //SET REFERENCE VOLTAGE
     e3c:	a4 e2       	ldi	r26, 0x24	; 36
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e4 e2       	ldi	r30, 0x24	; 36
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	2f 73       	andi	r18, 0x3F	; 63
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	00 24       	eor	r0, r0
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	07 94       	ror	r0
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	07 94       	ror	r0
     e62:	98 2f       	mov	r25, r24
     e64:	80 2d       	mov	r24, r0
     e66:	82 2b       	or	r24, r18
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	8c 93       	st	X, r24

	ADC_REGS->ADCSRA_r.Reg = (ADC_REGS->ADCSRA_r.Reg & 0xF8) | ((Config_Ptr -> prescaler)); //set prescaler
     e6c:	a4 e2       	ldi	r26, 0x24	; 36
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e4 e2       	ldi	r30, 0x24	; 36
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	98 2f       	mov	r25, r24
     e78:	98 7f       	andi	r25, 0xF8	; 248
     e7a:	e9 81       	ldd	r30, Y+1	; 0x01
     e7c:	fa 81       	ldd	r31, Y+2	; 0x02
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	89 2b       	or	r24, r25
     e82:	12 96       	adiw	r26, 0x02	; 2
     e84:	8c 93       	st	X, r24


	ADC_REGS->ADCSRA_r.Reg |= 1<<7; //ENABLE ADC
     e86:	a4 e2       	ldi	r26, 0x24	; 36
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e4 e2       	ldi	r30, 0x24	; 36
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	8c 93       	st	X, r24
     e96:	12 97       	sbiw	r26, 0x02	; 2


	if(Config_Ptr->LeftAdjust==LEFT_ADJUST)
     e98:	e9 81       	ldd	r30, Y+1	; 0x01
     e9a:	fa 81       	ldd	r31, Y+2	; 0x02
     e9c:	84 81       	ldd	r24, Z+4	; 0x04
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	a1 f4       	brne	.+40     	; 0xeca <ADC_init+0x9c>
	{
		ADC_REGS->ADMUX_r.Bitfield.B5=Config_Ptr->LeftAdjust;  //set left or right adjust
     ea2:	a4 e2       	ldi	r26, 0x24	; 36
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	84 81       	ldd	r24, Z+4	; 0x04
     eac:	81 70       	andi	r24, 0x01	; 1
     eae:	81 70       	andi	r24, 0x01	; 1
     eb0:	98 2f       	mov	r25, r24
     eb2:	92 95       	swap	r25
     eb4:	99 0f       	add	r25, r25
     eb6:	90 7e       	andi	r25, 0xE0	; 224
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	8c 91       	ld	r24, X
     ebc:	13 97       	sbiw	r26, 0x03	; 3
     ebe:	8f 7d       	andi	r24, 0xDF	; 223
     ec0:	89 2b       	or	r24, r25
     ec2:	13 96       	adiw	r26, 0x03	; 3
     ec4:	8c 93       	st	X, r24
     ec6:	13 97       	sbiw	r26, 0x03	; 3
     ec8:	18 c0       	rjmp	.+48     	; 0xefa <ADC_init+0xcc>
	}
	else if(Config_Ptr->LeftAdjust==RIGHT_ADJUST)
     eca:	e9 81       	ldd	r30, Y+1	; 0x01
     ecc:	fa 81       	ldd	r31, Y+2	; 0x02
     ece:	84 81       	ldd	r24, Z+4	; 0x04
     ed0:	88 23       	and	r24, r24
     ed2:	99 f4       	brne	.+38     	; 0xefa <ADC_init+0xcc>
	{
		ADC_REGS->ADMUX_r.Bitfield.B5=Config_Ptr->LeftAdjust;  //set left or right adjust
     ed4:	a4 e2       	ldi	r26, 0x24	; 36
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e9 81       	ldd	r30, Y+1	; 0x01
     eda:	fa 81       	ldd	r31, Y+2	; 0x02
     edc:	84 81       	ldd	r24, Z+4	; 0x04
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	98 2f       	mov	r25, r24
     ee4:	92 95       	swap	r25
     ee6:	99 0f       	add	r25, r25
     ee8:	90 7e       	andi	r25, 0xE0	; 224
     eea:	13 96       	adiw	r26, 0x03	; 3
     eec:	8c 91       	ld	r24, X
     eee:	13 97       	sbiw	r26, 0x03	; 3
     ef0:	8f 7d       	andi	r24, 0xDF	; 223
     ef2:	89 2b       	or	r24, r25
     ef4:	13 96       	adiw	r26, 0x03	; 3
     ef6:	8c 93       	st	X, r24
     ef8:	13 97       	sbiw	r26, 0x03	; 3
	}


	if(Config_Ptr->AutoTrigger==ON)
     efa:	e9 81       	ldd	r30, Y+1	; 0x01
     efc:	fa 81       	ldd	r31, Y+2	; 0x02
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	99 f4       	brne	.+38     	; 0xf2a <ADC_init+0xfc>
	{
		ADC_REGS->ADCSRA_r.Bitfield.B5=Config_Ptr->AutoTrigger;
     f04:	a4 e2       	ldi	r26, 0x24	; 36
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	fa 81       	ldd	r31, Y+2	; 0x02
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	98 2f       	mov	r25, r24
     f14:	92 95       	swap	r25
     f16:	99 0f       	add	r25, r25
     f18:	90 7e       	andi	r25, 0xE0	; 224
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	8c 91       	ld	r24, X
     f1e:	12 97       	sbiw	r26, 0x02	; 2
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	89 2b       	or	r24, r25
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	8c 93       	st	X, r24
     f28:	12 97       	sbiw	r26, 0x02	; 2

	}


}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <ADC_getDigitalValueSynchNonBlocking>:

uint16 ADC_getDigitalValueSynchNonBlocking(channel_num channel_num)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	//	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */

	ADC_REGS->ADMUX_r.Reg = (ADC_REGS->ADMUX_r.Reg & 0xE0); /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     f40:	a4 e2       	ldi	r26, 0x24	; 36
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e2       	ldi	r30, 0x24	; 36
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	83 81       	ldd	r24, Z+3	; 0x03
     f4a:	80 7e       	andi	r24, 0xE0	; 224
     f4c:	13 96       	adiw	r26, 0x03	; 3
     f4e:	8c 93       	st	X, r24

	ADC_REGS->ADMUX_r.Reg = ADC_REGS->ADMUX_r.Reg | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     f50:	a4 e2       	ldi	r26, 0x24	; 36
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e4 e2       	ldi	r30, 0x24	; 36
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	89 2b       	or	r24, r25
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	8c 93       	st	X, r24

	SET_BIT(ADC_REGS->ADCSRA_r.Reg,6); /* Start conversion write '1' to ADSC */
     f62:	a4 e2       	ldi	r26, 0x24	; 36
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e4 e2       	ldi	r30, 0x24	; 36
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	8c 93       	st	X, r24
     f72:	12 97       	sbiw	r26, 0x02	; 2
	//H_LCD_void_sendIntNum(8);

	while(BIT_IS_CLEAR(ADC_REGS->ADCSRA_r.Reg,4));
     f74:	e4 e2       	ldi	r30, 0x24	; 36
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	80 71       	andi	r24, 0x10	; 16
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	b9 f3       	breq	.-18     	; 0xf74 <ADC_getDigitalValueSynchNonBlocking+0x40>
	//H_LCD_void_sendIntNum(8);

	SET_BIT(ADC_REGS->ADCSRA_r.Reg,4); /* Clear ADIF by write '1' to it :) */
     f86:	a4 e2       	ldi	r26, 0x24	; 36
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e4 e2       	ldi	r30, 0x24	; 36
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	12 96       	adiw	r26, 0x02	; 2
     f94:	8c 93       	st	X, r24
     f96:	12 97       	sbiw	r26, 0x02	; 2

	return ADC_REGS->ADCL_r; /* Read the digital value from the data register */
     f98:	e4 e2       	ldi	r30, 0x24	; 36
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01

}
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <ADC_getDigitalValueAsynchCallBack>:


void ADC_getDigitalValueAsynchCallBack(channel_num channel_num,void(*ptrfn)(void))
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <ADC_getDigitalValueAsynchCallBack+0x6>
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	7b 83       	std	Y+3, r23	; 0x03
     fb8:	6a 83       	std	Y+2, r22	; 0x02
	ADC_REGS->ADMUX_r.Reg = (ADC_REGS->ADMUX_r.Reg & 0xE0); /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     fba:	a4 e2       	ldi	r26, 0x24	; 36
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e4 e2       	ldi	r30, 0x24	; 36
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	83 81       	ldd	r24, Z+3	; 0x03
     fc4:	80 7e       	andi	r24, 0xE0	; 224
     fc6:	13 96       	adiw	r26, 0x03	; 3
     fc8:	8c 93       	st	X, r24

	ADC_REGS->ADMUX_r.Reg = ADC_REGS->ADMUX_r.Reg | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     fca:	a4 e2       	ldi	r26, 0x24	; 36
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e4 e2       	ldi	r30, 0x24	; 36
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	93 81       	ldd	r25, Z+3	; 0x03
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	89 2b       	or	r24, r25
     fd8:	13 96       	adiw	r26, 0x03	; 3
     fda:	8c 93       	st	X, r24

	SET_BIT(SREG,PIN7_ID);
     fdc:	af e5       	ldi	r26, 0x5F	; 95
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ef e5       	ldi	r30, 0x5F	; 95
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24

	ADC_REGS->ADCSRA_r.Bitfield.B3=1;
     fea:	e4 e2       	ldi	r30, 0x24	; 36
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	82 83       	std	Z+2, r24	; 0x02

	ADC_REGS->ADCSRA_r.Bitfield.B6=1;
     ff4:	e4 e2       	ldi	r30, 0x24	; 36
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	80 64       	ori	r24, 0x40	; 64
     ffc:	82 83       	std	Z+2, r24	; 0x02

	ADC_ptr=ptrfn;
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	90 93 e0 01 	sts	0x01E0, r25
    1006:	80 93 df 01 	sts	0x01DF, r24


}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <__vector_16>:

void __vector_16 (void)
{
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(SREG,PIN7_ID);
    1040:	af e5       	ldi	r26, 0x5F	; 95
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e5       	ldi	r30, 0x5F	; 95
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8f 77       	andi	r24, 0x7F	; 127
    104c:	8c 93       	st	X, r24
	ADC_ptr();
    104e:	e0 91 df 01 	lds	r30, 0x01DF
    1052:	f0 91 e0 01 	lds	r31, 0x01E0
    1056:	09 95       	icall
	ADC_REGS->ADCSRA_r.Bitfield.B4=0;
    1058:	e4 e2       	ldi	r30, 0x24	; 36
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	8f 7e       	andi	r24, 0xEF	; 239
    1060:	82 83       	std	Z+2, r24	; 0x02

}
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <DIO_voidSetPinDirection>:

#include "DIO_interface.h"


void DIO_voidSetPinDirection(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Direction)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_voidSetPinDirection+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_voidSetPinDirection+0x8>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <DIO_voidSetPinDirection+0xa>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	6b 83       	std	Y+3, r22	; 0x03
    109c:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3e 83       	std	Y+6, r19	; 0x06
    10a6:	2d 83       	std	Y+5, r18	; 0x05
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <DIO_voidSetPinDirection+0x2c>
    10b2:	51 c0       	rjmp	.+162    	; 0x1156 <DIO_voidSetPinDirection+0xce>
    10b4:	2d 81       	ldd	r18, Y+5	; 0x05
    10b6:	3e 81       	ldd	r19, Y+6	; 0x06
    10b8:	24 30       	cpi	r18, 0x04	; 4
    10ba:	31 05       	cpc	r19, r1
    10bc:	7c f4       	brge	.+30     	; 0x10dc <DIO_voidSetPinDirection+0x54>
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	91 05       	cpc	r25, r1
    10c6:	71 f1       	breq	.+92     	; 0x1124 <DIO_voidSetPinDirection+0x9c>
    10c8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ca:	3e 81       	ldd	r19, Y+6	; 0x06
    10cc:	22 30       	cpi	r18, 0x02	; 2
    10ce:	31 05       	cpc	r19, r1
    10d0:	ac f5       	brge	.+106    	; 0x113c <DIO_voidSetPinDirection+0xb4>
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_voidSetPinDirection+0x86>
    10da:	81 c0       	rjmp	.+258    	; 0x11de <DIO_voidSetPinDirection+0x156>
    10dc:	2d 81       	ldd	r18, Y+5	; 0x05
    10de:	3e 81       	ldd	r19, Y+6	; 0x06
    10e0:	25 30       	cpi	r18, 0x05	; 5
    10e2:	31 05       	cpc	r19, r1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <DIO_voidSetPinDirection+0x60>
    10e6:	52 c0       	rjmp	.+164    	; 0x118c <DIO_voidSetPinDirection+0x104>
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	85 30       	cpi	r24, 0x05	; 5
    10ee:	91 05       	cpc	r25, r1
    10f0:	0c f4       	brge	.+2      	; 0x10f4 <DIO_voidSetPinDirection+0x6c>
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <DIO_voidSetPinDirection+0xea>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	26 30       	cpi	r18, 0x06	; 6
    10fa:	31 05       	cpc	r19, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <DIO_voidSetPinDirection+0x78>
    10fe:	54 c0       	rjmp	.+168    	; 0x11a8 <DIO_voidSetPinDirection+0x120>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	87 30       	cpi	r24, 0x07	; 7
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <DIO_voidSetPinDirection+0x84>
    110a:	5d c0       	rjmp	.+186    	; 0x11c6 <DIO_voidSetPinDirection+0x13e>
    110c:	68 c0       	rjmp	.+208    	; 0x11de <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	98 2f       	mov	r25, r24
    1118:	91 70       	andi	r25, 0x01	; 1
    111a:	81 81       	ldd	r24, Z+1	; 0x01
    111c:	8e 7f       	andi	r24, 0xFE	; 254
    111e:	89 2b       	or	r24, r25
    1120:	81 83       	std	Z+1, r24	; 0x01
    1122:	5d c0       	rjmp	.+186    	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	81 70       	andi	r24, 0x01	; 1
    112e:	98 2f       	mov	r25, r24
    1130:	99 0f       	add	r25, r25
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	89 2b       	or	r24, r25
    1138:	81 83       	std	Z+1, r24	; 0x01
    113a:	51 c0       	rjmp	.+162    	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	98 2f       	mov	r25, r24
    1148:	99 0f       	add	r25, r25
    114a:	99 0f       	add	r25, r25
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	89 2b       	or	r24, r25
    1152:	81 83       	std	Z+1, r24	; 0x01
    1154:	44 c0       	rjmp	.+136    	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	e9 81       	ldd	r30, Y+1	; 0x01
    115c:	fa 81       	ldd	r31, Y+2	; 0x02
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	98 2f       	mov	r25, r24
    1162:	99 0f       	add	r25, r25
    1164:	99 0f       	add	r25, r25
    1166:	99 0f       	add	r25, r25
    1168:	81 81       	ldd	r24, Z+1	; 0x01
    116a:	87 7f       	andi	r24, 0xF7	; 247
    116c:	89 2b       	or	r24, r25
    116e:	81 83       	std	Z+1, r24	; 0x01
    1170:	36 c0       	rjmp	.+108    	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	81 70       	andi	r24, 0x01	; 1
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	98 2f       	mov	r25, r24
    117e:	92 95       	swap	r25
    1180:	90 7f       	andi	r25, 0xF0	; 240
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	8f 7e       	andi	r24, 0xEF	; 239
    1186:	89 2b       	or	r24, r25
    1188:	81 83       	std	Z+1, r24	; 0x01
    118a:	29 c0       	rjmp	.+82     	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	e9 81       	ldd	r30, Y+1	; 0x01
    1192:	fa 81       	ldd	r31, Y+2	; 0x02
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	98 2f       	mov	r25, r24
    1198:	92 95       	swap	r25
    119a:	99 0f       	add	r25, r25
    119c:	90 7e       	andi	r25, 0xE0	; 224
    119e:	81 81       	ldd	r24, Z+1	; 0x01
    11a0:	8f 7d       	andi	r24, 0xDF	; 223
    11a2:	89 2b       	or	r24, r25
    11a4:	81 83       	std	Z+1, r24	; 0x01
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	98 2f       	mov	r25, r24
    11b4:	92 95       	swap	r25
    11b6:	99 0f       	add	r25, r25
    11b8:	99 0f       	add	r25, r25
    11ba:	90 7c       	andi	r25, 0xC0	; 192
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	8f 7b       	andi	r24, 0xBF	; 191
    11c0:	89 2b       	or	r24, r25
    11c2:	81 83       	std	Z+1, r24	; 0x01
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	e9 81       	ldd	r30, Y+1	; 0x01
    11cc:	fa 81       	ldd	r31, Y+2	; 0x02
    11ce:	98 2f       	mov	r25, r24
    11d0:	97 95       	ror	r25
    11d2:	99 27       	eor	r25, r25
    11d4:	97 95       	ror	r25
    11d6:	81 81       	ldd	r24, Z+1	; 0x01
    11d8:	8f 77       	andi	r24, 0x7F	; 127
    11da:	89 2b       	or	r24, r25
    11dc:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
    11de:	26 96       	adiw	r28, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_voidSetPinValue+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_voidSetPinValue+0x8>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_voidSetPinValue+0xa>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	6b 83       	std	Y+3, r22	; 0x03
    1204:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3e 83       	std	Y+6, r19	; 0x06
    120e:	2d 83       	std	Y+5, r18	; 0x05
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_voidSetPinValue+0x2c>
    121a:	51 c0       	rjmp	.+162    	; 0x12be <DIO_voidSetPinValue+0xce>
    121c:	2d 81       	ldd	r18, Y+5	; 0x05
    121e:	3e 81       	ldd	r19, Y+6	; 0x06
    1220:	24 30       	cpi	r18, 0x04	; 4
    1222:	31 05       	cpc	r19, r1
    1224:	7c f4       	brge	.+30     	; 0x1244 <DIO_voidSetPinValue+0x54>
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	91 05       	cpc	r25, r1
    122e:	71 f1       	breq	.+92     	; 0x128c <DIO_voidSetPinValue+0x9c>
    1230:	2d 81       	ldd	r18, Y+5	; 0x05
    1232:	3e 81       	ldd	r19, Y+6	; 0x06
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	ac f5       	brge	.+106    	; 0x12a4 <DIO_voidSetPinValue+0xb4>
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	d1 f0       	breq	.+52     	; 0x1276 <DIO_voidSetPinValue+0x86>
    1242:	81 c0       	rjmp	.+258    	; 0x1346 <DIO_voidSetPinValue+0x156>
    1244:	2d 81       	ldd	r18, Y+5	; 0x05
    1246:	3e 81       	ldd	r19, Y+6	; 0x06
    1248:	25 30       	cpi	r18, 0x05	; 5
    124a:	31 05       	cpc	r19, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <DIO_voidSetPinValue+0x60>
    124e:	52 c0       	rjmp	.+164    	; 0x12f4 <DIO_voidSetPinValue+0x104>
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	85 30       	cpi	r24, 0x05	; 5
    1256:	91 05       	cpc	r25, r1
    1258:	0c f4       	brge	.+2      	; 0x125c <DIO_voidSetPinValue+0x6c>
    125a:	3f c0       	rjmp	.+126    	; 0x12da <DIO_voidSetPinValue+0xea>
    125c:	2d 81       	ldd	r18, Y+5	; 0x05
    125e:	3e 81       	ldd	r19, Y+6	; 0x06
    1260:	26 30       	cpi	r18, 0x06	; 6
    1262:	31 05       	cpc	r19, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_voidSetPinValue+0x78>
    1266:	54 c0       	rjmp	.+168    	; 0x1310 <DIO_voidSetPinValue+0x120>
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	87 30       	cpi	r24, 0x07	; 7
    126e:	91 05       	cpc	r25, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <DIO_voidSetPinValue+0x84>
    1272:	5d c0       	rjmp	.+186    	; 0x132e <DIO_voidSetPinValue+0x13e>
    1274:	68 c0       	rjmp	.+208    	; 0x1346 <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	e9 81       	ldd	r30, Y+1	; 0x01
    127c:	fa 81       	ldd	r31, Y+2	; 0x02
    127e:	98 2f       	mov	r25, r24
    1280:	91 70       	andi	r25, 0x01	; 1
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	8e 7f       	andi	r24, 0xFE	; 254
    1286:	89 2b       	or	r24, r25
    1288:	82 83       	std	Z+2, r24	; 0x02
    128a:	5d c0       	rjmp	.+186    	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	e9 81       	ldd	r30, Y+1	; 0x01
    1292:	fa 81       	ldd	r31, Y+2	; 0x02
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	98 2f       	mov	r25, r24
    1298:	99 0f       	add	r25, r25
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	89 2b       	or	r24, r25
    12a0:	82 83       	std	Z+2, r24	; 0x02
    12a2:	51 c0       	rjmp	.+162    	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	98 2f       	mov	r25, r24
    12b0:	99 0f       	add	r25, r25
    12b2:	99 0f       	add	r25, r25
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	8b 7f       	andi	r24, 0xFB	; 251
    12b8:	89 2b       	or	r24, r25
    12ba:	82 83       	std	Z+2, r24	; 0x02
    12bc:	44 c0       	rjmp	.+136    	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	98 2f       	mov	r25, r24
    12ca:	99 0f       	add	r25, r25
    12cc:	99 0f       	add	r25, r25
    12ce:	99 0f       	add	r25, r25
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	87 7f       	andi	r24, 0xF7	; 247
    12d4:	89 2b       	or	r24, r25
    12d6:	82 83       	std	Z+2, r24	; 0x02
    12d8:	36 c0       	rjmp	.+108    	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	e9 81       	ldd	r30, Y+1	; 0x01
    12e0:	fa 81       	ldd	r31, Y+2	; 0x02
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	98 2f       	mov	r25, r24
    12e6:	92 95       	swap	r25
    12e8:	90 7f       	andi	r25, 0xF0	; 240
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	8f 7e       	andi	r24, 0xEF	; 239
    12ee:	89 2b       	or	r24, r25
    12f0:	82 83       	std	Z+2, r24	; 0x02
    12f2:	29 c0       	rjmp	.+82     	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	98 2f       	mov	r25, r24
    1300:	92 95       	swap	r25
    1302:	99 0f       	add	r25, r25
    1304:	90 7e       	andi	r25, 0xE0	; 224
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	8f 7d       	andi	r24, 0xDF	; 223
    130a:	89 2b       	or	r24, r25
    130c:	82 83       	std	Z+2, r24	; 0x02
    130e:	1b c0       	rjmp	.+54     	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	e9 81       	ldd	r30, Y+1	; 0x01
    1316:	fa 81       	ldd	r31, Y+2	; 0x02
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	98 2f       	mov	r25, r24
    131c:	92 95       	swap	r25
    131e:	99 0f       	add	r25, r25
    1320:	99 0f       	add	r25, r25
    1322:	90 7c       	andi	r25, 0xC0	; 192
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	8f 7b       	andi	r24, 0xBF	; 191
    1328:	89 2b       	or	r24, r25
    132a:	82 83       	std	Z+2, r24	; 0x02
    132c:	0c c0       	rjmp	.+24     	; 0x1346 <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	e9 81       	ldd	r30, Y+1	; 0x01
    1334:	fa 81       	ldd	r31, Y+2	; 0x02
    1336:	98 2f       	mov	r25, r24
    1338:	97 95       	ror	r25
    133a:	99 27       	eor	r25, r25
    133c:	97 95       	ror	r25
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	8f 77       	andi	r24, 0x7F	; 127
    1342:	89 2b       	or	r24, r25
    1344:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
    1346:	26 96       	adiw	r28, 0x06	; 6
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <DIO_voidGetPinValue>:

uint8 DIO_voidGetPinValue(Port_Def* ptr,uint8 Copy_u8PinId)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_voidGetPinValue+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <DIO_voidGetPinValue+0x8>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_voidGetPinValue+0xa>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9b 83       	std	Y+3, r25	; 0x03
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
    136c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <DIO_voidGetPinValue+0x2c>
    1382:	3e c0       	rjmp	.+124    	; 0x1400 <DIO_voidGetPinValue+0xa8>
    1384:	2d 81       	ldd	r18, Y+5	; 0x05
    1386:	3e 81       	ldd	r19, Y+6	; 0x06
    1388:	24 30       	cpi	r18, 0x04	; 4
    138a:	31 05       	cpc	r19, r1
    138c:	7c f4       	brge	.+30     	; 0x13ac <DIO_voidGetPinValue+0x54>
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	29 f1       	breq	.+74     	; 0x13e2 <DIO_voidGetPinValue+0x8a>
    1398:	2d 81       	ldd	r18, Y+5	; 0x05
    139a:	3e 81       	ldd	r19, Y+6	; 0x06
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	3c f5       	brge	.+78     	; 0x13f0 <DIO_voidGetPinValue+0x98>
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	b1 f0       	breq	.+44     	; 0x13d6 <DIO_voidGetPinValue+0x7e>
    13aa:	55 c0       	rjmp	.+170    	; 0x1456 <DIO_voidGetPinValue+0xfe>
    13ac:	2d 81       	ldd	r18, Y+5	; 0x05
    13ae:	3e 81       	ldd	r19, Y+6	; 0x06
    13b0:	25 30       	cpi	r18, 0x05	; 5
    13b2:	31 05       	cpc	r19, r1
    13b4:	b1 f1       	breq	.+108    	; 0x1422 <DIO_voidGetPinValue+0xca>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	85 30       	cpi	r24, 0x05	; 5
    13bc:	91 05       	cpc	r25, r1
    13be:	4c f1       	brlt	.+82     	; 0x1412 <DIO_voidGetPinValue+0xba>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	26 30       	cpi	r18, 0x06	; 6
    13c6:	31 05       	cpc	r19, r1
    13c8:	a9 f1       	breq	.+106    	; 0x1434 <DIO_voidGetPinValue+0xdc>
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	87 30       	cpi	r24, 0x07	; 7
    13d0:	91 05       	cpc	r25, r1
    13d2:	d1 f1       	breq	.+116    	; 0x1448 <DIO_voidGetPinValue+0xf0>
    13d4:	40 c0       	rjmp	.+128    	; 0x1456 <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    13d6:	ea 81       	ldd	r30, Y+2	; 0x02
    13d8:	fb 81       	ldd	r31, Y+3	; 0x03
    13da:	80 81       	ld	r24, Z
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	3a c0       	rjmp	.+116    	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    13e2:	ea 81       	ldd	r30, Y+2	; 0x02
    13e4:	fb 81       	ldd	r31, Y+3	; 0x03
    13e6:	80 81       	ld	r24, Z
    13e8:	86 95       	lsr	r24
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	33 c0       	rjmp	.+102    	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    13f0:	ea 81       	ldd	r30, Y+2	; 0x02
    13f2:	fb 81       	ldd	r31, Y+3	; 0x03
    13f4:	80 81       	ld	r24, Z
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	81 70       	andi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	2b c0       	rjmp	.+86     	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    1400:	ea 81       	ldd	r30, Y+2	; 0x02
    1402:	fb 81       	ldd	r31, Y+3	; 0x03
    1404:	80 81       	ld	r24, Z
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	22 c0       	rjmp	.+68     	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    1412:	ea 81       	ldd	r30, Y+2	; 0x02
    1414:	fb 81       	ldd	r31, Y+3	; 0x03
    1416:	80 81       	ld	r24, Z
    1418:	82 95       	swap	r24
    141a:	8f 70       	andi	r24, 0x0F	; 15
    141c:	81 70       	andi	r24, 0x01	; 1
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	1a c0       	rjmp	.+52     	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    1422:	ea 81       	ldd	r30, Y+2	; 0x02
    1424:	fb 81       	ldd	r31, Y+3	; 0x03
    1426:	80 81       	ld	r24, Z
    1428:	82 95       	swap	r24
    142a:	86 95       	lsr	r24
    142c:	87 70       	andi	r24, 0x07	; 7
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	11 c0       	rjmp	.+34     	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    1434:	ea 81       	ldd	r30, Y+2	; 0x02
    1436:	fb 81       	ldd	r31, Y+3	; 0x03
    1438:	80 81       	ld	r24, Z
    143a:	82 95       	swap	r24
    143c:	86 95       	lsr	r24
    143e:	86 95       	lsr	r24
    1440:	83 70       	andi	r24, 0x03	; 3
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    1448:	ea 81       	ldd	r30, Y+2	; 0x02
    144a:	fb 81       	ldd	r31, Y+3	; 0x03
    144c:	80 81       	ld	r24, Z
    144e:	88 1f       	adc	r24, r24
    1450:	88 27       	eor	r24, r24
    1452:	88 1f       	adc	r24, r24
    1454:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
}
    1458:	26 96       	adiw	r28, 0x06	; 6
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(Port_Def* ptr,uint8 Copy_u8Direction)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <DIO_voidSetPortDirection+0x6>
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 83       	std	Z+1, r24	; 0x01
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(Port_Def* ptr,uint8 Copy_u8Value)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_voidSetPortValue+0x6>
    1496:	0f 92       	push	r0
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	82 83       	std	Z+2, r24	; 0x02
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <DIO_voidGetPortValue>:

uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_voidGetPortValue+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	80 81       	ld	r24, Z
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <EXTI_ENABLE>:
static ERROR_STATE status;

/****************************ENABLE THE EXTERNAL INTERRUPT MODULE****************************/

ERROR_STATE EXTI_ENABLE(EXTI_CONFIG* ptr_config)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <EXTI_ENABLE+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <EXTI_ENABLE+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01

	GIE_Disable();											//DISABLE GLOBAL INT BIT (I-BIT) //should be in hal or application layer
    14e4:	0e 94 4f 0c 	call	0x189e	; 0x189e <GIE_Disable>
	SET_BIT(EXTI->GICR.Reg,ptr_config->INT_ID);				//ENABLE WHICH INT TO BE USED
    14e8:	a4 e5       	ldi	r26, 0x54	; 84
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e4 e5       	ldi	r30, 0x54	; 84
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	87 81       	ldd	r24, Z+7	; 0x07
    14f2:	48 2f       	mov	r20, r24
    14f4:	e9 81       	ldd	r30, Y+1	; 0x01
    14f6:	fa 81       	ldd	r31, Y+2	; 0x02
    14f8:	81 81       	ldd	r24, Z+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <EXTI_ENABLE+0x36>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <EXTI_ENABLE+0x32>
    150e:	84 2b       	or	r24, r20
    1510:	17 96       	adiw	r26, 0x07	; 7
    1512:	8c 93       	st	X, r24
    1514:	17 97       	sbiw	r26, 0x07	; 7


	if(ptr_config->INT_ID != EXTI_INT0 || ptr_config->INT_ID != EXTI_INT1 || ptr_config->INT_ID != EXTI_INT2)
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	81 81       	ldd	r24, Z+1	; 0x01
    151c:	86 30       	cpi	r24, 0x06	; 6
    151e:	51 f4       	brne	.+20     	; 0x1534 <EXTI_ENABLE+0x60>
    1520:	e9 81       	ldd	r30, Y+1	; 0x01
    1522:	fa 81       	ldd	r31, Y+2	; 0x02
    1524:	81 81       	ldd	r24, Z+1	; 0x01
    1526:	87 30       	cpi	r24, 0x07	; 7
    1528:	29 f4       	brne	.+10     	; 0x1534 <EXTI_ENABLE+0x60>
    152a:	e9 81       	ldd	r30, Y+1	; 0x01
    152c:	fa 81       	ldd	r31, Y+2	; 0x02
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	85 30       	cpi	r24, 0x05	; 5
    1532:	11 f0       	breq	.+4      	; 0x1538 <EXTI_ENABLE+0x64>
	{
		status= OUT_OF_RANGE;
    1534:	10 92 d0 01 	sts	0x01D0, r1
	//	else if(ptr_config=='NULL')      //ana kda bkaren address b integer 3awz akaren eza kan l pointer da byshawer 3la null wlla la
	//	{
	//		status=NULL_POINTER;
	//	}

	SET_BIT(EXTI->GICR.Reg,ptr_config->INT_ID);				//ENABLE WHICH INT TO BE USED
    1538:	a4 e5       	ldi	r26, 0x54	; 84
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e4 e5       	ldi	r30, 0x54	; 84
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	87 81       	ldd	r24, Z+7	; 0x07
    1542:	48 2f       	mov	r20, r24
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	81 81       	ldd	r24, Z+1	; 0x01
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <EXTI_ENABLE+0x84>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	2a 95       	dec	r18
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <EXTI_ENABLE+0x80>
    155c:	84 2b       	or	r24, r20
    155e:	17 96       	adiw	r26, 0x07	; 7
    1560:	8c 93       	st	X, r24
    1562:	17 97       	sbiw	r26, 0x07	; 7

	switch(ptr_config->INT_ID)
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	81 81       	ldd	r24, Z+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3c 83       	std	Y+4, r19	; 0x04
    1570:	2b 83       	std	Y+3, r18	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	86 30       	cpi	r24, 0x06	; 6
    1578:	91 05       	cpc	r25, r1
    157a:	61 f0       	breq	.+24     	; 0x1594 <EXTI_ENABLE+0xc0>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	27 30       	cpi	r18, 0x07	; 7
    1582:	31 05       	cpc	r19, r1
    1584:	39 f1       	breq	.+78     	; 0x15d4 <EXTI_ENABLE+0x100>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	85 30       	cpi	r24, 0x05	; 5
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <EXTI_ENABLE+0xbe>
    1590:	48 c0       	rjmp	.+144    	; 0x1622 <EXTI_ENABLE+0x14e>
    1592:	70 c0       	rjmp	.+224    	; 0x1674 <EXTI_ENABLE+0x1a0>
	{
	case EXTI_INT0:
		EXTI->MCUCR.Reg &= 0b11111100;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT0
    1594:	a4 e5       	ldi	r26, 0x54	; 84
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e5       	ldi	r30, 0x54	; 84
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	81 81       	ldd	r24, Z+1	; 0x01
    159e:	8c 7f       	andi	r24, 0xFC	; 252
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	8c 93       	st	X, r24
		EXTI->MCUCR.Reg |= ptr_config->trigger_type;
    15a4:	a4 e5       	ldi	r26, 0x54	; 84
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e4 e5       	ldi	r30, 0x54	; 84
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	e9 81       	ldd	r30, Y+1	; 0x01
    15b0:	fa 81       	ldd	r31, Y+2	; 0x02
    15b2:	80 81       	ld	r24, Z
    15b4:	89 2b       	or	r24, r25
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	8c 93       	st	X, r24
    15ba:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[0] = ptr_config->ptr_call_back;
    15bc:	e9 81       	ldd	r30, Y+1	; 0x01
    15be:	fa 81       	ldd	r31, Y+2	; 0x02
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	90 93 e2 01 	sts	0x01E2, r25
    15c8:	80 93 e1 01 	sts	0x01E1, r24
		status= NO_ERR;
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	80 93 d0 01 	sts	0x01D0, r24
    15d2:	50 c0       	rjmp	.+160    	; 0x1674 <EXTI_ENABLE+0x1a0>
		break;

	case EXTI_INT1:
		EXTI->MCUCR.Reg &= 0b11110011;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT1
    15d4:	a4 e5       	ldi	r26, 0x54	; 84
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e4 e5       	ldi	r30, 0x54	; 84
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	81 81       	ldd	r24, Z+1	; 0x01
    15de:	83 7f       	andi	r24, 0xF3	; 243
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	8c 93       	st	X, r24
		EXTI->MCUCR.Reg |=(ptr_config->trigger_type) <<2;
    15e4:	a4 e5       	ldi	r26, 0x54	; 84
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e4 e5       	ldi	r30, 0x54	; 84
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	81 81       	ldd	r24, Z+1	; 0x01
    15ee:	28 2f       	mov	r18, r24
    15f0:	e9 81       	ldd	r30, Y+1	; 0x01
    15f2:	fa 81       	ldd	r31, Y+2	; 0x02
    15f4:	80 81       	ld	r24, Z
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	82 2b       	or	r24, r18
    1604:	11 96       	adiw	r26, 0x01	; 1
    1606:	8c 93       	st	X, r24
    1608:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[1] = ptr_config->ptr_call_back;
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	90 93 e4 01 	sts	0x01E4, r25
    1616:	80 93 e3 01 	sts	0x01E3, r24
		status= NO_ERR;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	80 93 d0 01 	sts	0x01D0, r24
    1620:	29 c0       	rjmp	.+82     	; 0x1674 <EXTI_ENABLE+0x1a0>
		break;

	case EXTI_INT2:

		EXTI->MCUCSR.Reg &=0b11011111;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT2
    1622:	a4 e5       	ldi	r26, 0x54	; 84
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e4 e5       	ldi	r30, 0x54	; 84
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7d       	andi	r24, 0xDF	; 223
    162e:	8c 93       	st	X, r24
		EXTI->MCUCSR.Reg |=(ptr_config->trigger_type-2) <<PIN6_ID;
    1630:	a4 e5       	ldi	r26, 0x54	; 84
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e4 e5       	ldi	r30, 0x54	; 84
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	e9 81       	ldd	r30, Y+1	; 0x01
    163e:	fa 81       	ldd	r31, Y+2	; 0x02
    1640:	80 81       	ld	r24, Z
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 97       	sbiw	r24, 0x02	; 2
    1648:	00 24       	eor	r0, r0
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	07 94       	ror	r0
    1650:	96 95       	lsr	r25
    1652:	87 95       	ror	r24
    1654:	07 94       	ror	r0
    1656:	98 2f       	mov	r25, r24
    1658:	80 2d       	mov	r24, r0
    165a:	82 2b       	or	r24, r18
    165c:	8c 93       	st	X, r24
		EXT_INT_POINTERS[2] = ptr_config->ptr_call_back;
    165e:	e9 81       	ldd	r30, Y+1	; 0x01
    1660:	fa 81       	ldd	r31, Y+2	; 0x02
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	90 93 e6 01 	sts	0x01E6, r25
    166a:	80 93 e5 01 	sts	0x01E5, r24
		status= NO_ERR;
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	80 93 d0 01 	sts	0x01D0, r24
		break;
	}

	GIE_Enable();			//should be in hal or application layer	//DON'T FORGET TO ENABLE THE GLOBAL I-BIT AFTER CONFIGURING THE EXTI
    1674:	0e 94 41 0c 	call	0x1882	; 0x1882 <GIE_Enable>

	return status;
    1678:	80 91 d0 01 	lds	r24, 0x01D0
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <EXTI_DISABLE>:


/********************************DISABLE THE EXTI MODULE****************************/

ERROR_STATE EXTI_DISABLE(EXTI_CONFIG* ptr_config)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <EXTI_DISABLE+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <EXTI_DISABLE+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_config->INT_ID != EXTI_INT0 || ptr_config->INT_ID != EXTI_INT1 || ptr_config->INT_ID != EXTI_INT2)
    169a:	e9 81       	ldd	r30, Y+1	; 0x01
    169c:	fa 81       	ldd	r31, Y+2	; 0x02
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	86 30       	cpi	r24, 0x06	; 6
    16a2:	51 f4       	brne	.+20     	; 0x16b8 <EXTI_DISABLE+0x2e>
    16a4:	e9 81       	ldd	r30, Y+1	; 0x01
    16a6:	fa 81       	ldd	r31, Y+2	; 0x02
    16a8:	81 81       	ldd	r24, Z+1	; 0x01
    16aa:	87 30       	cpi	r24, 0x07	; 7
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <EXTI_DISABLE+0x2e>
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	81 81       	ldd	r24, Z+1	; 0x01
    16b4:	85 30       	cpi	r24, 0x05	; 5
    16b6:	19 f0       	breq	.+6      	; 0x16be <EXTI_DISABLE+0x34>
	{
		status= OUT_OF_RANGE;
    16b8:	10 92 d0 01 	sts	0x01D0, r1
    16bc:	3d c0       	rjmp	.+122    	; 0x1738 <EXTI_DISABLE+0xae>
//	{
//		status=NULL_POINTER;
//	}
	else
	{
		switch(ptr_config->INT_ID)
    16be:	e9 81       	ldd	r30, Y+1	; 0x01
    16c0:	fa 81       	ldd	r31, Y+2	; 0x02
    16c2:	81 81       	ldd	r24, Z+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	86 30       	cpi	r24, 0x06	; 6
    16d2:	91 05       	cpc	r25, r1
    16d4:	59 f0       	breq	.+22     	; 0x16ec <EXTI_DISABLE+0x62>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	27 30       	cpi	r18, 0x07	; 7
    16dc:	31 05       	cpc	r19, r1
    16de:	99 f0       	breq	.+38     	; 0x1706 <EXTI_DISABLE+0x7c>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	85 30       	cpi	r24, 0x05	; 5
    16e6:	91 05       	cpc	r25, r1
    16e8:	d9 f0       	breq	.+54     	; 0x1720 <EXTI_DISABLE+0x96>
    16ea:	26 c0       	rjmp	.+76     	; 0x1738 <EXTI_DISABLE+0xae>
		{
		case EXTI_INT0:
			EXTI->GICR.Reg &= ~1<<EXTI_INT0; //disable interrupt 0
    16ec:	a4 e5       	ldi	r26, 0x54	; 84
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e4 e5       	ldi	r30, 0x54	; 84
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	87 81       	ldd	r24, Z+7	; 0x07
    16f6:	80 78       	andi	r24, 0x80	; 128
    16f8:	17 96       	adiw	r26, 0x07	; 7
    16fa:	8c 93       	st	X, r24
    16fc:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERR;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	80 93 d0 01 	sts	0x01D0, r24
    1704:	19 c0       	rjmp	.+50     	; 0x1738 <EXTI_DISABLE+0xae>
			break;

		case EXTI_INT1:
			EXTI->GICR.Reg &= ~(1<<EXTI_INT1); //disable interrupt 1
    1706:	a4 e5       	ldi	r26, 0x54	; 84
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e4 e5       	ldi	r30, 0x54	; 84
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	87 81       	ldd	r24, Z+7	; 0x07
    1710:	8f 77       	andi	r24, 0x7F	; 127
    1712:	17 96       	adiw	r26, 0x07	; 7
    1714:	8c 93       	st	X, r24
    1716:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERR;
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	80 93 d0 01 	sts	0x01D0, r24
    171e:	0c c0       	rjmp	.+24     	; 0x1738 <EXTI_DISABLE+0xae>
			break;

		case EXTI_INT2:
			EXTI->GICR.Reg &= ~1<<EXTI_INT2; //disable interrupt 2
    1720:	a4 e5       	ldi	r26, 0x54	; 84
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e4 e5       	ldi	r30, 0x54	; 84
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	87 81       	ldd	r24, Z+7	; 0x07
    172a:	80 7c       	andi	r24, 0xC0	; 192
    172c:	17 96       	adiw	r26, 0x07	; 7
    172e:	8c 93       	st	X, r24
    1730:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERR;
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	80 93 d0 01 	sts	0x01D0, r24
			break;
		}
	}
	return status;
    1738:	80 91 d0 01 	lds	r24, 0x01D0

}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <__vector_1>:

/****************************ISR FOR INT0**********************/
void __vector_1 (void)
{
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	2f 93       	push	r18
    1756:	3f 93       	push	r19
    1758:	4f 93       	push	r20
    175a:	5f 93       	push	r21
    175c:	6f 93       	push	r22
    175e:	7f 93       	push	r23
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
    1764:	af 93       	push	r26
    1766:	bf 93       	push	r27
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    1774:	af e5       	ldi	r26, 0x5F	; 95
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ef e5       	ldi	r30, 0x5F	; 95
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8f 77       	andi	r24, 0x7F	; 127
    1780:	8c 93       	st	X, r24
	EXT_INT_POINTERS[0]();
    1782:	e0 91 e1 01 	lds	r30, 0x01E1
    1786:	f0 91 e2 01 	lds	r31, 0x01E2
    178a:	09 95       	icall
}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	ff 91       	pop	r31
    1792:	ef 91       	pop	r30
    1794:	bf 91       	pop	r27
    1796:	af 91       	pop	r26
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	7f 91       	pop	r23
    179e:	6f 91       	pop	r22
    17a0:	5f 91       	pop	r21
    17a2:	4f 91       	pop	r20
    17a4:	3f 91       	pop	r19
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti

000017b2 <__vector_2>:

/****************************ISR FOR INT1**********************/

void __vector_2 (void){
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    17dc:	af e5       	ldi	r26, 0x5F	; 95
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ef e5       	ldi	r30, 0x5F	; 95
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 77       	andi	r24, 0x7F	; 127
    17e8:	8c 93       	st	X, r24
	EXT_INT_POINTERS[1]();
    17ea:	e0 91 e3 01 	lds	r30, 0x01E3
    17ee:	f0 91 e4 01 	lds	r31, 0x01E4
    17f2:	09 95       	icall

}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_3>:
/****************************ISR FOR INT2**********************/

void __vector_3 (void){
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    1844:	af e5       	ldi	r26, 0x5F	; 95
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	ef e5       	ldi	r30, 0x5F	; 95
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8f 77       	andi	r24, 0x7F	; 127
    1850:	8c 93       	st	X, r24
	EXT_INT_POINTERS[2]();
    1852:	e0 91 e5 01 	lds	r30, 0x01E5
    1856:	f0 91 e6 01 	lds	r31, 0x01E6
    185a:	09 95       	icall

}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <GIE_Enable>:
 *      Author: Ali Afifi
 */
#include "GEI.h"

void GIE_Enable()
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,PIN7_ID);
    188a:	af e5       	ldi	r26, 0x5F	; 95
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	ef e5       	ldi	r30, 0x5F	; 95
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 68       	ori	r24, 0x80	; 128
    1896:	8c 93       	st	X, r24
}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <GIE_Disable>:

void GIE_Disable()
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    18a6:	af e5       	ldi	r26, 0x5F	; 95
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ef e5       	ldi	r30, 0x5F	; 95
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8f 77       	andi	r24, 0x7F	; 127
    18b2:	8c 93       	st	X, r24
}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    18e4:	80 91 d1 01 	lds	r24, 0x01D1
    18e8:	90 91 d2 01 	lds	r25, 0x01D2
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	29 f0       	breq	.+10     	; 0x18fa <__vector_6+0x40>
	{
		// Call the Call Back function in the application after the edge is detected
		(*g_callBackPtr)();
    18f0:	e0 91 d1 01 	lds	r30, 0x01D1
    18f4:	f0 91 d2 01 	lds	r31, 0x01D2
    18f8:	09 95       	icall
	}
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <ICU_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ICU_init(const Icu_ConfigType * Config_Ptr)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <ICU_init+0x6>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
	                                                           ****************/
	//DIO_voidSetPinDirection(ICU_PORT,ICP1_PIN,INPUT);    // Configure ECHO PIN/PD6 as input pin


	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    192e:	ef e4       	ldi	r30, 0x4F	; 79
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8c e0       	ldi	r24, 0x0C	; 12
    1934:	80 83       	st	Z, r24

	/* To insert the required clock value in the first 3 bits (CS10,CS11,CS12): */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr ->clock);
    1936:	ae e4       	ldi	r26, 0x4E	; 78
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ee e4       	ldi	r30, 0x4E	; 78
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	98 2f       	mov	r25, r24
    1942:	98 7f       	andi	r25, 0xF8	; 248
    1944:	e9 81       	ldd	r30, Y+1	; 0x01
    1946:	fa 81       	ldd	r31, Y+2	; 0x02
    1948:	80 81       	ld	r24, Z
    194a:	89 2b       	or	r24, r25
    194c:	8c 93       	st	X, r24

	/* To insert the required edge type in ICES1: */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr -> edge)>>6);
    194e:	ae e4       	ldi	r26, 0x4E	; 78
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ee e4       	ldi	r30, 0x4E	; 78
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	98 2f       	mov	r25, r24
    195a:	9f 7b       	andi	r25, 0xBF	; 191
    195c:	e9 81       	ldd	r30, Y+1	; 0x01
    195e:	fa 81       	ldd	r31, Y+2	; 0x02
    1960:	81 81       	ldd	r24, Z+1	; 0x01
    1962:	82 95       	swap	r24
    1964:	86 95       	lsr	r24
    1966:	86 95       	lsr	r24
    1968:	83 70       	andi	r24, 0x03	; 3
    196a:	89 2b       	or	r24, r25
    196c:	8c 93       	st	X, r24

	TCNT1 = 0;      /* Initial value of TIMER1 */
    196e:	ec e4       	ldi	r30, 0x4C	; 76
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	11 82       	std	Z+1, r1	; 0x01
    1974:	10 82       	st	Z, r1
	ICR1 = 0;    /* Initial Value for the input capture register */
    1976:	e6 e4       	ldi	r30, 0x46	; 70
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	11 82       	std	Z+1, r1	; 0x01
    197c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    197e:	a9 e5       	ldi	r26, 0x59	; 89
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e9 e5       	ldi	r30, 0x59	; 89
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 62       	ori	r24, 0x20	; 32
    198a:	8c 93       	st	X, r24
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <ICU_setCallBack+0x6>
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	90 93 d2 01 	sts	0x01D2, r25
    19ac:	80 93 d1 01 	sts	0x01D1, r24
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    19c6:	ae e4       	ldi	r26, 0x4E	; 78
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ee e4       	ldi	r30, 0x4E	; 78
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	2f 7b       	andi	r18, 0xBF	; 191
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	00 24       	eor	r0, r0
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	07 94       	ror	r0
    19e2:	96 95       	lsr	r25
    19e4:	87 95       	ror	r24
    19e6:	07 94       	ror	r0
    19e8:	98 2f       	mov	r25, r24
    19ea:	80 2d       	mov	r24, r0
    19ec:	82 2b       	or	r24, r18
    19ee:	8c 93       	st	X, r24
}
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1a00:	e6 e4       	ldi	r30, 0x46	; 70
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1a16:	ec e4       	ldi	r30, 0x4C	; 76
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	11 82       	std	Z+1, r1	; 0x01
    1a1c:	10 82       	st	Z, r1
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <ICU_DeInit>:


void ICU_DeInit(void)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1a2c:	ef e4       	ldi	r30, 0x4F	; 79
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
	TCCR1B = 0;
    1a32:	ee e4       	ldi	r30, 0x4E	; 78
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a38:	ec e4       	ldi	r30, 0x4C	; 76
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	11 82       	std	Z+1, r1	; 0x01
    1a3e:	10 82       	st	Z, r1
	ICR1 = 0;
    1a40:	e6 e4       	ldi	r30, 0x46	; 70
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	11 82       	std	Z+1, r1	; 0x01
    1a46:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1a48:	a9 e5       	ldi	r26, 0x59	; 89
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e9 e5       	ldi	r30, 0x59	; 89
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 7d       	andi	r24, 0xDF	; 223
    1a54:	8c 93       	st	X, r24
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>              //will remove it and use user defined registers as the rest

void TWI_init(TWI_ConfigType *config_ptr)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <TWI_init+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = config_ptr->speed;
    1a6a:	a0 e2       	ldi	r26, 0x20	; 32
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	81 81       	ldd	r24, Z+1	; 0x01
    1a74:	8c 93       	st	X, r24

	TWSR = (TWSR & 0xFC) | (config_ptr -> prescalar);
    1a76:	a1 e2       	ldi	r26, 0x21	; 33
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e1 e2       	ldi	r30, 0x21	; 33
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	98 2f       	mov	r25, r24
    1a82:	9c 7f       	andi	r25, 0xFC	; 252
    1a84:	e9 81       	ldd	r30, Y+1	; 0x01
    1a86:	fa 81       	ldd	r31, Y+2	; 0x02
    1a88:	80 81       	ld	r24, Z
    1a8a:	89 2b       	or	r24, r25
    1a8c:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    1a8e:	e2 e2       	ldi	r30, 0x22	; 34
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1a96:	e6 e5       	ldi	r30, 0x56	; 86
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	84 e0       	ldi	r24, 0x04	; 4
    1a9c:	80 83       	st	Z, r24
}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <TWI_sendStart>:

void TWI_sendStart(void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ab0:	e6 e5       	ldi	r30, 0x56	; 86
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	84 ea       	ldi	r24, 0xA4	; 164
    1ab6:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ab8:	e6 e5       	ldi	r30, 0x56	; 86
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	dc f7       	brge	.-10     	; 0x1ab8 <TWI_sendStart+0x10>
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <TWI_sendStop>:

void TWI_sendStop(void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ad0:	e6 e5       	ldi	r30, 0x56	; 86
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	84 e9       	ldi	r24, 0x94	; 148
    1ad6:	80 83       	st	Z, r24
}
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <TWI_sendByte>:

void TWI_sendByte(uint8 data)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	0f 92       	push	r0
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1aea:	e3 e2       	ldi	r30, 0x23	; 35
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1af2:	e6 e5       	ldi	r30, 0x56	; 86
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	84 e8       	ldi	r24, 0x84	; 132
    1af8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1afa:	e6 e5       	ldi	r30, 0x56	; 86
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 23       	and	r24, r24
    1b02:	dc f7       	brge	.-10     	; 0x1afa <TWI_sendByte+0x1c>
}
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <TWI_receiveByte_ACK>:

uint8 TWI_receiveByte_ACK(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b14:	e6 e5       	ldi	r30, 0x56	; 86
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	84 ec       	ldi	r24, 0xC4	; 196
    1b1a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 23       	and	r24, r24
    1b24:	dc f7       	brge	.-10     	; 0x1b1c <TWI_receiveByte_ACK+0x10>
    /* Read Data */
    return TWDR;
    1b26:	e3 e2       	ldi	r30, 0x23	; 35
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
}
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <TWI_receiveByte_NoACK>:

uint8 TWI_receiveByte_NoACK(void)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b3a:	e6 e5       	ldi	r30, 0x56	; 86
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	84 e8       	ldi	r24, 0x84	; 132
    1b40:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b42:	e6 e5       	ldi	r30, 0x56	; 86
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 23       	and	r24, r24
    1b4a:	dc f7       	brge	.-10     	; 0x1b42 <TWI_receiveByte_NoACK+0x10>
    /* Read Data */
    return TWDR;
    1b4c:	e3 e2       	ldi	r30, 0x23	; 35
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1b62:	e1 e2       	ldi	r30, 0x21	; 33
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	88 7f       	andi	r24, 0xF8	; 248
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <Timer_Init>:
#include <stdlib.h>
#include "Timer0.h"
void (*ptr_callBack)(void)=NULL_PTR;

void Timer_Init(TIMER0_CONFIG *Timer_Config)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <Timer_Init+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <Timer_Init+0x8>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01

	Timer0_Regs->TCCR0.Reg=((Timer0_Regs->TCCR0.Reg)&0xF8) | ((Timer_Config->PRESCALER) & 0x07);
    1b86:	a2 e5       	ldi	r26, 0x52	; 82
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e2 e5       	ldi	r30, 0x52	; 82
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	81 81       	ldd	r24, Z+1	; 0x01
    1b90:	98 2f       	mov	r25, r24
    1b92:	98 7f       	andi	r25, 0xF8	; 248
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	83 81       	ldd	r24, Z+3	; 0x03
    1b9a:	87 70       	andi	r24, 0x07	; 7
    1b9c:	89 2b       	or	r24, r25
    1b9e:	11 96       	adiw	r26, 0x01	; 1
    1ba0:	8c 93       	st	X, r24
    1ba2:	11 97       	sbiw	r26, 0x01	; 1

	switch(Timer_Config->TIMER0_MODES)
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	80 81       	ld	r24, Z
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3c 83       	std	Y+4, r19	; 0x04
    1bb0:	2b 83       	std	Y+3, r18	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <Timer_Init+0x48>
    1bbc:	41 c0       	rjmp	.+130    	; 0x1c40 <Timer_Init+0xca>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <Timer_Init+0x5c>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	71 f0       	breq	.+28     	; 0x1bec <Timer_Init+0x76>
    1bd0:	c0 c0       	rjmp	.+384    	; 0x1d52 <Timer_Init+0x1dc>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <Timer_Init+0x68>
    1bdc:	56 c0       	rjmp	.+172    	; 0x1c8a <Timer_Init+0x114>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	83 30       	cpi	r24, 0x03	; 3
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <Timer_Init+0x74>
    1be8:	7a c0       	rjmp	.+244    	; 0x1cde <Timer_Init+0x168>
    1bea:	b3 c0       	rjmp	.+358    	; 0x1d52 <Timer_Init+0x1dc>
	{
	case NORMAL_MODE:
		Timer0_Regs->TCCR0.Bitfield.B7=1;              //FOC0 IS SET FOR NON PWM MODE
    1bec:	e2 e5       	ldi	r30, 0x52	; 82
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	81 81       	ldd	r24, Z+1	; 0x01
    1bf2:	80 68       	ori	r24, 0x80	; 128
    1bf4:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=0;
    1bf6:	e2 e5       	ldi	r30, 0x52	; 82
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	81 81       	ldd	r24, Z+1	; 0x01
    1bfc:	87 7f       	andi	r24, 0xF7	; 247
    1bfe:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=0;
    1c00:	e2 e5       	ldi	r30, 0x52	; 82
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	81 81       	ldd	r24, Z+1	; 0x01
    1c06:	8f 7b       	andi	r24, 0xBF	; 191
    1c08:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Reg|=(Timer_Config->NON_PWM_MODE)<<PIN4_ID;
    1c0a:	a2 e5       	ldi	r26, 0x52	; 82
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e2 e5       	ldi	r30, 0x52	; 82
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	81 81       	ldd	r24, Z+1	; 0x01
    1c14:	28 2f       	mov	r18, r24
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	81 81       	ldd	r24, Z+1	; 0x01
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	82 95       	swap	r24
    1c22:	92 95       	swap	r25
    1c24:	90 7f       	andi	r25, 0xF0	; 240
    1c26:	98 27       	eor	r25, r24
    1c28:	80 7f       	andi	r24, 0xF0	; 240
    1c2a:	98 27       	eor	r25, r24
    1c2c:	82 2b       	or	r24, r18
    1c2e:	11 96       	adiw	r26, 0x01	; 1
    1c30:	8c 93       	st	X, r24

		Timer0_Regs->TCNT0.Reg=Timer_Config->VALUE;
    1c32:	a2 e5       	ldi	r26, 0x52	; 82
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	84 81       	ldd	r24, Z+4	; 0x04
    1c3c:	8c 93       	st	X, r24
    1c3e:	89 c0       	rjmp	.+274    	; 0x1d52 <Timer_Init+0x1dc>

		break;

	case PWM_MODE:
		Timer0_Regs->TCCR0.Bitfield.B7=0;              //FOC0 IS CLEARED FOR PWM MODE
    1c40:	e2 e5       	ldi	r30, 0x52	; 82
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	81 81       	ldd	r24, Z+1	; 0x01
    1c46:	8f 77       	andi	r24, 0x7F	; 127
    1c48:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=0;
    1c4a:	e2 e5       	ldi	r30, 0x52	; 82
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	87 7f       	andi	r24, 0xF7	; 247
    1c52:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=1;
    1c54:	e2 e5       	ldi	r30, 0x52	; 82
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	81 81       	ldd	r24, Z+1	; 0x01
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Reg|=(Timer_Config->PWM_MODE)<<PIN4_ID;
    1c5e:	a2 e5       	ldi	r26, 0x52	; 82
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e2 e5       	ldi	r30, 0x52	; 82
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	81 81       	ldd	r24, Z+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	82 95       	swap	r24
    1c76:	92 95       	swap	r25
    1c78:	90 7f       	andi	r25, 0xF0	; 240
    1c7a:	98 27       	eor	r25, r24
    1c7c:	80 7f       	andi	r24, 0xF0	; 240
    1c7e:	98 27       	eor	r25, r24
    1c80:	82 2b       	or	r24, r18
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	8c 93       	st	X, r24
    1c86:	11 97       	sbiw	r26, 0x01	; 1
    1c88:	64 c0       	rjmp	.+200    	; 0x1d52 <Timer_Init+0x1dc>
		break;

	case CTC_MODE:
		Timer0_Regs->TCCR0.Bitfield.B7=1;				//FOC0 IS SET FOR NON PWM MODE
    1c8a:	e2 e5       	ldi	r30, 0x52	; 82
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	81 81       	ldd	r24, Z+1	; 0x01
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=1;
    1c94:	e2 e5       	ldi	r30, 0x52	; 82
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	81 81       	ldd	r24, Z+1	; 0x01
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=0;
    1c9e:	e2 e5       	ldi	r30, 0x52	; 82
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	81 81       	ldd	r24, Z+1	; 0x01
    1ca4:	8f 7b       	andi	r24, 0xBF	; 191
    1ca6:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Reg|=(Timer_Config->NON_PWM_MODE)<<PIN4_ID;
    1ca8:	a2 e5       	ldi	r26, 0x52	; 82
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e2 e5       	ldi	r30, 0x52	; 82
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	81 81       	ldd	r24, Z+1	; 0x01
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb8:	81 81       	ldd	r24, Z+1	; 0x01
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	82 95       	swap	r24
    1cc0:	92 95       	swap	r25
    1cc2:	90 7f       	andi	r25, 0xF0	; 240
    1cc4:	98 27       	eor	r25, r24
    1cc6:	80 7f       	andi	r24, 0xF0	; 240
    1cc8:	98 27       	eor	r25, r24
    1cca:	82 2b       	or	r24, r18
    1ccc:	11 96       	adiw	r26, 0x01	; 1
    1cce:	8c 93       	st	X, r24

		Timer0_Regs->TCNT0.Reg=Timer_Config->VALUE;
    1cd0:	a2 e5       	ldi	r26, 0x52	; 82
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	84 81       	ldd	r24, Z+4	; 0x04
    1cda:	8c 93       	st	X, r24
    1cdc:	3a c0       	rjmp	.+116    	; 0x1d52 <Timer_Init+0x1dc>
//
//		Timer0_Regs->TCCR0.Bitfield.B3=1;
//		Timer0_Regs->TCCR0.Bitfield.B6=1;
//

		Timer0_Regs->TCCR0.Reg |= (1<<PIN3_ID) | (1<<PIN6_ID);
    1cde:	a2 e5       	ldi	r26, 0x52	; 82
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e2 e5       	ldi	r30, 0x52	; 82
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	81 81       	ldd	r24, Z+1	; 0x01
    1ce8:	88 64       	ori	r24, 0x48	; 72
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	8c 93       	st	X, r24
		Timer0_Regs->TCCR0.Reg|=(Timer_Config->PWM_MODE)<<PIN4_ID;
    1cee:	a2 e5       	ldi	r26, 0x52	; 82
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e2 e5       	ldi	r30, 0x52	; 82
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	81 81       	ldd	r24, Z+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	82 95       	swap	r24
    1d06:	92 95       	swap	r25
    1d08:	90 7f       	andi	r25, 0xF0	; 240
    1d0a:	98 27       	eor	r25, r24
    1d0c:	80 7f       	andi	r24, 0xF0	; 240
    1d0e:	98 27       	eor	r25, r24
    1d10:	82 2b       	or	r24, r18
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	8c 93       	st	X, r24
    1d16:	11 97       	sbiw	r26, 0x01	; 1

		//Timer0_Regs->TCCR0.Reg |= ((Timer_Config->PWM_MODE) <<PIN5_ID);
		if (Timer_Config->PWM_MODE==INVERTING_MODE)
    1d18:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	51 f4       	brne	.+20     	; 0x1d36 <Timer_Init+0x1c0>
		{
//			Timer0_Regs->TCCR0.Bitfield.B4=1;
//			Timer0_Regs->TCCR0.Bitfield.B5=1;


			Timer0_Regs->TCCR0.Reg |= (1<<PIN4_ID)|(1<<PIN5_ID);
    1d22:	a2 e5       	ldi	r26, 0x52	; 82
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e2 e5       	ldi	r30, 0x52	; 82
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	81 81       	ldd	r24, Z+1	; 0x01
    1d2c:	80 63       	ori	r24, 0x30	; 48
    1d2e:	11 96       	adiw	r26, 0x01	; 1
    1d30:	8c 93       	st	X, r24
    1d32:	11 97       	sbiw	r26, 0x01	; 1
    1d34:	0e c0       	rjmp	.+28     	; 0x1d52 <Timer_Init+0x1dc>
		}
		else if (Timer_Config->PWM_MODE==NON_INVERTING_MODE)
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	49 f4       	brne	.+18     	; 0x1d52 <Timer_Init+0x1dc>
		{
			Timer0_Regs->TCCR0.Reg |= (1<<PIN5_ID);
    1d40:	a2 e5       	ldi	r26, 0x52	; 82
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e2 e5       	ldi	r30, 0x52	; 82
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	81 81       	ldd	r24, Z+1	; 0x01
    1d4a:	80 62       	ori	r24, 0x20	; 32
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	8c 93       	st	X, r24
    1d50:	11 97       	sbiw	r26, 0x01	; 1


	//DIO_voidSetPinValue(PORTA,PIN6_ID,LOGIC_HIGH);


}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <Timer_Resume>:

void Timer_Resume(TIMER0_CONFIG *Timer_Config)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <Timer_Resume+0x6>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Regs->TCCR0.Reg=((Timer0_Regs->TCCR0.Reg)&0xF8) | ((Timer_Config->PRESCALER) & 0x07);
    1d6e:	a2 e5       	ldi	r26, 0x52	; 82
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e2 e5       	ldi	r30, 0x52	; 82
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	98 2f       	mov	r25, r24
    1d7a:	98 7f       	andi	r25, 0xF8	; 248
    1d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d80:	83 81       	ldd	r24, Z+3	; 0x03
    1d82:	87 70       	andi	r24, 0x07	; 7
    1d84:	89 2b       	or	r24, r25
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	8c 93       	st	X, r24
    1d8a:	11 97       	sbiw	r26, 0x01	; 1

}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <Timer_Stop>:

void Timer_Stop(TIMER0_CONFIG *Timer_Config)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <Timer_Stop+0x6>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Regs->TCCR0.Reg &= 0xF8;
    1da4:	a2 e5       	ldi	r26, 0x52	; 82
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e2 e5       	ldi	r30, 0x52	; 82
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	88 7f       	andi	r24, 0xF8	; 248
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	8c 93       	st	X, r24
    1db4:	11 97       	sbiw	r26, 0x01	; 1

}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <Timer_GetCounts>:

RELOAD_VALUES Timer_GetCounts(TIMER0_CONFIG *Timer_Config)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <Timer_GetCounts+0x6>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	Timer_Config->VALUE=Timer0_Regs->TCNT0.Reg;
    1dce:	e2 e5       	ldi	r30, 0x52	; 82
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	84 83       	std	Z+4, r24	; 0x04
	return Timer_Config->VALUE;
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	84 81       	ldd	r24, Z+4	; 0x04
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <Timer_setDelayTimeMilliSec>:

void Timer_setDelayTimeMilliSec(uint32 time)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <Timer_setDelayTimeMilliSec+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <Timer_setDelayTimeMilliSec+0x8>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	69 83       	std	Y+1, r22	; 0x01
    1df8:	7a 83       	std	Y+2, r23	; 0x02
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	9c 83       	std	Y+4, r25	; 0x04


}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <EnableInt>:

void EnableInt(TIMER0_CONFIG *Timer_Config,void *ptrfn_timer(void))
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <EnableInt+0x6>
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <EnableInt+0x8>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <EnableInt+0xa>
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	7c 83       	std	Y+4, r23	; 0x04
    1e20:	6b 83       	std	Y+3, r22	; 0x03
	switch (Timer_Config->TIMER0_MODES)
    1e22:	e9 81       	ldd	r30, Y+1	; 0x01
    1e24:	fa 81       	ldd	r31, Y+2	; 0x02
    1e26:	80 81       	ld	r24, Z
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3e 83       	std	Y+6, r19	; 0x06
    1e2e:	2d 83       	std	Y+5, r18	; 0x05
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	a1 f0       	breq	.+40     	; 0x1e60 <EnableInt+0x54>
    1e38:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	e9 f4       	brne	.+58     	; 0x1e7c <EnableInt+0x70>
	{
	case CTC_MODE:
		Timer0_Regs->TIMSK.Bitfield.B1=1;
    1e42:	e2 e5       	ldi	r30, 0x52	; 82
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	87 81       	ldd	r24, Z+7	; 0x07
    1e48:	82 60       	ori	r24, 0x02	; 2
    1e4a:	87 83       	std	Z+7, r24	; 0x07
		Timer0_Regs->TIFR.Bitfield.B1=1;
    1e4c:	e2 e5       	ldi	r30, 0x52	; 82
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	86 81       	ldd	r24, Z+6	; 0x06
    1e52:	82 60       	ori	r24, 0x02	; 2
    1e54:	86 83       	std	Z+6, r24	; 0x06
		setCallBack(ptrfn_timer);
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <setCallBack>
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <EnableInt+0x70>
		break;
	case NORMAL_MODE:
		Timer0_Regs->TIMSK.Bitfield.B0=1;
    1e60:	e2 e5       	ldi	r30, 0x52	; 82
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	87 81       	ldd	r24, Z+7	; 0x07
    1e66:	81 60       	ori	r24, 0x01	; 1
    1e68:	87 83       	std	Z+7, r24	; 0x07
		Timer0_Regs->TIFR.Bitfield.B0=1;
    1e6a:	e2 e5       	ldi	r30, 0x52	; 82
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	86 81       	ldd	r24, Z+6	; 0x06
    1e70:	81 60       	ori	r24, 0x01	; 1
    1e72:	86 83       	std	Z+6, r24	; 0x06
		setCallBack(ptrfn_timer);
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <setCallBack>

		break;
	}

}
    1e7c:	26 96       	adiw	r28, 0x06	; 6
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <DisableInt>:

void DisableInt(TIMER0_CONFIG *Timer_Config)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <DisableInt+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <DisableInt+0x8>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	switch (Timer_Config->TIMER0_MODES)
    1e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea2:	80 81       	ld	r24, Z
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3c 83       	std	Y+4, r19	; 0x04
    1eaa:	2b 83       	std	Y+3, r18	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	59 f0       	breq	.+22     	; 0x1eca <DisableInt+0x3c>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	59 f4       	brne	.+22     	; 0x1ed4 <DisableInt+0x46>
	{
	case CTC_MODE:
		Timer0_Regs->TIMSK.Bitfield.B1=0;
    1ebe:	e2 e5       	ldi	r30, 0x52	; 82
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	87 81       	ldd	r24, Z+7	; 0x07
    1ec4:	8d 7f       	andi	r24, 0xFD	; 253
    1ec6:	87 83       	std	Z+7, r24	; 0x07
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <DisableInt+0x46>
		break;
	case NORMAL_MODE:
		Timer0_Regs->TIMSK.Bitfield.B0=0;
    1eca:	e2 e5       	ldi	r30, 0x52	; 82
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	87 81       	ldd	r24, Z+7	; 0x07
    1ed0:	8e 7f       	andi	r24, 0xFE	; 254
    1ed2:	87 83       	std	Z+7, r24	; 0x07
		break;
	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <setCallBack>:

void setCallBack(void *ptrfn_timer(void))
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <setCallBack+0x6>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01

	ptr_callBack=ptrfn_timer;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	90 93 d4 01 	sts	0x01D4, r25
    1ef8:	80 93 d3 01 	sts	0x01D3, r24
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <setFastPWM>:

void setFastPWM(uint8 duty,PWM_MODE_0 TYPE)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	6a 83       	std	Y+2, r22	; 0x02
	//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_HIGH);

	/*DONT FORGERT TO SET PIN AS OUTPUT IN APPLICATION */
	if(TYPE==INVERTING_MODE)
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	91 f5       	brne	.+100    	; 0x1f88 <setFastPWM+0x82>
	{
	Timer0_Regs->OCR0.Reg= abs(255-((duty*255)/100));
    1f24:	82 e5       	ldi	r24, 0x52	; 82
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9a 87       	std	Y+10, r25	; 0x0a
    1f2a:	89 87       	std	Y+9, r24	; 0x09
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	48 2f       	mov	r20, r24
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	ca 01       	movw	r24, r20
    1f34:	9c 01       	movw	r18, r24
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	96 95       	lsr	r25
    1f3e:	98 2f       	mov	r25, r24
    1f40:	88 27       	eor	r24, r24
    1f42:	97 95       	ror	r25
    1f44:	87 95       	ror	r24
    1f46:	82 1b       	sub	r24, r18
    1f48:	93 0b       	sbc	r25, r19
    1f4a:	84 0f       	add	r24, r20
    1f4c:	95 1f       	adc	r25, r21
    1f4e:	24 e6       	ldi	r18, 0x64	; 100
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	b9 01       	movw	r22, r18
    1f54:	0e 94 ba 21 	call	0x4374	; 0x4374 <__divmodhi4>
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9c 01       	movw	r18, r24
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	82 1b       	sub	r24, r18
    1f62:	93 0b       	sbc	r25, r19
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	ef 81       	ldd	r30, Y+7	; 0x07
    1f6a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f6c:	ff 23       	and	r31, r31
    1f6e:	3c f4       	brge	.+14     	; 0x1f7e <setFastPWM+0x78>
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	90 95       	com	r25
    1f76:	81 95       	neg	r24
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	98 87       	std	Y+8, r25	; 0x08
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f80:	e9 85       	ldd	r30, Y+9	; 0x09
    1f82:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f84:	82 87       	std	Z+10, r24	; 0x0a
    1f86:	2f c0       	rjmp	.+94     	; 0x1fe6 <setFastPWM+0xe0>
	//	Timer0_Regs->OCR0.Reg= 0;



	}
	else if(TYPE==NON_INVERTING_MODE)
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	61 f5       	brne	.+88     	; 0x1fe6 <setFastPWM+0xe0>
	{
		Timer0_Regs->OCR0.Reg= abs(((duty*255)/100));
    1f8e:	82 e5       	ldi	r24, 0x52	; 82
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	48 2f       	mov	r20, r24
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	ca 01       	movw	r24, r20
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	22 0f       	add	r18, r18
    1fa2:	33 1f       	adc	r19, r19
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	96 95       	lsr	r25
    1fa8:	98 2f       	mov	r25, r24
    1faa:	88 27       	eor	r24, r24
    1fac:	97 95       	ror	r25
    1fae:	87 95       	ror	r24
    1fb0:	82 1b       	sub	r24, r18
    1fb2:	93 0b       	sbc	r25, r19
    1fb4:	84 0f       	add	r24, r20
    1fb6:	95 1f       	adc	r25, r21
    1fb8:	24 e6       	ldi	r18, 0x64	; 100
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 ba 21 	call	0x4374	; 0x4374 <__divmodhi4>
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9c 83       	std	Y+4, r25	; 0x04
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fca:	fc 81       	ldd	r31, Y+4	; 0x04
    1fcc:	ff 23       	and	r31, r31
    1fce:	3c f4       	brge	.+14     	; 0x1fde <setFastPWM+0xd8>
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	90 95       	com	r25
    1fd6:	81 95       	neg	r24
    1fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	ed 81       	ldd	r30, Y+5	; 0x05
    1fe2:	fe 81       	ldd	r31, Y+6	; 0x06
    1fe4:	82 87       	std	Z+10, r24	; 0x0a
	}
}
    1fe6:	2a 96       	adiw	r28, 0x0a	; 10
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <setphaseCorrectPWM>:

void setphaseCorrectPWM(uint8 duty)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <setphaseCorrectPWM+0x6>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <setphaseCorrectPWM+0x8>
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	89 83       	std	Y+1, r24	; 0x01
	/*DONT FORGERT TO SET PIN AS OUTPUT IN APPLICATION */
	Timer0_Regs->OCR0.Reg= abs(((duty*256)/100));
    2008:	82 e5       	ldi	r24, 0x52	; 82
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9d 83       	std	Y+5, r25	; 0x05
    200e:	8c 83       	std	Y+4, r24	; 0x04
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 2f       	mov	r25, r24
    2018:	88 27       	eor	r24, r24
    201a:	24 e6       	ldi	r18, 0x64	; 100
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	b9 01       	movw	r22, r18
    2020:	0e 94 ba 21 	call	0x4374	; 0x4374 <__divmodhi4>
    2024:	cb 01       	movw	r24, r22
    2026:	9b 83       	std	Y+3, r25	; 0x03
    2028:	8a 83       	std	Y+2, r24	; 0x02
    202a:	ea 81       	ldd	r30, Y+2	; 0x02
    202c:	fb 81       	ldd	r31, Y+3	; 0x03
    202e:	ff 23       	and	r31, r31
    2030:	3c f4       	brge	.+14     	; 0x2040 <setphaseCorrectPWM+0x48>
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	90 95       	com	r25
    2038:	81 95       	neg	r24
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	9b 83       	std	Y+3, r25	; 0x03
    203e:	8a 83       	std	Y+2, r24	; 0x02
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	ec 81       	ldd	r30, Y+4	; 0x04
    2044:	fd 81       	ldd	r31, Y+5	; 0x05
    2046:	82 87       	std	Z+10, r24	; 0x0a
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <__vector_11>:

//ISR(TIMER0_OVF_vect)
void __vector_11 (void)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    2060:	af e5       	ldi	r26, 0x5F	; 95
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ef e5       	ldi	r30, 0x5F	; 95
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8f 77       	andi	r24, 0x7F	; 127
    206c:	8c 93       	st	X, r24
	Timer0_Regs->TIFR.Bitfield.B0=1;    //clear flag
    206e:	e2 e5       	ldi	r30, 0x52	; 82
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	86 81       	ldd	r24, Z+6	; 0x06
    2074:	81 60       	ori	r24, 0x01	; 1
    2076:	86 83       	std	Z+6, r24	; 0x06
//	if(ptr_callBack != NULL_PTR)
//	{
//
//	}
	(*ptr_callBack)();
    2078:	e0 91 d3 01 	lds	r30, 0x01D3
    207c:	f0 91 d4 01 	lds	r31, 0x01D4
    2080:	09 95       	icall

	SET_BIT(SREG,PIN7_ID);
    2082:	af e5       	ldi	r26, 0x5F	; 95
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	ef e5       	ldi	r30, 0x5F	; 95
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	80 68       	ori	r24, 0x80	; 128
    208e:	8c 93       	st	X, r24
}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <USART_RXC_ISR>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void USART_RXC_ISR(void) __attribute__((signal, used, externally_visible));

void USART_RXC_ISR(void)
{
    2096:	1f 92       	push	r1
    2098:	0f 92       	push	r0
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	0f 92       	push	r0
    209e:	11 24       	eor	r1, r1
    20a0:	2f 93       	push	r18
    20a2:	3f 93       	push	r19
    20a4:	4f 93       	push	r20
    20a6:	5f 93       	push	r21
    20a8:	6f 93       	push	r22
    20aa:	7f 93       	push	r23
    20ac:	8f 93       	push	r24
    20ae:	9f 93       	push	r25
    20b0:	af 93       	push	r26
    20b2:	bf 93       	push	r27
    20b4:	ef 93       	push	r30
    20b6:	ff 93       	push	r31
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(UART_regs->UCSRA.Reg,PIN7_ID);
    20c0:	a9 e2       	ldi	r26, 0x29	; 41
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 e2       	ldi	r30, 0x29	; 41
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	8c 93       	st	X, r24

	Uart_CallBack(UART_regs->UDR.Reg);
    20d0:	20 91 d5 01 	lds	r18, 0x01D5
    20d4:	30 91 d6 01 	lds	r19, 0x01D6
    20d8:	e9 e2       	ldi	r30, 0x29	; 41
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	83 81       	ldd	r24, Z+3	; 0x03
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	f9 01       	movw	r30, r18
    20e4:	09 95       	icall
}
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	ff 91       	pop	r31
    20ec:	ef 91       	pop	r30
    20ee:	bf 91       	pop	r27
    20f0:	af 91       	pop	r26
    20f2:	9f 91       	pop	r25
    20f4:	8f 91       	pop	r24
    20f6:	7f 91       	pop	r23
    20f8:	6f 91       	pop	r22
    20fa:	5f 91       	pop	r21
    20fc:	4f 91       	pop	r20
    20fe:	3f 91       	pop	r19
    2100:	2f 91       	pop	r18
    2102:	0f 90       	pop	r0
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	0f 90       	pop	r0
    2108:	1f 90       	pop	r1
    210a:	18 95       	reti

0000210c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,UART_configType *Config_ptr)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	28 97       	sbiw	r28, 0x08	; 8
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	6b 83       	std	Y+3, r22	; 0x03
    2122:	7c 83       	std	Y+4, r23	; 0x04
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	58 87       	std	Y+8, r21	; 0x08
    212a:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    212c:	1a 82       	std	Y+2, r1	; 0x02
    212e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UART_regs->UCSRA.Reg = (1<<PIN1_ID);
    2130:	e9 e2       	ldi	r30, 0x29	; 41
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	82 83       	std	Z+2, r24	; 0x02
	 * RXEN  = 1 Receiver Enable
	 * XEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UART_regs->UCSRB.Reg = (1<<PIN3_ID) | (1<<PIN4_ID)  ;
    2138:	e9 e2       	ldi	r30, 0x29	; 41
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	88 e1       	ldi	r24, 0x18	; 24
    213e:	81 83       	std	Z+1, r24	; 0x01
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_t = (1<<PIN7_ID);
    2140:	e0 e4       	ldi	r30, 0x40	; 64
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 e8       	ldi	r24, 0x80	; 128
    2146:	80 83       	st	Z, r24
	UCSRC_t = (UCSRC_t & 0xCF) | ((Config_ptr -> parity)<<4);
    2148:	a0 e4       	ldi	r26, 0x40	; 64
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e0 e4       	ldi	r30, 0x40	; 64
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	28 2f       	mov	r18, r24
    2154:	2f 7c       	andi	r18, 0xCF	; 207
    2156:	ef 81       	ldd	r30, Y+7	; 0x07
    2158:	f8 85       	ldd	r31, Y+8	; 0x08
    215a:	80 81       	ld	r24, Z
    215c:	88 2f       	mov	r24, r24
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	82 95       	swap	r24
    2162:	92 95       	swap	r25
    2164:	90 7f       	andi	r25, 0xF0	; 240
    2166:	98 27       	eor	r25, r24
    2168:	80 7f       	andi	r24, 0xF0	; 240
    216a:	98 27       	eor	r25, r24
    216c:	82 2b       	or	r24, r18
    216e:	8c 93       	st	X, r24
	UCSRC_t = (UCSRC_t & 0xF7) | ((Config_ptr -> stop)<<3);
    2170:	a0 e4       	ldi	r26, 0x40	; 64
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e0 e4       	ldi	r30, 0x40	; 64
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	28 2f       	mov	r18, r24
    217c:	27 7f       	andi	r18, 0xF7	; 247
    217e:	ef 81       	ldd	r30, Y+7	; 0x07
    2180:	f8 85       	ldd	r31, Y+8	; 0x08
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	82 2b       	or	r24, r18
    2196:	8c 93       	st	X, r24
	UCSRC_t = (UCSRC_t & 0xF9) | ((Config_ptr -> size)<<1);
    2198:	a0 e4       	ldi	r26, 0x40	; 64
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e0 e4       	ldi	r30, 0x40	; 64
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	28 2f       	mov	r18, r24
    21a4:	29 7f       	andi	r18, 0xF9	; 249
    21a6:	ef 81       	ldd	r30, Y+7	; 0x07
    21a8:	f8 85       	ldd	r31, Y+8	; 0x08
    21aa:	81 81       	ldd	r24, Z+1	; 0x01
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	82 2b       	or	r24, r18
    21b6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((16000000 / (baud_rate * 8UL))) - 1);
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	ad 81       	ldd	r26, Y+5	; 0x05
    21be:	be 81       	ldd	r27, Y+6	; 0x06
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	aa 1f       	adc	r26, r26
    21c6:	bb 1f       	adc	r27, r27
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	aa 1f       	adc	r26, r26
    21ce:	bb 1f       	adc	r27, r27
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	aa 1f       	adc	r26, r26
    21d6:	bb 1f       	adc	r27, r27
    21d8:	9c 01       	movw	r18, r24
    21da:	ad 01       	movw	r20, r26
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	94 e2       	ldi	r25, 0x24	; 36
    21e0:	a4 ef       	ldi	r26, 0xF4	; 244
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 cd 21 	call	0x439a	; 0x439a <__udivmodsi4>
    21ec:	da 01       	movw	r26, r20
    21ee:	c9 01       	movw	r24, r18
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_t = ubrr_value>>8;
    21f6:	e0 e4       	ldi	r30, 0x40	; 64
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	89 2f       	mov	r24, r25
    2200:	99 27       	eor	r25, r25
    2202:	80 83       	st	Z, r24
	UART_regs->UBRRL.Reg = ubrr_value;
    2204:	e9 e2       	ldi	r30, 0x29	; 41
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	80 83       	st	Z, r24
}
    220c:	28 96       	adiw	r28, 0x08	; 8
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte( uint8 data)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	89 83       	std	Y+1, r24	; 0x01
	//	 * the UDR register is not empty now
	//	 */
	//	UART_regs->UDR.Reg = data;

	/************************* Another Method *************************/
	UART_regs->UDR.Reg = data;
    222a:	e9 e2       	ldi	r30, 0x29	; 41
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	83 83       	std	Z+3, r24	; 0x03
	while(BIT_IS_CLEAR(UART_regs->UCSRA.Reg,PIN6_ID)){} // Wait until the transmission is complete TXC = 1
    2232:	e9 e2       	ldi	r30, 0x29	; 41
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	80 74       	andi	r24, 0x40	; 64
    223e:	90 70       	andi	r25, 0x00	; 0
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	b9 f3       	breq	.-18     	; 0x2232 <UART_sendByte+0x14>
	SET_BIT(UART_regs->UCSRA.Reg,PIN6_ID); // Clear the TXC flag
    2244:	a9 e2       	ldi	r26, 0x29	; 41
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e9 e2       	ldi	r30, 0x29	; 41
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	80 64       	ori	r24, 0x40	; 64
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	8c 93       	st	X, r24
    2254:	12 97       	sbiw	r26, 0x02	; 2
	/*******************************************************************/
}
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <UART_recieveByte_Polling>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte_Polling(void)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTA,PIN6_ID,OUTPUT);
    2266:	89 e3       	ldi	r24, 0x39	; 57
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	41 e0       	ldi	r20, 0x01	; 1
    226e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA,PIN6_ID,LOGIC_HIGH);
    2272:	89 e3       	ldi	r24, 0x39	; 57
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	66 e0       	ldi	r22, 0x06	; 6
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UART_regs->UCSRA.Reg,PIN7_ID)){}
    227e:	e9 e2       	ldi	r30, 0x29	; 41
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	88 23       	and	r24, r24
    2286:	dc f7       	brge	.-10     	; 0x227e <UART_recieveByte_Polling+0x20>
	DIO_voidSetPinDirection(PORTA,PIN6_ID,OUTPUT);
    2288:	89 e3       	ldi	r24, 0x39	; 57
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	66 e0       	ldi	r22, 0x06	; 6
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA,PIN6_ID,LOGIC_LOW);
    2294:	89 e3       	ldi	r24, 0x39	; 57
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	66 e0       	ldi	r22, 0x06	; 6
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UART_regs->UDR.Reg;
    22a0:	e9 e2       	ldi	r30, 0x29	; 41
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	83 81       	ldd	r24, Z+3	; 0x03
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <UART_recieveByte_NON_BLOCK>:
uint8 UART_recieveByte_NON_BLOCK()
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	0f 92       	push	r0
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62

	if(UART_regs->UCSRA.Bitfield.B7)
    22b6:	e9 e2       	ldi	r30, 0x29	; 41
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	80 78       	andi	r24, 0x80	; 128
    22be:	88 23       	and	r24, r24
    22c0:	71 f0       	breq	.+28     	; 0x22de <UART_recieveByte_NON_BLOCK+0x32>
	{
		SET_BIT(UART_regs->UCSRA.Reg,PIN7_ID);
    22c2:	a9 e2       	ldi	r26, 0x29	; 41
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e9 e2       	ldi	r30, 0x29	; 41
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	80 68       	ori	r24, 0x80	; 128
    22ce:	12 96       	adiw	r26, 0x02	; 2
    22d0:	8c 93       	st	X, r24
    22d2:	12 97       	sbiw	r26, 0x02	; 2
		return UART_regs->UDR.Reg;   /*Read the received data from the Rx buffer (UDR)*/
    22d4:	e9 e2       	ldi	r30, 0x29	; 41
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	83 81       	ldd	r24, Z+3	; 0x03
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <UART_recieveByte_NON_BLOCK+0x34>

	}
	else
	{
		return 0;
    22de:	19 82       	std	Y+1, r1	; 0x01
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <UART_sendString+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22fa:	19 82       	std	Y+1, r1	; 0x01
    22fc:	0e c0       	rjmp	.+28     	; 0x231a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	80 81       	ld	r24, Z
    2310:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
		i++;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	80 81       	ld	r24, Z
    232c:	88 23       	and	r24, r24
    232e:	39 f7       	brne	.-50     	; 0x22fe <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <UART_receiveString_Polling>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString_Polling(uint8 *Str)
{
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <UART_receiveString_Polling+0xa>
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	9b 83       	std	Y+3, r25	; 0x03
    234e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2350:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte_Polling();
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	9b 81       	ldd	r25, Y+3	; 0x03
    235c:	8c 01       	movw	r16, r24
    235e:	02 0f       	add	r16, r18
    2360:	13 1f       	adc	r17, r19
    2362:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_recieveByte_Polling>
    2366:	f8 01       	movw	r30, r16
    2368:	80 83       	st	Z, r24
    236a:	0f c0       	rjmp	.+30     	; 0x238a <UART_receiveString_Polling+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] <= 12)
	{
		i++;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte_Polling();
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	8c 01       	movw	r16, r24
    237e:	02 0f       	add	r16, r18
    2380:	13 1f       	adc	r17, r19
    2382:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_recieveByte_Polling>
    2386:	f8 01       	movw	r30, r16
    2388:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte_Polling();

	/* Receive the whole string until the '#' */
	while(Str[i] <= 12)
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	fc 01       	movw	r30, r24
    2396:	e2 0f       	add	r30, r18
    2398:	f3 1f       	adc	r31, r19
    239a:	80 81       	ld	r24, Z
    239c:	8d 30       	cpi	r24, 0x0D	; 13
    239e:	30 f3       	brcs	.-52     	; 0x236c <UART_receiveString_Polling+0x30>
		Str[i] = UART_recieveByte_Polling();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	//Str[i] = '\0';
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	08 95       	ret

000023b0 <Set_CallBack>:


void Set_CallBack(void(*fnptr)(void))
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <Set_CallBack+0x6>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
	Uart_CallBack = fnptr;
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	90 93 d6 01 	sts	0x01D6, r25
    23c6:	80 93 d5 01 	sts	0x01D5, r24

}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <UART_receiveByteAsynchCallBack>:


void UART_receiveByteAsynchCallBack(void)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_regs->UCSRB.Reg,PIN7_ID);
    23dc:	a9 e2       	ldi	r26, 0x29	; 41
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e9 e2       	ldi	r30, 0x29	; 41
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	81 81       	ldd	r24, Z+1	; 0x01
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	11 96       	adiw	r26, 0x01	; 1
    23ea:	8c 93       	st	X, r24
    23ec:	11 97       	sbiw	r26, 0x01	; 1

}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <WDT_Enable>:
 */
#include "WatchDog.h"
#include "MCU_HW.h"

void WDT_Enable()
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= 1<<PIN3_ID;
    23fc:	a1 e4       	ldi	r26, 0x41	; 65
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e1 e4       	ldi	r30, 0x41	; 65
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 60       	ori	r24, 0x08	; 8
    2408:	8c 93       	st	X, r24
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <WDT_Disable>:

void WDT_Disable()
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= 1<<PIN3_ID | 1<<PIN4_ID;
    2418:	a1 e4       	ldi	r26, 0x41	; 65
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e1 e4       	ldi	r30, 0x41	; 65
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	88 61       	ori	r24, 0x18	; 24
    2424:	8c 93       	st	X, r24
	WDTCR&= ~ 1<<PIN4_ID;
    2426:	a1 e4       	ldi	r26, 0x41	; 65
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e1 e4       	ldi	r30, 0x41	; 65
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	80 7e       	andi	r24, 0xE0	; 224
    2432:	8c 93       	st	X, r24

}
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <WDT_sleep>:

void WDT_sleep(prescaler prescaler )
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
	WDTCR =(WDTCR&0xF8) |(prescaler&0x07);
    2446:	a1 e4       	ldi	r26, 0x41	; 65
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e1 e4       	ldi	r30, 0x41	; 65
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	98 2f       	mov	r25, r24
    2452:	98 7f       	andi	r25, 0xF8	; 248
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	87 70       	andi	r24, 0x07	; 7
    2458:	89 2b       	or	r24, r25
    245a:	8c 93       	st	X, r24
}
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <WDT_refresh>:

void WDT_refresh()
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
    246c:	a8 95       	wdr
}
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <Button_Init>:

#include "Button.h"
#include <util/delay.h>

void Button_Init(Port_Def* GPIO,pins pin)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <Button_Init+0x6>
    247a:	0f 92       	push	r0
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(GPIO, pin, INPUT);
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	6b 81       	ldd	r22, Y+3	; 0x03
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <Single_press>:



Key_status Single_press(Port_Def* GPIO, pins pin)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	62 97       	sbiw	r28, 0x12	; 18
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	98 8b       	std	Y+16, r25	; 0x10
    24b4:	8f 87       	std	Y+15, r24	; 0x0f
    24b6:	69 8b       	std	Y+17, r22	; 0x11
	DIO_voidSetPinDirection(GPIO, pin, INPUT);
    24b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ba:	98 89       	ldd	r25, Y+16	; 0x10
    24bc:	69 89       	ldd	r22, Y+17	; 0x11
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	static uint8 flag=0 ;
	if(!DIO_voidGetPinValue(GPIO, pin))
    24c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c6:	98 89       	ldd	r25, Y+16	; 0x10
    24c8:	69 89       	ldd	r22, Y+17	; 0x11
    24ca:	0e 94 ac 09 	call	0x1358	; 0x1358 <DIO_voidGetPinValue>
    24ce:	88 23       	and	r24, r24
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <Single_press+0x36>
    24d2:	83 c0       	rjmp	.+262    	; 0x25da <Single_press+0x13c>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a8 e4       	ldi	r26, 0x48	; 72
    24da:	b2 e4       	ldi	r27, 0x42	; 66
    24dc:	8b 87       	std	Y+11, r24	; 0x0b
    24de:	9c 87       	std	Y+12, r25	; 0x0c
    24e0:	ad 87       	std	Y+13, r26	; 0x0d
    24e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a e7       	ldi	r20, 0x7A	; 122
    24f2:	55 e4       	ldi	r21, 0x45	; 69
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	8f 83       	std	Y+7, r24	; 0x07
    24fe:	98 87       	std	Y+8, r25	; 0x08
    2500:	a9 87       	std	Y+9, r26	; 0x09
    2502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e8       	ldi	r20, 0x80	; 128
    2512:	5f e3       	ldi	r21, 0x3F	; 63
    2514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2518:	88 23       	and	r24, r24
    251a:	2c f4       	brge	.+10     	; 0x2526 <Single_press+0x88>
		__ticks = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	3f c0       	rjmp	.+126    	; 0x25a4 <Single_press+0x106>
	else if (__tmp > 65535)
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	57 e4       	ldi	r21, 0x47	; 71
    2536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	4c f5       	brge	.+82     	; 0x2590 <Single_press+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	0f c0       	rjmp	.+30     	; 0x2586 <Single_press+0xe8>
    2568:	80 e9       	ldi	r24, 0x90	; 144
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <Single_press+0xd6>
    2578:	9c 83       	std	Y+4, r25	; 0x04
    257a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	69 f7       	brne	.-38     	; 0x2568 <Single_press+0xca>
    258e:	14 c0       	rjmp	.+40     	; 0x25b8 <Single_press+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2590:	6f 81       	ldd	r22, Y+7	; 0x07
    2592:	78 85       	ldd	r23, Y+8	; 0x08
    2594:	89 85       	ldd	r24, Y+9	; 0x09
    2596:	9a 85       	ldd	r25, Y+10	; 0x0a
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <Single_press+0x112>
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(50);
		if(!DIO_voidGetPinValue(GPIO, pin))
    25b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ba:	98 89       	ldd	r25, Y+16	; 0x10
    25bc:	69 89       	ldd	r22, Y+17	; 0x11
    25be:	0e 94 ac 09 	call	0x1358	; 0x1358 <DIO_voidGetPinValue>
    25c2:	88 23       	and	r24, r24
    25c4:	61 f4       	brne	.+24     	; 0x25de <Single_press+0x140>
		{
			if(flag == 0)
    25c6:	80 91 d7 01 	lds	r24, 0x01D7
    25ca:	88 23       	and	r24, r24
    25cc:	41 f4       	brne	.+16     	; 0x25de <Single_press+0x140>
			{
				flag =1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	80 93 d7 01 	sts	0x01D7, r24
				return pressed;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	8a 8b       	std	Y+18, r24	; 0x12
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <Single_press+0x142>
		}

	}
	else
	{
		flag = 0;
    25da:	10 92 d7 01 	sts	0x01D7, r1
	}

	return released;
    25de:	1a 8a       	std	Y+18, r1	; 0x12
    25e0:	8a 89       	ldd	r24, Y+18	; 0x12
}
    25e2:	62 96       	adiw	r28, 0x12	; 18
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <EEPROM_Init>:
 */
#include "EEPROM.h"
#include "TWI.h"

void EEPROM_Init(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <EEPROM_Init+0x6>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	TWI_ConfigType TWI_obj;
	TWI_obj.prescalar=F_CPU64;
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	89 83       	std	Y+1, r24	; 0x01
	TWI_obj.speed=TWI_SPEED_100;
    2602:	88 e4       	ldi	r24, 0x48	; 72
    2604:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&TWI_obj);
    2606:	ce 01       	movw	r24, r28
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <TWI_init>
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	27 97       	sbiw	r28, 0x07	; 7
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	7e 83       	std	Y+6, r23	; 0x06
    2632:	6d 83       	std	Y+5, r22	; 0x05
	TWI_ConfigType obj;
	obj.prescalar=F_CPU64;
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	89 83       	std	Y+1, r24	; 0x01
	/* Send the Start Bit */
	TWI_init(&obj);
    2638:	ce 01       	movw	r24, r28
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <TWI_init>
    if (TWI_getStatus() != TWI_START)
    2640:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    2644:	88 30       	cpi	r24, 0x08	; 8
    2646:	11 f0       	breq	.+4      	; 0x264c <EEPROM_readByte+0x34>
        return ERROR;
    2648:	1f 82       	std	Y+7, r1	; 0x07
    264a:	44 c0       	rjmp	.+136    	; 0x26d4 <EEPROM_readByte+0xbc>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_sendByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	80 70       	andi	r24, 0x00	; 0
    2652:	97 70       	andi	r25, 0x07	; 7
    2654:	88 0f       	add	r24, r24
    2656:	89 2f       	mov	r24, r25
    2658:	88 1f       	adc	r24, r24
    265a:	99 0b       	sbc	r25, r25
    265c:	91 95       	neg	r25
    265e:	80 6a       	ori	r24, 0xA0	; 160
    2660:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2664:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    2668:	88 31       	cpi	r24, 0x18	; 24
    266a:	11 f0       	breq	.+4      	; 0x2670 <EEPROM_readByte+0x58>
        return ERROR;
    266c:	1f 82       	std	Y+7, r1	; 0x07
    266e:	32 c0       	rjmp	.+100    	; 0x26d4 <EEPROM_readByte+0xbc>

    /* Send the required memory location address */
    TWI_sendByte((uint8)(u16addr));
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2676:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    267a:	88 32       	cpi	r24, 0x28	; 40
    267c:	11 f0       	breq	.+4      	; 0x2682 <EEPROM_readByte+0x6a>
        return ERROR;
    267e:	1f 82       	std	Y+7, r1	; 0x07
    2680:	29 c0       	rjmp	.+82     	; 0x26d4 <EEPROM_readByte+0xbc>

    /* Send the Repeated Start Bit */
    TWI_sendStart();
    2682:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <TWI_sendStart>
    if (TWI_getStatus() != TWI_REP_START)
    2686:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    268a:	80 31       	cpi	r24, 0x10	; 16
    268c:	11 f0       	breq	.+4      	; 0x2692 <EEPROM_readByte+0x7a>
        return ERROR;
    268e:	1f 82       	std	Y+7, r1	; 0x07
    2690:	21 c0       	rjmp	.+66     	; 0x26d4 <EEPROM_readByte+0xbc>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_sendByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	80 70       	andi	r24, 0x00	; 0
    2698:	97 70       	andi	r25, 0x07	; 7
    269a:	88 0f       	add	r24, r24
    269c:	89 2f       	mov	r24, r25
    269e:	88 1f       	adc	r24, r24
    26a0:	99 0b       	sbc	r25, r25
    26a2:	91 95       	neg	r25
    26a4:	81 6a       	ori	r24, 0xA1	; 161
    26a6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    26aa:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    26ae:	80 34       	cpi	r24, 0x40	; 64
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <EEPROM_readByte+0x9e>
        return ERROR;
    26b2:	1f 82       	std	Y+7, r1	; 0x07
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <EEPROM_readByte+0xbc>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_receiveByte_NoACK();
    26b6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <TWI_receiveByte_NoACK>
    26ba:	ed 81       	ldd	r30, Y+5	; 0x05
    26bc:	fe 81       	ldd	r31, Y+6	; 0x06
    26be:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NoACK)
    26c0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    26c4:	88 35       	cpi	r24, 0x58	; 88
    26c6:	11 f0       	breq	.+4      	; 0x26cc <EEPROM_readByte+0xb4>
        return ERROR;
    26c8:	1f 82       	std	Y+7, r1	; 0x07
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <EEPROM_readByte+0xbc>

    /* Send the Stop Bit */
    TWI_sendStop();
    26cc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <TWI_sendStop>

    return SUCCESS;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	8f 83       	std	Y+7, r24	; 0x07
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
}
    26d6:	27 96       	adiw	r28, 0x07	; 7
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <EEPROM_writeByte+0x6>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <EEPROM_writeByte+0x8>
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_sendStart();
    26fa:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <TWI_sendStart>
    if (TWI_getStatus() != TWI_START)
    26fe:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    2702:	88 30       	cpi	r24, 0x08	; 8
    2704:	11 f0       	breq	.+4      	; 0x270a <EEPROM_writeByte+0x22>
        return ERROR;
    2706:	1c 82       	std	Y+4, r1	; 0x04
    2708:	28 c0       	rjmp	.+80     	; 0x275a <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_sendByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	80 70       	andi	r24, 0x00	; 0
    2710:	97 70       	andi	r25, 0x07	; 7
    2712:	88 0f       	add	r24, r24
    2714:	89 2f       	mov	r24, r25
    2716:	88 1f       	adc	r24, r24
    2718:	99 0b       	sbc	r25, r25
    271a:	91 95       	neg	r25
    271c:	80 6a       	ori	r24, 0xA0	; 160
    271e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2722:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    2726:	88 31       	cpi	r24, 0x18	; 24
    2728:	11 f0       	breq	.+4      	; 0x272e <EEPROM_writeByte+0x46>
        return ERROR;
    272a:	1c 82       	std	Y+4, r1	; 0x04
    272c:	16 c0       	rjmp	.+44     	; 0x275a <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_sendByte((uint8)(u16addr));
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2734:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    2738:	88 32       	cpi	r24, 0x28	; 40
    273a:	11 f0       	breq	.+4      	; 0x2740 <EEPROM_writeByte+0x58>
        return ERROR;
    273c:	1c 82       	std	Y+4, r1	; 0x04
    273e:	0d c0       	rjmp	.+26     	; 0x275a <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_sendByte(u8data);
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2746:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TWI_getStatus>
    274a:	88 32       	cpi	r24, 0x28	; 40
    274c:	11 f0       	breq	.+4      	; 0x2752 <EEPROM_writeByte+0x6a>
        return ERROR;
    274e:	1c 82       	std	Y+4, r1	; 0x04
    2750:	04 c0       	rjmp	.+8      	; 0x275a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_sendStop();
    2752:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <TWI_sendStop>

    return SUCCESS;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	8c 83       	std	Y+4, r24	; 0x04
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <FingerPS_handShake>:
#include "FingerPrint.h"
const char ShackHand[]			= {0xEF ,0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x40, 0x00, 0x44,'\0'};
const char Aura_Blue[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF ,0x01 ,0x00 ,0x07 ,0x35 ,0x02 ,0x0F ,0x02 ,0x7D ,0x00 ,0xCD,'\0'};

void FingerPS_handShake(void)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
//
//    /*2 Bytes Checksum*/
//	UART_sendByte(0x00);
//	UART_sendByte(0x44);

	UART_sendString(ShackHand);
    2772:	82 ea       	ldi	r24, 0xA2	; 162
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	0e 94 75 11 	call	0x22ea	; 0x22ea <UART_sendString>

}
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <H_FingerPS_GenImg>:

void H_FingerPS_GenImg(void)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    /*2 Bytes Header*/
	UART_sendByte(0xEF);
    2788:	8f ee       	ldi	r24, 0xEF	; 239
    278a:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
	UART_sendByte(0x01);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*4 Bytes Module Address*/
	UART_sendByte(0xFF);
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
	UART_sendByte(0xFF);
    279a:	8f ef       	ldi	r24, 0xFF	; 255
    279c:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
	UART_sendByte(0xFF);
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
	UART_sendByte(0xFF);
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Package Identifier*/
	UART_sendByte(0x01);
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Byte Package Length*/
	UART_sendByte(0x00);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
	UART_sendByte(0x03);
    27b8:	83 e0       	ldi	r24, 0x03	; 3
    27ba:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Instruction Code*/
	UART_sendByte(0x01);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Bytes Checksum*/
	UART_sendByte(0x00);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
	UART_sendByte(0x05);
    27ca:	85 e0       	ldi	r24, 0x05	; 5
    27cc:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
}
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <H_FingerPS_ConvertImg2CharFile>:

void H_FingerPS_ConvertImg2CharFile(void)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    /*2 Bytes Header*/
	UART_sendByte(0xEF);
    27de:	8f ee       	ldi	r24, 0xEF	; 239
    27e0:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x01);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*4 Bytes Module Address*/
    UART_sendByte(0xFF);
    27ea:	8f ef       	ldi	r24, 0xFF	; 255
    27ec:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Package Identifier*/
    UART_sendByte(0x01);
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Byte Package Length*/
    UART_sendByte(0x00);
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x04);
    280e:	84 e0       	ldi	r24, 0x04	; 4
    2810:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Instruction Code*/
    UART_sendByte(0x01);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Buffer Number*/
    UART_sendByte(0x01);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Bytes Checksum*/
    UART_sendByte(0x00);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x08);
    2826:	88 e0       	ldi	r24, 0x08	; 8
    2828:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
}
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <H_FingerPS_GenTemplate>:

void H_FingerPS_GenTemplate(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    /*2 Bytes Header*/
    UART_sendByte(0xEF);
    283a:	8f ee       	ldi	r24, 0xEF	; 239
    283c:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x01);
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*4 Bytes Module Address*/
    UART_sendByte(0xFF);
    2846:	8f ef       	ldi	r24, 0xFF	; 255
    2848:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    284c:	8f ef       	ldi	r24, 0xFF	; 255
    284e:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Package Identifier*/
    UART_sendByte(0x01);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Byte Package Length*/
    UART_sendByte(0x00);
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x03);
    286a:	83 e0       	ldi	r24, 0x03	; 3
    286c:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Instruction Code*/
    UART_sendByte(0x05);
    2870:	85 e0       	ldi	r24, 0x05	; 5
    2872:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Bytes Checksum*/
    UART_sendByte(0x00);
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x09);
    287c:	89 e0       	ldi	r24, 0x09	; 9
    287e:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <H_FingerPS_strTemplate>:

void H_FingerPS_strTemplate(void)

{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    /*2 Bytes Header*/
    UART_sendByte(0xEF);
    2890:	8f ee       	ldi	r24, 0xEF	; 239
    2892:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x01);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*4 Bytes Module Address*/
    UART_sendByte(0xFF);
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    28a2:	8f ef       	ldi	r24, 0xFF	; 255
    28a4:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    28a8:	8f ef       	ldi	r24, 0xFF	; 255
    28aa:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0xFF);
    28ae:	8f ef       	ldi	r24, 0xFF	; 255
    28b0:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Package Identifier*/
    UART_sendByte(0x01);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Byte Package Length*/
    UART_sendByte(0x00);
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x06);
    28c0:	86 e0       	ldi	r24, 0x06	; 6
    28c2:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Instruction Code*/
    UART_sendByte(0x06);
    28c6:	86 e0       	ldi	r24, 0x06	; 6
    28c8:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*1 Byte Buffer Number*/
    UART_sendByte(0x01);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Bytes Location Number*/
    UART_sendByte(0x00);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x01);
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>

    /*2 Bytes Checksum*/
    UART_sendByte(0x00);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
    UART_sendByte(0x0F);
    28e4:	8f e0       	ldi	r24, 0x0F	; 15
    28e6:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_sendByte>
}
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <Aura_blue>:

void Aura_blue(void)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
//	UART_sendByte(0x01);
//	UART_sendByte(0x00);
//	UART_sendByte(0x07);
//	UART_sendByte(0x35);

	UART_sendString(Aura_Blue);
    28f8:	8f ea       	ldi	r24, 0xAF	; 175
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	0e 94 75 11 	call	0x22ea	; 0x22ea <UART_sendString>

}
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <KEYPAD_INIT>:
		{{'1','2','3','+'},	//keypad layout design for calculator app
		{'4','5','6','-'},
		{'7','8','9','*'},
		{'0','=','c','/' } };
void KEYPAD_INIT()
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
	/* do nothing */
	DIO_voidSetPinDirection(COL_PORT, C1_PIN, INPUT);
    290e:	80 e3       	ldi	r24, 0x30	; 48
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	67 e0       	ldi	r22, 0x07	; 7
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C2_PIN, INPUT);
    291a:	80 e3       	ldi	r24, 0x30	; 48
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	66 e0       	ldi	r22, 0x06	; 6
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C3_PIN, INPUT);
    2926:	80 e3       	ldi	r24, 0x30	; 48
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	65 e0       	ldi	r22, 0x05	; 5
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(COL_PORT, C4_PIN, INPUT);
    2932:	80 e3       	ldi	r24, 0x30	; 48
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	63 e0       	ldi	r22, 0x03	; 3
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>


	DIO_voidSetPinDirection(ROW_PORT, R4_PIN, OUTPUT);
    293e:	83 e3       	ldi	r24, 0x33	; 51
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R3_PIN, OUTPUT);
    294a:	83 e3       	ldi	r24, 0x33	; 51
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	63 e0       	ldi	r22, 0x03	; 3
    2950:	41 e0       	ldi	r20, 0x01	; 1
    2952:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R2_PIN, OUTPUT);
    2956:	83 e3       	ldi	r24, 0x33	; 51
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	64 e0       	ldi	r22, 0x04	; 4
    295c:	41 e0       	ldi	r20, 0x01	; 1
    295e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ROW_PORT, R1_PIN, OUTPUT);
    2962:	83 e3       	ldi	r24, 0x33	; 51
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	65 e0       	ldi	r22, 0x05	; 5
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>




}
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <KEYPAD_Get_Pressed_Key>:


uint8_t KEYPAD_Get_Pressed_Key(void)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	af 97       	sbiw	r28, 0x2f	; 47
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
	uint8_t  i,j;
	uint8_t rows[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    2988:	85 e0       	ldi	r24, 0x05	; 5
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	84 e0       	ldi	r24, 0x04	; 4
    298e:	8c 8b       	std	Y+20, r24	; 0x14
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	8d 8b       	std	Y+21, r24	; 0x15
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	8e 8b       	std	Y+22, r24	; 0x16
	uint8_t cols[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    2998:	87 e0       	ldi	r24, 0x07	; 7
    299a:	8f 8b       	std	Y+23, r24	; 0x17
    299c:	86 e0       	ldi	r24, 0x06	; 6
    299e:	88 8f       	std	Y+24, r24	; 0x18
    29a0:	85 e0       	ldi	r24, 0x05	; 5
    29a2:	89 8f       	std	Y+25, r24	; 0x19
    29a4:	83 e0       	ldi	r24, 0x03	; 3
    29a6:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t KEYPAD_ARR[4][4] = KEYPAD;
    29a8:	ce 01       	movw	r24, r28
    29aa:	4b 96       	adiw	r24, 0x1b	; 27
    29ac:	9c a7       	std	Y+44, r25	; 0x2c
    29ae:	8b a7       	std	Y+43, r24	; 0x2b
    29b0:	e0 ec       	ldi	r30, 0xC0	; 192
    29b2:	f1 e0       	ldi	r31, 0x01	; 1
    29b4:	fe a7       	std	Y+46, r31	; 0x2e
    29b6:	ed a7       	std	Y+45, r30	; 0x2d
    29b8:	f0 e1       	ldi	r31, 0x10	; 16
    29ba:	ff a7       	std	Y+47, r31	; 0x2f
    29bc:	ed a5       	ldd	r30, Y+45	; 0x2d
    29be:	fe a5       	ldd	r31, Y+46	; 0x2e
    29c0:	00 80       	ld	r0, Z
    29c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	9e a7       	std	Y+46, r25	; 0x2e
    29ca:	8d a7       	std	Y+45, r24	; 0x2d
    29cc:	eb a5       	ldd	r30, Y+43	; 0x2b
    29ce:	fc a5       	ldd	r31, Y+44	; 0x2c
    29d0:	00 82       	st	Z, r0
    29d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	9c a7       	std	Y+44, r25	; 0x2c
    29da:	8b a7       	std	Y+43, r24	; 0x2b
    29dc:	9f a5       	ldd	r25, Y+47	; 0x2f
    29de:	91 50       	subi	r25, 0x01	; 1
    29e0:	9f a7       	std	Y+47, r25	; 0x2f
    29e2:	ef a5       	ldd	r30, Y+47	; 0x2f
    29e4:	ee 23       	and	r30, r30
    29e6:	51 f7       	brne	.-44     	; 0x29bc <KEYPAD_Get_Pressed_Key+0x48>
	uint8_t key ;

	uint8_t flag;
	while(1)
	{
		for(i = 0; i<=4; i++)
    29e8:	1a 8a       	std	Y+18, r1	; 0x12
    29ea:	cb c0       	rjmp	.+406    	; 0x2b82 <KEYPAD_Get_Pressed_Key+0x20e>
		{
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_LOW);
    29ec:	8a 89       	ldd	r24, Y+18	; 0x12
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	ce 01       	movw	r24, r28
    29f4:	43 96       	adiw	r24, 0x13	; 19
    29f6:	fc 01       	movw	r30, r24
    29f8:	e2 0f       	add	r30, r18
    29fa:	f3 1f       	adc	r31, r19
    29fc:	20 81       	ld	r18, Z
    29fe:	83 e3       	ldi	r24, 0x33	; 51
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	62 2f       	mov	r22, r18
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>

			for(j = 0; j<=4; j++)
    2a0a:	19 8a       	std	Y+17, r1	; 0x11
    2a0c:	33 c0       	rjmp	.+102    	; 0x2a74 <KEYPAD_Get_Pressed_Key+0x100>
			{
				flag = Single_press(COL_PORT, cols[j]);
    2a0e:	89 89       	ldd	r24, Y+17	; 0x11
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	ce 01       	movw	r24, r28
    2a16:	47 96       	adiw	r24, 0x17	; 23
    2a18:	fc 01       	movw	r30, r24
    2a1a:	e2 0f       	add	r30, r18
    2a1c:	f3 1f       	adc	r31, r19
    2a1e:	20 81       	ld	r18, Z
    2a20:	80 e3       	ldi	r24, 0x30	; 48
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	62 2f       	mov	r22, r18
    2a26:	0e 94 4f 12 	call	0x249e	; 0x249e <Single_press>
    2a2a:	8f 87       	std	Y+15, r24	; 0x0f
				if(flag == pressed)
    2a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	f1 f4       	brne	.+60     	; 0x2a6e <KEYPAD_Get_Pressed_Key+0xfa>
				{
					key = KEYPAD_ARR[i][j];
    2a32:	8a 89       	ldd	r24, Y+18	; 0x12
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	89 89       	ldd	r24, Y+17	; 0x11
    2a3a:	48 2f       	mov	r20, r24
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	22 0f       	add	r18, r18
    2a40:	33 1f       	adc	r19, r19
    2a42:	22 0f       	add	r18, r18
    2a44:	33 1f       	adc	r19, r19
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	82 0f       	add	r24, r18
    2a4c:	93 1f       	adc	r25, r19
    2a4e:	84 0f       	add	r24, r20
    2a50:	95 1f       	adc	r25, r21
    2a52:	fc 01       	movw	r30, r24
    2a54:	7a 96       	adiw	r30, 0x1a	; 26
    2a56:	80 81       	ld	r24, Z
    2a58:	88 8b       	std	Y+16, r24	; 0x10
					return key;
    2a5a:	88 89       	ldd	r24, Y+16	; 0x10
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_HIGH);
			_delay_ms(10);

		}
	}
}
    2a5c:	af 96       	adiw	r28, 0x2f	; 47
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret
	{
		for(i = 0; i<=4; i++)
		{
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_LOW);

			for(j = 0; j<=4; j++)
    2a6e:	89 89       	ldd	r24, Y+17	; 0x11
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	89 8b       	std	Y+17, r24	; 0x11
    2a74:	89 89       	ldd	r24, Y+17	; 0x11
    2a76:	85 30       	cpi	r24, 0x05	; 5
    2a78:	50 f2       	brcs	.-108    	; 0x2a0e <KEYPAD_Get_Pressed_Key+0x9a>
					return key;

				}

			}
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_HIGH);
    2a7a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	ce 01       	movw	r24, r28
    2a82:	43 96       	adiw	r24, 0x13	; 19
    2a84:	fc 01       	movw	r30, r24
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	20 81       	ld	r18, Z
    2a8c:	83 e3       	ldi	r24, 0x33	; 51
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	62 2f       	mov	r22, r18
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 e2       	ldi	r26, 0x20	; 32
    2a9e:	b1 e4       	ldi	r27, 0x41	; 65
    2aa0:	8b 87       	std	Y+11, r24	; 0x0b
    2aa2:	9c 87       	std	Y+12, r25	; 0x0c
    2aa4:	ad 87       	std	Y+13, r26	; 0x0d
    2aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a e7       	ldi	r20, 0x7A	; 122
    2ab6:	55 e4       	ldi	r21, 0x45	; 69
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8f 83       	std	Y+7, r24	; 0x07
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	a9 87       	std	Y+9, r26	; 0x09
    2ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e8       	ldi	r20, 0x80	; 128
    2ad6:	5f e3       	ldi	r21, 0x3F	; 63
    2ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2adc:	88 23       	and	r24, r24
    2ade:	2c f4       	brge	.+10     	; 0x2aea <KEYPAD_Get_Pressed_Key+0x176>
		__ticks = 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	3f c0       	rjmp	.+126    	; 0x2b68 <KEYPAD_Get_Pressed_Key+0x1f4>
	else if (__tmp > 65535)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	4c f5       	brge	.+82     	; 0x2b54 <KEYPAD_Get_Pressed_Key+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <KEYPAD_Get_Pressed_Key+0x1d6>
    2b2c:	80 e9       	ldi	r24, 0x90	; 144
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <KEYPAD_Get_Pressed_Key+0x1c4>
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	69 f7       	brne	.-38     	; 0x2b2c <KEYPAD_Get_Pressed_Key+0x1b8>
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <KEYPAD_Get_Pressed_Key+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <KEYPAD_Get_Pressed_Key+0x200>
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t key ;

	uint8_t flag;
	while(1)
	{
		for(i = 0; i<=4; i++)
    2b7c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b7e:	8f 5f       	subi	r24, 0xFF	; 255
    2b80:	8a 8b       	std	Y+18, r24	; 0x12
    2b82:	8a 89       	ldd	r24, Y+18	; 0x12
    2b84:	85 30       	cpi	r24, 0x05	; 5
    2b86:	08 f4       	brcc	.+2      	; 0x2b8a <KEYPAD_Get_Pressed_Key+0x216>
    2b88:	31 cf       	rjmp	.-414    	; 0x29ec <KEYPAD_Get_Pressed_Key+0x78>
    2b8a:	2e cf       	rjmp	.-420    	; 0x29e8 <KEYPAD_Get_Pressed_Key+0x74>

00002b8c <latchbyte>:
#include "Lcd.h"
#include "stdlib.h"


static void latchbyte(uint8_t copy_u8Byte)
{
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	c7 54       	subi	r28, 0x47	; 71
    2b9a:	d0 40       	sbci	r29, 0x00	; 0
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e9 5b       	subi	r30, 0xB9	; 185
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 83       	st	Z, r24

	}
#elif(MODE == _4_BIT_MODE)
	{

		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOGIC_LOW);
    2bae:	89 e3       	ldi	r24, 0x39	; 57
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ed 5b       	subi	r30, 0xBD	; 189
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a0 e2       	ldi	r26, 0x20	; 32
    2bc6:	b1 e4       	ldi	r27, 0x41	; 65
    2bc8:	80 83       	st	Z, r24
    2bca:	91 83       	std	Z+1, r25	; 0x01
    2bcc:	a2 83       	std	Z+2, r26	; 0x02
    2bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	8e 01       	movw	r16, r28
    2bd2:	01 5c       	subi	r16, 0xC1	; 193
    2bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ed 5b       	subi	r30, 0xBD	; 189
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	60 81       	ld	r22, Z
    2bde:	71 81       	ldd	r23, Z+1	; 0x01
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	93 81       	ldd	r25, Z+3	; 0x03
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4a e7       	ldi	r20, 0x7A	; 122
    2bea:	55 e4       	ldi	r21, 0x45	; 69
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	80 83       	st	Z, r24
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	a2 83       	std	Z+2, r26	; 0x02
    2bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ff 96       	adiw	r30, 0x3f	; 63
    2c02:	60 81       	ld	r22, Z
    2c04:	71 81       	ldd	r23, Z+1	; 0x01
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	93 81       	ldd	r25, Z+3	; 0x03
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <latchbyte+0x98>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9e af       	std	Y+62, r25	; 0x3e
    2c20:	8d af       	std	Y+61, r24	; 0x3d
    2c22:	46 c0       	rjmp	.+140    	; 0x2cb0 <latchbyte+0x124>
	else if (__tmp > 65535)
    2c24:	fe 01       	movw	r30, r28
    2c26:	ff 96       	adiw	r30, 0x3f	; 63
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	64 f5       	brge	.+88     	; 0x2c98 <latchbyte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	fe 01       	movw	r30, r28
    2c42:	ed 5b       	subi	r30, 0xBD	; 189
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e2       	ldi	r20, 0x20	; 32
    2c54:	51 e4       	ldi	r21, 0x41	; 65
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	9e af       	std	Y+62, r25	; 0x3e
    2c6c:	8d af       	std	Y+61, r24	; 0x3d
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <latchbyte+0x102>
    2c70:	80 e9       	ldi	r24, 0x90	; 144
    2c72:	91 e0       	ldi	r25, 0x01	; 1
    2c74:	9c af       	std	Y+60, r25	; 0x3c
    2c76:	8b af       	std	Y+59, r24	; 0x3b
    2c78:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <latchbyte+0xf0>
    2c80:	9c af       	std	Y+60, r25	; 0x3c
    2c82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	9e af       	std	Y+62, r25	; 0x3e
    2c8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	69 f7       	brne	.-38     	; 0x2c70 <latchbyte+0xe4>
    2c96:	16 c0       	rjmp	.+44     	; 0x2cc4 <latchbyte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ff 96       	adiw	r30, 0x3f	; 63
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9e af       	std	Y+62, r25	; 0x3e
    2cae:	8d af       	std	Y+61, r24	; 0x3d
    2cb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cb4:	9a af       	std	Y+58, r25	; 0x3a
    2cb6:	89 af       	std	Y+57, r24	; 0x39
    2cb8:	89 ad       	ldd	r24, Y+57	; 0x39
    2cba:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <latchbyte+0x130>
    2cc0:	9a af       	std	Y+58, r25	; 0x3a
    2cc2:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,4));
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e9 5b       	subi	r30, 0xB9	; 185
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	80 71       	andi	r24, 0x10	; 16
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	95 95       	asr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	95 95       	asr	r25
    2cda:	87 95       	ror	r24
    2cdc:	95 95       	asr	r25
    2cde:	87 95       	ror	r24
    2ce0:	95 95       	asr	r25
    2ce2:	87 95       	ror	r24
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	86 e3       	ldi	r24, 0x36	; 54
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	42 2f       	mov	r20, r18
    2cee:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,5));
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e9 5b       	subi	r30, 0xB9	; 185
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	80 72       	andi	r24, 0x20	; 32
    2d00:	90 70       	andi	r25, 0x00	; 0
    2d02:	95 95       	asr	r25
    2d04:	87 95       	ror	r24
    2d06:	95 95       	asr	r25
    2d08:	87 95       	ror	r24
    2d0a:	95 95       	asr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	95 95       	asr	r25
    2d10:	87 95       	ror	r24
    2d12:	95 95       	asr	r25
    2d14:	87 95       	ror	r24
    2d16:	28 2f       	mov	r18, r24
    2d18:	86 e3       	ldi	r24, 0x36	; 54
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	42 2f       	mov	r20, r18
    2d20:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,6));
    2d24:	fe 01       	movw	r30, r28
    2d26:	e9 5b       	subi	r30, 0xB9	; 185
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	80 74       	andi	r24, 0x40	; 64
    2d32:	90 70       	andi	r25, 0x00	; 0
    2d34:	08 2e       	mov	r0, r24
    2d36:	89 2f       	mov	r24, r25
    2d38:	00 0c       	add	r0, r0
    2d3a:	88 1f       	adc	r24, r24
    2d3c:	99 0b       	sbc	r25, r25
    2d3e:	00 0c       	add	r0, r0
    2d40:	88 1f       	adc	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	28 2f       	mov	r18, r24
    2d46:	86 e3       	ldi	r24, 0x36	; 54
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	62 e0       	ldi	r22, 0x02	; 2
    2d4c:	42 2f       	mov	r20, r18
    2d4e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,7));
    2d52:	fe 01       	movw	r30, r28
    2d54:	e9 5b       	subi	r30, 0xB9	; 185
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	22 1f       	adc	r18, r18
    2d5e:	22 27       	eor	r18, r18
    2d60:	22 1f       	adc	r18, r18
    2d62:	86 e3       	ldi	r24, 0x36	; 54
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	64 e0       	ldi	r22, 0x04	; 4
    2d68:	42 2f       	mov	r20, r18
    2d6a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOGIC_HIGH);
    2d6e:	89 e3       	ldi	r24, 0x39	; 57
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	62 e0       	ldi	r22, 0x02	; 2
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e2       	ldi	r26, 0x20	; 32
    2d80:	b1 e4       	ldi	r27, 0x41	; 65
    2d82:	8d ab       	std	Y+53, r24	; 0x35
    2d84:	9e ab       	std	Y+54, r25	; 0x36
    2d86:	af ab       	std	Y+55, r26	; 0x37
    2d88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d90:	98 ad       	ldd	r25, Y+56	; 0x38
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a e7       	ldi	r20, 0x7A	; 122
    2d98:	55 e4       	ldi	r21, 0x45	; 69
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	89 ab       	std	Y+49, r24	; 0x31
    2da4:	9a ab       	std	Y+50, r25	; 0x32
    2da6:	ab ab       	std	Y+51, r26	; 0x33
    2da8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2daa:	69 a9       	ldd	r22, Y+49	; 0x31
    2dac:	7a a9       	ldd	r23, Y+50	; 0x32
    2dae:	8b a9       	ldd	r24, Y+51	; 0x33
    2db0:	9c a9       	ldd	r25, Y+52	; 0x34
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <latchbyte+0x240>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	98 ab       	std	Y+48, r25	; 0x30
    2dc8:	8f a7       	std	Y+47, r24	; 0x2f
    2dca:	3f c0       	rjmp	.+126    	; 0x2e4a <latchbyte+0x2be>
	else if (__tmp > 65535)
    2dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dce:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	4c f5       	brge	.+82     	; 0x2e36 <latchbyte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	6d a9       	ldd	r22, Y+53	; 0x35
    2de6:	7e a9       	ldd	r23, Y+54	; 0x36
    2de8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dea:	98 ad       	ldd	r25, Y+56	; 0x38
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	98 ab       	std	Y+48, r25	; 0x30
    2e0a:	8f a7       	std	Y+47, r24	; 0x2f
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <latchbyte+0x2a0>
    2e0e:	80 e9       	ldi	r24, 0x90	; 144
    2e10:	91 e0       	ldi	r25, 0x01	; 1
    2e12:	9e a7       	std	Y+46, r25	; 0x2e
    2e14:	8d a7       	std	Y+45, r24	; 0x2d
    2e16:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e18:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <latchbyte+0x28e>
    2e1e:	9e a7       	std	Y+46, r25	; 0x2e
    2e20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e24:	98 a9       	ldd	r25, Y+48	; 0x30
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	98 ab       	std	Y+48, r25	; 0x30
    2e2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	69 f7       	brne	.-38     	; 0x2e0e <latchbyte+0x282>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <latchbyte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e36:	69 a9       	ldd	r22, Y+49	; 0x31
    2e38:	7a a9       	ldd	r23, Y+50	; 0x32
    2e3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	98 ab       	std	Y+48, r25	; 0x30
    2e48:	8f a7       	std	Y+47, r24	; 0x2f
    2e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e4e:	9c a7       	std	Y+44, r25	; 0x2c
    2e50:	8b a7       	std	Y+43, r24	; 0x2b
    2e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <latchbyte+0x2ca>
    2e5a:	9c a7       	std	Y+44, r25	; 0x2c
    2e5c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOGIC_LOW);
    2e5e:	89 e3       	ldi	r24, 0x39	; 57
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	62 e0       	ldi	r22, 0x02	; 2
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	a0 e2       	ldi	r26, 0x20	; 32
    2e70:	b1 e4       	ldi	r27, 0x41	; 65
    2e72:	8f a3       	std	Y+39, r24	; 0x27
    2e74:	98 a7       	std	Y+40, r25	; 0x28
    2e76:	a9 a7       	std	Y+41, r26	; 0x29
    2e78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4a e7       	ldi	r20, 0x7A	; 122
    2e88:	55 e4       	ldi	r21, 0x45	; 69
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	8b a3       	std	Y+35, r24	; 0x23
    2e94:	9c a3       	std	Y+36, r25	; 0x24
    2e96:	ad a3       	std	Y+37, r26	; 0x25
    2e98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <latchbyte+0x330>
		__ticks = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9a a3       	std	Y+34, r25	; 0x22
    2eb8:	89 a3       	std	Y+33, r24	; 0x21
    2eba:	3f c0       	rjmp	.+126    	; 0x2f3a <latchbyte+0x3ae>
	else if (__tmp > 65535)
    2ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	4c f5       	brge	.+82     	; 0x2f26 <latchbyte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eda:	9a a5       	ldd	r25, Y+42	; 0x2a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9a a3       	std	Y+34, r25	; 0x22
    2efa:	89 a3       	std	Y+33, r24	; 0x21
    2efc:	0f c0       	rjmp	.+30     	; 0x2f1c <latchbyte+0x390>
    2efe:	80 e9       	ldi	r24, 0x90	; 144
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	98 a3       	std	Y+32, r25	; 0x20
    2f04:	8f 8f       	std	Y+31, r24	; 0x1f
    2f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f08:	98 a1       	ldd	r25, Y+32	; 0x20
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <latchbyte+0x37e>
    2f0e:	98 a3       	std	Y+32, r25	; 0x20
    2f10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	89 a1       	ldd	r24, Y+33	; 0x21
    2f14:	9a a1       	ldd	r25, Y+34	; 0x22
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	69 f7       	brne	.-38     	; 0x2efe <latchbyte+0x372>
    2f24:	14 c0       	rjmp	.+40     	; 0x2f4e <latchbyte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	6b a1       	ldd	r22, Y+35	; 0x23
    2f28:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9a a3       	std	Y+34, r25	; 0x22
    2f38:	89 a3       	std	Y+33, r24	; 0x21
    2f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f40:	8d 8f       	std	Y+29, r24	; 0x1d
    2f42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <latchbyte+0x3ba>
    2f4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f4c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,0));
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e9 5b       	subi	r30, 0xB9	; 185
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	28 2f       	mov	r18, r24
    2f58:	21 70       	andi	r18, 0x01	; 1
    2f5a:	86 e3       	ldi	r24, 0x36	; 54
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	42 2f       	mov	r20, r18
    2f62:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,1));
    2f66:	fe 01       	movw	r30, r28
    2f68:	e9 5b       	subi	r30, 0xB9	; 185
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	80 81       	ld	r24, Z
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	82 70       	andi	r24, 0x02	; 2
    2f74:	90 70       	andi	r25, 0x00	; 0
    2f76:	95 95       	asr	r25
    2f78:	87 95       	ror	r24
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	86 e3       	ldi	r24, 0x36	; 54
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	61 e0       	ldi	r22, 0x01	; 1
    2f82:	42 2f       	mov	r20, r18
    2f84:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,2));
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e9 5b       	subi	r30, 0xB9	; 185
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	84 70       	andi	r24, 0x04	; 4
    2f96:	90 70       	andi	r25, 0x00	; 0
    2f98:	95 95       	asr	r25
    2f9a:	87 95       	ror	r24
    2f9c:	95 95       	asr	r25
    2f9e:	87 95       	ror	r24
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	86 e3       	ldi	r24, 0x36	; 54
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	62 e0       	ldi	r22, 0x02	; 2
    2fa8:	42 2f       	mov	r20, r18
    2faa:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,3));
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e9 5b       	subi	r30, 0xB9	; 185
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	88 70       	andi	r24, 0x08	; 8
    2fbc:	90 70       	andi	r25, 0x00	; 0
    2fbe:	95 95       	asr	r25
    2fc0:	87 95       	ror	r24
    2fc2:	95 95       	asr	r25
    2fc4:	87 95       	ror	r24
    2fc6:	95 95       	asr	r25
    2fc8:	87 95       	ror	r24
    2fca:	28 2f       	mov	r18, r24
    2fcc:	86 e3       	ldi	r24, 0x36	; 54
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	64 e0       	ldi	r22, 0x04	; 4
    2fd2:	42 2f       	mov	r20, r18
    2fd4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOGIC_HIGH);
    2fd8:	89 e3       	ldi	r24, 0x39	; 57
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	62 e0       	ldi	r22, 0x02	; 2
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	a0 e2       	ldi	r26, 0x20	; 32
    2fea:	b1 e4       	ldi	r27, 0x41	; 65
    2fec:	89 8f       	std	Y+25, r24	; 0x19
    2fee:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a e7       	ldi	r20, 0x7A	; 122
    3002:	55 e4       	ldi	r21, 0x45	; 69
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	8d 8b       	std	Y+21, r24	; 0x15
    300e:	9e 8b       	std	Y+22, r25	; 0x16
    3010:	af 8b       	std	Y+23, r26	; 0x17
    3012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3014:	6d 89       	ldd	r22, Y+21	; 0x15
    3016:	7e 89       	ldd	r23, Y+22	; 0x16
    3018:	8f 89       	ldd	r24, Y+23	; 0x17
    301a:	98 8d       	ldd	r25, Y+24	; 0x18
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	2c f4       	brge	.+10     	; 0x3036 <latchbyte+0x4aa>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9c 8b       	std	Y+20, r25	; 0x14
    3032:	8b 8b       	std	Y+19, r24	; 0x13
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <latchbyte+0x528>
	else if (__tmp > 65535)
    3036:	6d 89       	ldd	r22, Y+21	; 0x15
    3038:	7e 89       	ldd	r23, Y+22	; 0x16
    303a:	8f 89       	ldd	r24, Y+23	; 0x17
    303c:	98 8d       	ldd	r25, Y+24	; 0x18
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	4c f5       	brge	.+82     	; 0x30a0 <latchbyte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304e:	69 8d       	ldd	r22, Y+25	; 0x19
    3050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	51 e4       	ldi	r21, 0x41	; 65
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9c 8b       	std	Y+20, r25	; 0x14
    3074:	8b 8b       	std	Y+19, r24	; 0x13
    3076:	0f c0       	rjmp	.+30     	; 0x3096 <latchbyte+0x50a>
    3078:	80 e9       	ldi	r24, 0x90	; 144
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	9a 8b       	std	Y+18, r25	; 0x12
    307e:	89 8b       	std	Y+17, r24	; 0x11
    3080:	89 89       	ldd	r24, Y+17	; 0x11
    3082:	9a 89       	ldd	r25, Y+18	; 0x12
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <latchbyte+0x4f8>
    3088:	9a 8b       	std	Y+18, r25	; 0x12
    308a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308c:	8b 89       	ldd	r24, Y+19	; 0x13
    308e:	9c 89       	ldd	r25, Y+20	; 0x14
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	9c 8b       	std	Y+20, r25	; 0x14
    3094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	8b 89       	ldd	r24, Y+19	; 0x13
    3098:	9c 89       	ldd	r25, Y+20	; 0x14
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	69 f7       	brne	.-38     	; 0x3078 <latchbyte+0x4ec>
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <latchbyte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	6d 89       	ldd	r22, Y+21	; 0x15
    30a2:	7e 89       	ldd	r23, Y+22	; 0x16
    30a4:	8f 89       	ldd	r24, Y+23	; 0x17
    30a6:	98 8d       	ldd	r25, Y+24	; 0x18
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	8b 89       	ldd	r24, Y+19	; 0x13
    30b6:	9c 89       	ldd	r25, Y+20	; 0x14
    30b8:	98 8b       	std	Y+16, r25	; 0x10
    30ba:	8f 87       	std	Y+15, r24	; 0x0f
    30bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    30be:	98 89       	ldd	r25, Y+16	; 0x10
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <latchbyte+0x534>
    30c4:	98 8b       	std	Y+16, r25	; 0x10
    30c6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOGIC_LOW);
    30c8:	89 e3       	ldi	r24, 0x39	; 57
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a8 e4       	ldi	r26, 0x48	; 72
    30da:	b2 e4       	ldi	r27, 0x42	; 66
    30dc:	8b 87       	std	Y+11, r24	; 0x0b
    30de:	9c 87       	std	Y+12, r25	; 0x0c
    30e0:	ad 87       	std	Y+13, r26	; 0x0d
    30e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a e7       	ldi	r20, 0x7A	; 122
    30f2:	55 e4       	ldi	r21, 0x45	; 69
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8f 83       	std	Y+7, r24	; 0x07
    30fe:	98 87       	std	Y+8, r25	; 0x08
    3100:	a9 87       	std	Y+9, r26	; 0x09
    3102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3104:	6f 81       	ldd	r22, Y+7	; 0x07
    3106:	78 85       	ldd	r23, Y+8	; 0x08
    3108:	89 85       	ldd	r24, Y+9	; 0x09
    310a:	9a 85       	ldd	r25, Y+10	; 0x0a
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5f e3       	ldi	r21, 0x3F	; 63
    3114:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3118:	88 23       	and	r24, r24
    311a:	2c f4       	brge	.+10     	; 0x3126 <latchbyte+0x59a>
		__ticks = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9e 83       	std	Y+6, r25	; 0x06
    3122:	8d 83       	std	Y+5, r24	; 0x05
    3124:	3f c0       	rjmp	.+126    	; 0x31a4 <latchbyte+0x618>
	else if (__tmp > 65535)
    3126:	6f 81       	ldd	r22, Y+7	; 0x07
    3128:	78 85       	ldd	r23, Y+8	; 0x08
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	9a 85       	ldd	r25, Y+10	; 0x0a
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	3f ef       	ldi	r19, 0xFF	; 255
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	57 e4       	ldi	r21, 0x47	; 71
    3136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	4c f5       	brge	.+82     	; 0x3190 <latchbyte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3140:	7c 85       	ldd	r23, Y+12	; 0x0c
    3142:	8d 85       	ldd	r24, Y+13	; 0x0d
    3144:	9e 85       	ldd	r25, Y+14	; 0x0e
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	0f c0       	rjmp	.+30     	; 0x3186 <latchbyte+0x5fa>
    3168:	80 e9       	ldi	r24, 0x90	; 144
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	9c 83       	std	Y+4, r25	; 0x04
    316e:	8b 83       	std	Y+3, r24	; 0x03
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	9c 81       	ldd	r25, Y+4	; 0x04
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <latchbyte+0x5e8>
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	9e 81       	ldd	r25, Y+6	; 0x06
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	69 f7       	brne	.-38     	; 0x3168 <latchbyte+0x5dc>
    318e:	14 c0       	rjmp	.+40     	; 0x31b8 <latchbyte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3190:	6f 81       	ldd	r22, Y+7	; 0x07
    3192:	78 85       	ldd	r23, Y+8	; 0x08
    3194:	89 85       	ldd	r24, Y+9	; 0x09
    3196:	9a 85       	ldd	r25, Y+10	; 0x0a
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <latchbyte+0x624>
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

	}
#endif
}
    31b8:	c9 5b       	subi	r28, 0xB9	; 185
    31ba:	df 4f       	sbci	r29, 0xFF	; 255
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	08 95       	ret

000031d0 <H_LCD_void_IniT>:



/*Initialization of LCD with the required mode and configuration*/
void H_LCD_void_IniT (void)
{
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	6c 97       	sbiw	r28, 0x1c	; 28
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	a0 ef       	ldi	r26, 0xF0	; 240
    31ea:	b1 e4       	ldi	r27, 0x41	; 65
    31ec:	89 8f       	std	Y+25, r24	; 0x19
    31ee:	9a 8f       	std	Y+26, r25	; 0x1a
    31f0:	ab 8f       	std	Y+27, r26	; 0x1b
    31f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f4:	69 8d       	ldd	r22, Y+25	; 0x19
    31f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a e7       	ldi	r20, 0x7A	; 122
    3202:	55 e4       	ldi	r21, 0x45	; 69
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8d 8b       	std	Y+21, r24	; 0x15
    320e:	9e 8b       	std	Y+22, r25	; 0x16
    3210:	af 8b       	std	Y+23, r26	; 0x17
    3212:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3214:	6d 89       	ldd	r22, Y+21	; 0x15
    3216:	7e 89       	ldd	r23, Y+22	; 0x16
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	98 8d       	ldd	r25, Y+24	; 0x18
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3228:	88 23       	and	r24, r24
    322a:	2c f4       	brge	.+10     	; 0x3236 <H_LCD_void_IniT+0x66>
		__ticks = 1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9c 8b       	std	Y+20, r25	; 0x14
    3232:	8b 8b       	std	Y+19, r24	; 0x13
    3234:	3f c0       	rjmp	.+126    	; 0x32b4 <H_LCD_void_IniT+0xe4>
	else if (__tmp > 65535)
    3236:	6d 89       	ldd	r22, Y+21	; 0x15
    3238:	7e 89       	ldd	r23, Y+22	; 0x16
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	98 8d       	ldd	r25, Y+24	; 0x18
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	3f ef       	ldi	r19, 0xFF	; 255
    3242:	4f e7       	ldi	r20, 0x7F	; 127
    3244:	57 e4       	ldi	r21, 0x47	; 71
    3246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324a:	18 16       	cp	r1, r24
    324c:	4c f5       	brge	.+82     	; 0x32a0 <H_LCD_void_IniT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	69 8d       	ldd	r22, Y+25	; 0x19
    3250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	0f c0       	rjmp	.+30     	; 0x3296 <H_LCD_void_IniT+0xc6>
    3278:	80 e9       	ldi	r24, 0x90	; 144
    327a:	91 e0       	ldi	r25, 0x01	; 1
    327c:	9a 8b       	std	Y+18, r25	; 0x12
    327e:	89 8b       	std	Y+17, r24	; 0x11
    3280:	89 89       	ldd	r24, Y+17	; 0x11
    3282:	9a 89       	ldd	r25, Y+18	; 0x12
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <H_LCD_void_IniT+0xb4>
    3288:	9a 8b       	std	Y+18, r25	; 0x12
    328a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	9c 8b       	std	Y+20, r25	; 0x14
    3294:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	8b 89       	ldd	r24, Y+19	; 0x13
    3298:	9c 89       	ldd	r25, Y+20	; 0x14
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	69 f7       	brne	.-38     	; 0x3278 <H_LCD_void_IniT+0xa8>
    329e:	14 c0       	rjmp	.+40     	; 0x32c8 <H_LCD_void_IniT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	6d 89       	ldd	r22, Y+21	; 0x15
    32a2:	7e 89       	ldd	r23, Y+22	; 0x16
    32a4:	8f 89       	ldd	r24, Y+23	; 0x17
    32a6:	98 8d       	ldd	r25, Y+24	; 0x18
    32a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	9c 8b       	std	Y+20, r25	; 0x14
    32b2:	8b 8b       	std	Y+19, r24	; 0x13
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	98 8b       	std	Y+16, r25	; 0x10
    32ba:	8f 87       	std	Y+15, r24	; 0x0f
    32bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32be:	98 89       	ldd	r25, Y+16	; 0x10
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <H_LCD_void_IniT+0xf0>
    32c4:	98 8b       	std	Y+16, r25	; 0x10
    32c6:	8f 87       	std	Y+15, r24	; 0x0f
	/*Configure the direction of RS and E pins as o/p pins*/
	_delay_ms(30);
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, OUTPUT);
    32c8:	89 e3       	ldi	r24, 0x39	; 57
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	63 e0       	ldi	r22, 0x03	; 3
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, OUTPUT);
    32d4:	89 e3       	ldi	r24, 0x39	; 57
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	62 e0       	ldi	r22, 0x02	; 2
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	a0 ea       	ldi	r26, 0xA0	; 160
    32e6:	b1 e4       	ldi	r27, 0x41	; 65
    32e8:	8b 87       	std	Y+11, r24	; 0x0b
    32ea:	9c 87       	std	Y+12, r25	; 0x0c
    32ec:	ad 87       	std	Y+13, r26	; 0x0d
    32ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a e7       	ldi	r20, 0x7A	; 122
    32fe:	55 e4       	ldi	r21, 0x45	; 69
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8f 83       	std	Y+7, r24	; 0x07
    330a:	98 87       	std	Y+8, r25	; 0x08
    330c:	a9 87       	std	Y+9, r26	; 0x09
    330e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3310:	6f 81       	ldd	r22, Y+7	; 0x07
    3312:	78 85       	ldd	r23, Y+8	; 0x08
    3314:	89 85       	ldd	r24, Y+9	; 0x09
    3316:	9a 85       	ldd	r25, Y+10	; 0x0a
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e8       	ldi	r20, 0x80	; 128
    331e:	5f e3       	ldi	r21, 0x3F	; 63
    3320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3324:	88 23       	and	r24, r24
    3326:	2c f4       	brge	.+10     	; 0x3332 <H_LCD_void_IniT+0x162>
		__ticks = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	8d 83       	std	Y+5, r24	; 0x05
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <H_LCD_void_IniT+0x1e0>
	else if (__tmp > 65535)
    3332:	6f 81       	ldd	r22, Y+7	; 0x07
    3334:	78 85       	ldd	r23, Y+8	; 0x08
    3336:	89 85       	ldd	r24, Y+9	; 0x09
    3338:	9a 85       	ldd	r25, Y+10	; 0x0a
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	4c f5       	brge	.+82     	; 0x339c <H_LCD_void_IniT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334a:	6b 85       	ldd	r22, Y+11	; 0x0b
    334c:	7c 85       	ldd	r23, Y+12	; 0x0c
    334e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3350:	9e 85       	ldd	r25, Y+14	; 0x0e
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e2       	ldi	r20, 0x20	; 32
    3358:	51 e4       	ldi	r21, 0x41	; 65
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9e 83       	std	Y+6, r25	; 0x06
    3370:	8d 83       	std	Y+5, r24	; 0x05
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <H_LCD_void_IniT+0x1c2>
    3374:	80 e9       	ldi	r24, 0x90	; 144
    3376:	91 e0       	ldi	r25, 0x01	; 1
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	8b 83       	std	Y+3, r24	; 0x03
    337c:	8b 81       	ldd	r24, Y+3	; 0x03
    337e:	9c 81       	ldd	r25, Y+4	; 0x04
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <H_LCD_void_IniT+0x1b0>
    3384:	9c 83       	std	Y+4, r25	; 0x04
    3386:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	8d 81       	ldd	r24, Y+5	; 0x05
    338a:	9e 81       	ldd	r25, Y+6	; 0x06
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	69 f7       	brne	.-38     	; 0x3374 <H_LCD_void_IniT+0x1a4>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <H_LCD_void_IniT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339c:	6f 81       	ldd	r22, Y+7	; 0x07
    339e:	78 85       	ldd	r23, Y+8	; 0x08
    33a0:	89 85       	ldd	r24, Y+9	; 0x09
    33a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	9a 81       	ldd	r25, Y+2	; 0x02
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <H_LCD_void_IniT+0x1ec>
    33c0:	9a 83       	std	Y+2, r25	; 0x02
    33c2:	89 83       	std	Y+1, r24	; 0x01

	/*LCD power ON delay is always 15 ms*/
	_delay_ms(20);
#if(MODE == _4_BIT_MODE)
	{
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, OUTPUT);
    33c4:	86 e3       	ldi	r24, 0x36	; 54
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	41 e0       	ldi	r20, 0x01	; 1
    33cc:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, OUTPUT);
    33d0:	86 e3       	ldi	r24, 0x36	; 54
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, OUTPUT);
    33dc:	86 e3       	ldi	r24, 0x36	; 54
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	62 e0       	ldi	r22, 0x02	; 2
    33e2:	41 e0       	ldi	r20, 0x01	; 1
    33e4:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, OUTPUT);
    33e8:	86 e3       	ldi	r24, 0x36	; 54
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	64 e0       	ldi	r22, 0x04	; 4
    33ee:	41 e0       	ldi	r20, 0x01	; 1
    33f0:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
		/*Send initialization commands for 4 bit mode*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT1);
    33f4:	83 e3       	ldi	r24, 0x33	; 51
    33f6:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT2);
    33fa:	82 e3       	ldi	r24, 0x32	; 50
    33fc:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>

		/*choose the mode of operation of LCD*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS);
    3400:	88 e2       	ldi	r24, 0x28	; 40
    3402:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_8BITS);
	}
#endif

		/*Send initialization display commands*/
	H_LCD_void_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    3406:	8c e0       	ldi	r24, 0x0C	; 12
    3408:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
	}
    3412:	6c 96       	adiw	r28, 0x1c	; 28
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	08 95       	ret

00003424 <H_LCD_void_sendCommand>:



/*Send the required command to the LCD*/
void H_LCD_void_sendCommand (uint8_t copy_u8command)
{
    3424:	df 93       	push	r29
    3426:	cf 93       	push	r28
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	2f 97       	sbiw	r28, 0x0f	; 15
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 0 for sending command*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOGIC_LOW);
    343a:	89 e3       	ldi	r24, 0x39	; 57
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	63 e0       	ldi	r22, 0x03	; 3
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	a0 e8       	ldi	r26, 0x80	; 128
    344c:	bf e3       	ldi	r27, 0x3F	; 63
    344e:	8b 87       	std	Y+11, r24	; 0x0b
    3450:	9c 87       	std	Y+12, r25	; 0x0c
    3452:	ad 87       	std	Y+13, r26	; 0x0d
    3454:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3456:	6b 85       	ldd	r22, Y+11	; 0x0b
    3458:	7c 85       	ldd	r23, Y+12	; 0x0c
    345a:	8d 85       	ldd	r24, Y+13	; 0x0d
    345c:	9e 85       	ldd	r25, Y+14	; 0x0e
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	4a e7       	ldi	r20, 0x7A	; 122
    3464:	55 e4       	ldi	r21, 0x45	; 69
    3466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	8f 83       	std	Y+7, r24	; 0x07
    3470:	98 87       	std	Y+8, r25	; 0x08
    3472:	a9 87       	std	Y+9, r26	; 0x09
    3474:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3476:	6f 81       	ldd	r22, Y+7	; 0x07
    3478:	78 85       	ldd	r23, Y+8	; 0x08
    347a:	89 85       	ldd	r24, Y+9	; 0x09
    347c:	9a 85       	ldd	r25, Y+10	; 0x0a
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e8       	ldi	r20, 0x80	; 128
    3484:	5f e3       	ldi	r21, 0x3F	; 63
    3486:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348a:	88 23       	and	r24, r24
    348c:	2c f4       	brge	.+10     	; 0x3498 <H_LCD_void_sendCommand+0x74>
		__ticks = 1;
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	9e 83       	std	Y+6, r25	; 0x06
    3494:	8d 83       	std	Y+5, r24	; 0x05
    3496:	3f c0       	rjmp	.+126    	; 0x3516 <H_LCD_void_sendCommand+0xf2>
	else if (__tmp > 65535)
    3498:	6f 81       	ldd	r22, Y+7	; 0x07
    349a:	78 85       	ldd	r23, Y+8	; 0x08
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	3f ef       	ldi	r19, 0xFF	; 255
    34a4:	4f e7       	ldi	r20, 0x7F	; 127
    34a6:	57 e4       	ldi	r21, 0x47	; 71
    34a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ac:	18 16       	cp	r1, r24
    34ae:	4c f5       	brge	.+82     	; 0x3502 <H_LCD_void_sendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e2       	ldi	r20, 0x20	; 32
    34be:	51 e4       	ldi	r21, 0x41	; 65
    34c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    34d6:	8d 83       	std	Y+5, r24	; 0x05
    34d8:	0f c0       	rjmp	.+30     	; 0x34f8 <H_LCD_void_sendCommand+0xd4>
    34da:	80 e9       	ldi	r24, 0x90	; 144
    34dc:	91 e0       	ldi	r25, 0x01	; 1
    34de:	9c 83       	std	Y+4, r25	; 0x04
    34e0:	8b 83       	std	Y+3, r24	; 0x03
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	9c 81       	ldd	r25, Y+4	; 0x04
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <H_LCD_void_sendCommand+0xc2>
    34ea:	9c 83       	std	Y+4, r25	; 0x04
    34ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	9e 81       	ldd	r25, Y+6	; 0x06
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	9e 83       	std	Y+6, r25	; 0x06
    34f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f8:	8d 81       	ldd	r24, Y+5	; 0x05
    34fa:	9e 81       	ldd	r25, Y+6	; 0x06
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	69 f7       	brne	.-38     	; 0x34da <H_LCD_void_sendCommand+0xb6>
    3500:	14 c0       	rjmp	.+40     	; 0x352a <H_LCD_void_sendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3502:	6f 81       	ldd	r22, Y+7	; 0x07
    3504:	78 85       	ldd	r23, Y+8	; 0x08
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	9a 85       	ldd	r25, Y+10	; 0x0a
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9e 83       	std	Y+6, r25	; 0x06
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	9a 83       	std	Y+2, r25	; 0x02
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	9a 81       	ldd	r25, Y+2	; 0x02
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <H_LCD_void_sendCommand+0xfe>
    3526:	9a 83       	std	Y+2, r25	; 0x02
    3528:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	latchbyte(copy_u8command);
    352a:	8f 85       	ldd	r24, Y+15	; 0x0f
    352c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <latchbyte>
}
    3530:	2f 96       	adiw	r28, 0x0f	; 15
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <H_LCD_void_sendData>:


/*Display the required character on the LCD*/
void H_LCD_void_sendData(uint8_t copy_u8data)
{
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	0f 92       	push	r0
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOGIC_HIGH);
    354e:	89 e3       	ldi	r24, 0x39	; 57
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	63 e0       	ldi	r22, 0x03	; 3
    3554:	41 e0       	ldi	r20, 0x01	; 1
    3556:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	latchbyte(copy_u8data);
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <latchbyte>

}
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <H_LCD_void_sendString>:

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	00 d0       	rcall	.+0      	; 0x356e <H_LCD_void_sendString+0x6>
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	0a c0       	rjmp	.+20     	; 0x358c <H_LCD_void_sendString+0x24>
	while (*(pstr)!= NULL)
	{
		H_LCD_void_sendData(*pstr);
    3578:	e9 81       	ldd	r30, Y+1	; 0x01
    357a:	fa 81       	ldd	r31, Y+2	; 0x02
    357c:	80 81       	ld	r24, Z
    357e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <H_LCD_void_sendData>
		pstr++;
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	01 96       	adiw	r24, 0x01	; 1
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
}

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
	while (*(pstr)!= NULL)
    358c:	e9 81       	ldd	r30, Y+1	; 0x01
    358e:	fa 81       	ldd	r31, Y+2	; 0x02
    3590:	80 81       	ld	r24, Z
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	79 f7       	brne	.-34     	; 0x3578 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <H_LCD_int_to_string>:


void H_LCD_int_to_string(int data)
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	62 97       	sbiw	r28, 0x12	; 18
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	9a 8b       	std	Y+18, r25	; 0x12
    35ba:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /*array to hold the ASCII result of each number*/
		itoa(data,buff,10); /*itoa c function to convert the integer data to corresponding ASCII vale, 10 --> base 10 for decimal*/
    35bc:	89 89       	ldd	r24, Y+17	; 0x11
    35be:	9a 89       	ldd	r25, Y+18	; 0x12
    35c0:	9e 01       	movw	r18, r28
    35c2:	2f 5f       	subi	r18, 0xFF	; 255
    35c4:	3f 4f       	sbci	r19, 0xFF	; 255
    35c6:	b9 01       	movw	r22, r18
    35c8:	4a e0       	ldi	r20, 0x0A	; 10
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	0e 94 3a 22 	call	0x4474	; 0x4474 <itoa>
		H_LCD_void_sendString(buff);
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	0e 94 b4 1a 	call	0x3568	; 0x3568 <H_LCD_void_sendString>
}
    35d8:	62 96       	adiw	r28, 0x12	; 18
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <H_LCD_void_gotoXY+0x6>
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <H_LCD_void_gotoXY+0x8>
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <H_LCD_void_gotoXY+0xa>
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    35fc:	80 e8       	ldi	r24, 0x80	; 128
    35fe:	89 83       	std	Y+1, r24	; 0x01
    3600:	80 ec       	ldi	r24, 0xC0	; 192
    3602:	8a 83       	std	Y+2, r24	; 0x02
    3604:	84 e9       	ldi	r24, 0x94	; 148
    3606:	8b 83       	std	Y+3, r24	; 0x03
    3608:	84 ed       	ldi	r24, 0xD4	; 212
    360a:	8c 83       	std	Y+4, r24	; 0x04
	H_LCD_void_sendCommand(Local_U8_Arr[copy_u8Row] + copy_u8Col);
    360c:	8d 81       	ldd	r24, Y+5	; 0x05
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	ce 01       	movw	r24, r28
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	fc 01       	movw	r30, r24
    3618:	e2 0f       	add	r30, r18
    361a:	f3 1f       	adc	r31, r19
    361c:	90 81       	ld	r25, Z
    361e:	8e 81       	ldd	r24, Y+6	; 0x06
    3620:	89 0f       	add	r24, r25
    3622:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
}
    3626:	26 96       	adiw	r28, 0x06	; 6
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <H_Lcd_Void_Clear>:


void H_Lcd_Void_Clear()
{
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
}
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <Init_temp>:

#include "LM35.h"
#include "LCD.h"

void Init_temp(void)
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	00 d0       	rcall	.+0      	; 0x3652 <Init_temp+0x6>
    3652:	00 d0       	rcall	.+0      	; 0x3654 <Init_temp+0x8>
    3654:	0f 92       	push	r0
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62

	ADC_ConfigType ADC_Object;

	ADC_Object.ref_volt=Internal_AREF;
    365a:	83 e0       	ldi	r24, 0x03	; 3
    365c:	89 83       	std	Y+1, r24	; 0x01
	ADC_Object.prescaler=Div_Factor128;
    365e:	87 e0       	ldi	r24, 0x07	; 7
    3660:	8a 83       	std	Y+2, r24	; 0x02
	ADC_Object.AutoTrigger=OFF;
    3662:	1b 82       	std	Y+3, r1	; 0x03
	ADC_init(&ADC_Object);
    3664:	ce 01       	movw	r24, r28
    3666:	01 96       	adiw	r24, 0x01	; 1
    3668:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
}
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <Read_Temp>:
uint16 Read_Temp(void)
{
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	00 d0       	rcall	.+0      	; 0x3682 <Read_Temp+0x6>
    3682:	0f 92       	push	r0
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
	uint16 digital_value;
	uint8 Temp;
	digital_value=	ADC_getDigitalValueSynchNonBlocking(channel_1);
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	0e 94 9a 07 	call	0xf34	; 0xf34 <ADC_getDigitalValueSynchNonBlocking>
    368e:	9b 83       	std	Y+3, r25	; 0x03
    3690:	8a 83       	std	Y+2, r24	; 0x02

	Temp = (uint8)(((uint32)digital_value*150*2.65)/(ADC_MAXIMUM_VALUE*1.5));
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	9b 81       	ldd	r25, Y+3	; 0x03
    3696:	cc 01       	movw	r24, r24
    3698:	a0 e0       	ldi	r26, 0x00	; 0
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	26 e9       	ldi	r18, 0x96	; 150
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	50 e0       	ldi	r21, 0x00	; 0
    36a4:	bc 01       	movw	r22, r24
    36a6:	cd 01       	movw	r24, r26
    36a8:	0e 94 9b 21 	call	0x4336	; 0x4336 <__mulsi3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	bc 01       	movw	r22, r24
    36be:	cd 01       	movw	r24, r26
    36c0:	2a e9       	ldi	r18, 0x9A	; 154
    36c2:	39 e9       	ldi	r19, 0x99	; 153
    36c4:	49 e2       	ldi	r20, 0x29	; 41
    36c6:	50 e4       	ldi	r21, 0x40	; 64
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 ed       	ldi	r19, 0xD0	; 208
    36d8:	4f eb       	ldi	r20, 0xBF	; 191
    36da:	54 e4       	ldi	r21, 0x44	; 68
    36dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	bc 01       	movw	r22, r24
    36e6:	cd 01       	movw	r24, r26
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	89 83       	std	Y+1, r24	; 0x01

	//	temp=(float32)((digital_value*((float32)ADC_REF_VOLT_VALUE/(float32)ADC_MAXIMUM_VALUE)))*1000;
	//	Temp = temp / 10;
	return Temp;
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	88 2f       	mov	r24, r24
    36f6:	90 e0       	ldi	r25, 0x00	; 0
}
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	08 95       	ret

00003704 <DcMotor_Init>:
 *                         Function Definitions                                *
 *******************************************************************************/
//TIMER0_CONFIG timer = {FAST_PWM,CLEAR_OC0,INVERTING_MODE,CLK_DIV_1024};

void DcMotor_Init(void)
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	00 d0       	rcall	.+0      	; 0x370a <DcMotor_Init+0x6>
    370a:	00 d0       	rcall	.+0      	; 0x370c <DcMotor_Init+0x8>
    370c:	0f 92       	push	r0
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CONFIG timer;
	timer.TIMER0_MODES=FAST_PWM;
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	89 83       	std	Y+1, r24	; 0x01
	timer.PRESCALER=CLK_DIV_1024;
    3716:	85 e0       	ldi	r24, 0x05	; 5
    3718:	8c 83       	std	Y+4, r24	; 0x04
	timer.PWM_MODE=NON_INVERTING_MODE;
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	8b 83       	std	Y+3, r24	; 0x03

	//timer.NON_PWM_MODE = TOGGLE_OC0;
	//timer.NON_PWM_MODE= SET_OC0;
	Timer_Init(&timer);
    371e:	ce 01       	movw	r24, r28
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Timer_Init>


	/* Setup the direction for the two motor pins through the GPIO driver */
	DIO_voidSetPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,OUTPUT);
    3726:	83 e3       	ldi	r24, 0x33	; 51
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,OUTPUT);
    3732:	83 e3       	ldi	r24, 0x33	; 51
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	41 e0       	ldi	r20, 0x01	; 1
    373a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>


	/* Stop the DC-Motor at the beginning through the GPIO driver */
	DIO_voidSetPinValue(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    373e:	83 e3       	ldi	r24, 0x33	; 51
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	40 e0       	ldi	r20, 0x00	; 0
    3746:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
    374a:	83 e3       	ldi	r24, 0x33	; 51
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	61 e0       	ldi	r22, 0x01	; 1
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>

}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	00 d0       	rcall	.+0      	; 0x376c <DcMotor_Rotate+0x6>
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	89 83       	std	Y+1, r24	; 0x01
    3772:	6a 83       	std	Y+2, r22	; 0x02

	DIO_voidSetPinDirection(PORTB ,PIN3_ID ,OUTPUT);  //OC0 AS OUTPUT
    3774:	86 e3       	ldi	r24, 0x36	; 54
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	63 e0       	ldi	r22, 0x03	; 3
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	//uint8 duty = ((float)speed/100)*255;
	setFastPWM(speed,NON_INVERTING_MODE);
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	62 e0       	ldi	r22, 0x02	; 2
    3784:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <setFastPWM>
	//	setphaseCorrectPWM(speed);
	if (state == Stop)
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	88 23       	and	r24, r24
    378c:	69 f4       	brne	.+26     	; 0x37a8 <DcMotor_Rotate+0x42>
	{
		// Stop the motor
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    378e:	83 e3       	ldi	r24, 0x33	; 51
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
    379a:	83 e3       	ldi	r24, 0x33	; 51
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    37a6:	1f c0       	rjmp	.+62     	; 0x37e6 <DcMotor_Rotate+0x80>
		//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_HIGH);

	}
	else if (state == Clockwise)
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	69 f4       	brne	.+26     	; 0x37c8 <DcMotor_Rotate+0x62>
	{
		// Rotate the motor --> clock wise
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_HIGH);
    37ae:	83 e3       	ldi	r24, 0x33	; 51
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	41 e0       	ldi	r20, 0x01	; 1
    37b6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
    37ba:	83 e3       	ldi	r24, 0x33	; 51
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    37c6:	0f c0       	rjmp	.+30     	; 0x37e6 <DcMotor_Rotate+0x80>
	}
	else if (state == Anti_Clockwise)
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	61 f4       	brne	.+24     	; 0x37e6 <DcMotor_Rotate+0x80>
	{
		// Rotate the motor --> anti-clock wise
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    37ce:	83 e3       	ldi	r24, 0x33	; 51
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_HIGH);
    37da:	83 e3       	ldi	r24, 0x33	; 51
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	41 e0       	ldi	r20, 0x01	; 1
    37e2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	}

}
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <RTC_voidInit>:

//time_t time_res;
//year_t date_res;

/* this function should initialize TWI with the speed required to operate RTC -> */
void RTC_voidInit(void){
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <RTC_voidInit+0x6>
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62

	/* enable the oscillator (CH bit = 0) during initial configuration */
	//CLEAR_BIT(SECONDS_REG,PIN7_ID);
	TWI_ConfigType TWI_obj;
	TWI_obj.prescalar=F_CPU64;
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	89 83       	std	Y+1, r24	; 0x01
	TWI_obj.speed=TWI_SPEED_100;
    37fe:	88 e4       	ldi	r24, 0x48	; 72
    3800:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&TWI_obj);
    3802:	ce 01       	movw	r24, r28
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <TWI_init>

}
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	cf 91       	pop	r28
    3810:	df 91       	pop	r29
    3812:	08 95       	ret

00003814 <Ultrasonic_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Ultrasonic_init(void)
{
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	00 d0       	rcall	.+0      	; 0x381a <Ultrasonic_init+0x6>
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
	// Create configuration structure for ICU driver
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    381e:	82 e0       	ldi	r24, 0x02	; 2
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	8a 83       	std	Y+2, r24	; 0x02

	// Initialize the ICU driver
	DIO_voidSetPinDirection(ICU_PORT,ICP1_PIN,INPUT);    // Configure ECHO PIN/PD6 as input pin
    3826:	80 e3       	ldi	r24, 0x30	; 48
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	66 e0       	ldi	r22, 0x06	; 6
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	ICU_init(&Icu_Config);
    3832:	ce 01       	movw	r24, r28
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	0e 94 90 0c 	call	0x1920	; 0x1920 <ICU_init>

	// Setup the ICU call back function
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    383a:	89 ec       	ldi	r24, 0xC9	; 201
    383c:	9d e1       	ldi	r25, 0x1D	; 29
    383e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <ICU_setCallBack>

	// Setup the direction for the trigger pin as output pin
	DIO_voidSetPinDirection(TRIGGER_PORT , TRIGGER_PIN , OUTPUT );
    3842:	86 e3       	ldi	r24, 0x36	; 54
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	65 e0       	ldi	r22, 0x05	; 5
    3848:	41 e0       	ldi	r20, 0x01	; 1
    384a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
}
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <Ultrasonic_readDistance>:



uint16 Ultrasonic_readDistance(void)
{
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();    // Send the trigger pulse
    3860:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <Ultrasonic_Trigger>

	if(edgeCount == 2)
    3864:	80 91 d8 01 	lds	r24, 0x01D8
    3868:	82 30       	cpi	r24, 0x02	; 2
    386a:	09 f0       	breq	.+2      	; 0x386e <Ultrasonic_readDistance+0x16>
    386c:	aa c0       	rjmp	.+340    	; 0x39c2 <Ultrasonic_readDistance+0x16a>
	{
		edgeCount = 0;
    386e:	10 92 d8 01 	sts	0x01D8, r1
		// Calculate the measured distance in cm
		distance=(timeHigh/57.5);
    3872:	80 91 d9 01 	lds	r24, 0x01D9
    3876:	90 91 da 01 	lds	r25, 0x01DA
    387a:	cc 01       	movw	r24, r24
    387c:	a0 e0       	ldi	r26, 0x00	; 0
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	46 e6       	ldi	r20, 0x66	; 102
    3896:	52 e4       	ldi	r21, 0x42	; 66
    3898:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	80 93 db 01 	sts	0x01DB, r24
    38b0:	90 93 dc 01 	sts	0x01DC, r25
    38b4:	a0 93 dd 01 	sts	0x01DD, r26
    38b8:	b0 93 de 01 	sts	0x01DE, r27

		// To prevent ultrasonic reading to be different from the LCD reading:
		if (distance < 22)
    38bc:	80 91 db 01 	lds	r24, 0x01DB
    38c0:	90 91 dc 01 	lds	r25, 0x01DC
    38c4:	a0 91 dd 01 	lds	r26, 0x01DD
    38c8:	b0 91 de 01 	lds	r27, 0x01DE
    38cc:	86 31       	cpi	r24, 0x16	; 22
    38ce:	91 05       	cpc	r25, r1
    38d0:	a1 05       	cpc	r26, r1
    38d2:	b1 05       	cpc	r27, r1
    38d4:	98 f4       	brcc	.+38     	; 0x38fc <Ultrasonic_readDistance+0xa4>
		{
			distance++;
    38d6:	80 91 db 01 	lds	r24, 0x01DB
    38da:	90 91 dc 01 	lds	r25, 0x01DC
    38de:	a0 91 dd 01 	lds	r26, 0x01DD
    38e2:	b0 91 de 01 	lds	r27, 0x01DE
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	a1 1d       	adc	r26, r1
    38ea:	b1 1d       	adc	r27, r1
    38ec:	80 93 db 01 	sts	0x01DB, r24
    38f0:	90 93 dc 01 	sts	0x01DC, r25
    38f4:	a0 93 dd 01 	sts	0x01DD, r26
    38f8:	b0 93 de 01 	sts	0x01DE, r27
		}
		if (distance >= 137)
    38fc:	80 91 db 01 	lds	r24, 0x01DB
    3900:	90 91 dc 01 	lds	r25, 0x01DC
    3904:	a0 91 dd 01 	lds	r26, 0x01DD
    3908:	b0 91 de 01 	lds	r27, 0x01DE
    390c:	89 38       	cpi	r24, 0x89	; 137
    390e:	91 05       	cpc	r25, r1
    3910:	a1 05       	cpc	r26, r1
    3912:	b1 05       	cpc	r27, r1
    3914:	98 f0       	brcs	.+38     	; 0x393c <Ultrasonic_readDistance+0xe4>
		{
			distance--;
    3916:	80 91 db 01 	lds	r24, 0x01DB
    391a:	90 91 dc 01 	lds	r25, 0x01DC
    391e:	a0 91 dd 01 	lds	r26, 0x01DD
    3922:	b0 91 de 01 	lds	r27, 0x01DE
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	a1 09       	sbc	r26, r1
    392a:	b1 09       	sbc	r27, r1
    392c:	80 93 db 01 	sts	0x01DB, r24
    3930:	90 93 dc 01 	sts	0x01DC, r25
    3934:	a0 93 dd 01 	sts	0x01DD, r26
    3938:	b0 93 de 01 	sts	0x01DE, r27
		}
	    if (distance >= 254)
    393c:	80 91 db 01 	lds	r24, 0x01DB
    3940:	90 91 dc 01 	lds	r25, 0x01DC
    3944:	a0 91 dd 01 	lds	r26, 0x01DD
    3948:	b0 91 de 01 	lds	r27, 0x01DE
    394c:	8e 3f       	cpi	r24, 0xFE	; 254
    394e:	91 05       	cpc	r25, r1
    3950:	a1 05       	cpc	r26, r1
    3952:	b1 05       	cpc	r27, r1
    3954:	98 f0       	brcs	.+38     	; 0x397c <Ultrasonic_readDistance+0x124>
	    {
			distance--;
    3956:	80 91 db 01 	lds	r24, 0x01DB
    395a:	90 91 dc 01 	lds	r25, 0x01DC
    395e:	a0 91 dd 01 	lds	r26, 0x01DD
    3962:	b0 91 de 01 	lds	r27, 0x01DE
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	a1 09       	sbc	r26, r1
    396a:	b1 09       	sbc	r27, r1
    396c:	80 93 db 01 	sts	0x01DB, r24
    3970:	90 93 dc 01 	sts	0x01DC, r25
    3974:	a0 93 dd 01 	sts	0x01DD, r26
    3978:	b0 93 de 01 	sts	0x01DE, r27
	    }
	    if (distance >= 367)
    397c:	80 91 db 01 	lds	r24, 0x01DB
    3980:	90 91 dc 01 	lds	r25, 0x01DC
    3984:	a0 91 dd 01 	lds	r26, 0x01DD
    3988:	b0 91 de 01 	lds	r27, 0x01DE
    398c:	8f 36       	cpi	r24, 0x6F	; 111
    398e:	21 e0       	ldi	r18, 0x01	; 1
    3990:	92 07       	cpc	r25, r18
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	a2 07       	cpc	r26, r18
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	b2 07       	cpc	r27, r18
    399a:	98 f0       	brcs	.+38     	; 0x39c2 <Ultrasonic_readDistance+0x16a>
	    {
	    	distance--;
    399c:	80 91 db 01 	lds	r24, 0x01DB
    39a0:	90 91 dc 01 	lds	r25, 0x01DC
    39a4:	a0 91 dd 01 	lds	r26, 0x01DD
    39a8:	b0 91 de 01 	lds	r27, 0x01DE
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	a1 09       	sbc	r26, r1
    39b0:	b1 09       	sbc	r27, r1
    39b2:	80 93 db 01 	sts	0x01DB, r24
    39b6:	90 93 dc 01 	sts	0x01DC, r25
    39ba:	a0 93 dd 01 	sts	0x01DD, r26
    39be:	b0 93 de 01 	sts	0x01DE, r27
	    }
	}

	return distance;
    39c2:	80 91 db 01 	lds	r24, 0x01DB
    39c6:	90 91 dc 01 	lds	r25, 0x01DC
    39ca:	a0 91 dd 01 	lds	r26, 0x01DD
    39ce:	b0 91 de 01 	lds	r27, 0x01DE
}
    39d2:	cf 91       	pop	r28
    39d4:	df 91       	pop	r29
    39d6:	08 95       	ret

000039d8 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    39d8:	df 93       	push	r29
    39da:	cf 93       	push	r28
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	68 97       	sbiw	r28, 0x18	; 24
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	f8 94       	cli
    39e6:	de bf       	out	0x3e, r29	; 62
    39e8:	0f be       	out	0x3f, r0	; 63
    39ea:	cd bf       	out	0x3d, r28	; 61
	// Send the trigger pulse to the ultrasonic
	DIO_voidSetPinValue(TRIGGER_PORT, TRIGGER_PIN,LOGIC_HIGH );
    39ec:	86 e3       	ldi	r24, 0x36	; 54
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	65 e0       	ldi	r22, 0x05	; 5
    39f2:	41 e0       	ldi	r20, 0x01	; 1
    39f4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	a0 e2       	ldi	r26, 0x20	; 32
    39fe:	b1 e4       	ldi	r27, 0x41	; 65
    3a00:	8d 8b       	std	Y+21, r24	; 0x15
    3a02:	9e 8b       	std	Y+22, r25	; 0x16
    3a04:	af 8b       	std	Y+23, r26	; 0x17
    3a06:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a08:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a10:	2b ea       	ldi	r18, 0xAB	; 171
    3a12:	3a ea       	ldi	r19, 0xAA	; 170
    3a14:	4a ea       	ldi	r20, 0xAA	; 170
    3a16:	50 e4       	ldi	r21, 0x40	; 64
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	89 8b       	std	Y+17, r24	; 0x11
    3a22:	9a 8b       	std	Y+18, r25	; 0x12
    3a24:	ab 8b       	std	Y+19, r26	; 0x13
    3a26:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a28:	69 89       	ldd	r22, Y+17	; 0x11
    3a2a:	7a 89       	ldd	r23, Y+18	; 0x12
    3a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e8       	ldi	r20, 0x80	; 128
    3a36:	5f e3       	ldi	r21, 0x3F	; 63
    3a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a3c:	88 23       	and	r24, r24
    3a3e:	1c f4       	brge	.+6      	; 0x3a46 <Ultrasonic_Trigger+0x6e>
		__ticks = 1;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	88 8b       	std	Y+16, r24	; 0x10
    3a44:	91 c0       	rjmp	.+290    	; 0x3b68 <Ultrasonic_Trigger+0x190>
	else if (__tmp > 255)
    3a46:	69 89       	ldd	r22, Y+17	; 0x11
    3a48:	7a 89       	ldd	r23, Y+18	; 0x12
    3a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	53 e4       	ldi	r21, 0x43	; 67
    3a56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	0c f0       	brlt	.+2      	; 0x3a60 <Ultrasonic_Trigger+0x88>
    3a5e:	7b c0       	rjmp	.+246    	; 0x3b56 <Ultrasonic_Trigger+0x17e>
	{
		_delay_ms(__us / 1000.0);
    3a60:	6d 89       	ldd	r22, Y+21	; 0x15
    3a62:	7e 89       	ldd	r23, Y+22	; 0x16
    3a64:	8f 89       	ldd	r24, Y+23	; 0x17
    3a66:	98 8d       	ldd	r25, Y+24	; 0x18
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	4a e7       	ldi	r20, 0x7A	; 122
    3a6e:	54 e4       	ldi	r21, 0x44	; 68
    3a70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	8c 87       	std	Y+12, r24	; 0x0c
    3a7a:	9d 87       	std	Y+13, r25	; 0x0d
    3a7c:	ae 87       	std	Y+14, r26	; 0x0e
    3a7e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a80:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a82:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a86:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	4a e7       	ldi	r20, 0x7A	; 122
    3a8e:	55 e4       	ldi	r21, 0x45	; 69
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	88 87       	std	Y+8, r24	; 0x08
    3a9a:	99 87       	std	Y+9, r25	; 0x09
    3a9c:	aa 87       	std	Y+10, r26	; 0x0a
    3a9e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3aa0:	68 85       	ldd	r22, Y+8	; 0x08
    3aa2:	79 85       	ldd	r23, Y+9	; 0x09
    3aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e8       	ldi	r20, 0x80	; 128
    3aae:	5f e3       	ldi	r21, 0x3F	; 63
    3ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab4:	88 23       	and	r24, r24
    3ab6:	2c f4       	brge	.+10     	; 0x3ac2 <Ultrasonic_Trigger+0xea>
		__ticks = 1;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	9f 83       	std	Y+7, r25	; 0x07
    3abe:	8e 83       	std	Y+6, r24	; 0x06
    3ac0:	3f c0       	rjmp	.+126    	; 0x3b40 <Ultrasonic_Trigger+0x168>
	else if (__tmp > 65535)
    3ac2:	68 85       	ldd	r22, Y+8	; 0x08
    3ac4:	79 85       	ldd	r23, Y+9	; 0x09
    3ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ac8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	3f ef       	ldi	r19, 0xFF	; 255
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	57 e4       	ldi	r21, 0x47	; 71
    3ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad6:	18 16       	cp	r1, r24
    3ad8:	4c f5       	brge	.+82     	; 0x3b2c <Ultrasonic_Trigger+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ada:	6c 85       	ldd	r22, Y+12	; 0x0c
    3adc:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ade:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ae0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e2       	ldi	r20, 0x20	; 32
    3ae8:	51 e4       	ldi	r21, 0x41	; 65
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	bc 01       	movw	r22, r24
    3af4:	cd 01       	movw	r24, r26
    3af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	9f 83       	std	Y+7, r25	; 0x07
    3b00:	8e 83       	std	Y+6, r24	; 0x06
    3b02:	0f c0       	rjmp	.+30     	; 0x3b22 <Ultrasonic_Trigger+0x14a>
    3b04:	80 e9       	ldi	r24, 0x90	; 144
    3b06:	91 e0       	ldi	r25, 0x01	; 1
    3b08:	9d 83       	std	Y+5, r25	; 0x05
    3b0a:	8c 83       	std	Y+4, r24	; 0x04
    3b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <Ultrasonic_Trigger+0x138>
    3b14:	9d 83       	std	Y+5, r25	; 0x05
    3b16:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b18:	8e 81       	ldd	r24, Y+6	; 0x06
    3b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	9f 83       	std	Y+7, r25	; 0x07
    3b20:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b22:	8e 81       	ldd	r24, Y+6	; 0x06
    3b24:	9f 81       	ldd	r25, Y+7	; 0x07
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	69 f7       	brne	.-38     	; 0x3b04 <Ultrasonic_Trigger+0x12c>
    3b2a:	24 c0       	rjmp	.+72     	; 0x3b74 <Ultrasonic_Trigger+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2c:	68 85       	ldd	r22, Y+8	; 0x08
    3b2e:	79 85       	ldd	r23, Y+9	; 0x09
    3b30:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b32:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9f 83       	std	Y+7, r25	; 0x07
    3b3e:	8e 83       	std	Y+6, r24	; 0x06
    3b40:	8e 81       	ldd	r24, Y+6	; 0x06
    3b42:	9f 81       	ldd	r25, Y+7	; 0x07
    3b44:	9b 83       	std	Y+3, r25	; 0x03
    3b46:	8a 83       	std	Y+2, r24	; 0x02
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <Ultrasonic_Trigger+0x174>
    3b50:	9b 83       	std	Y+3, r25	; 0x03
    3b52:	8a 83       	std	Y+2, r24	; 0x02
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b56:	69 89       	ldd	r22, Y+17	; 0x11
    3b58:	7a 89       	ldd	r23, Y+18	; 0x12
    3b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	88 8b       	std	Y+16, r24	; 0x10
    3b68:	88 89       	ldd	r24, Y+16	; 0x10
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	8a 95       	dec	r24
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <Ultrasonic_Trigger+0x196>
    3b72:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIGGER_PORT, TRIGGER_PIN, LOGIC_LOW);
    3b74:	86 e3       	ldi	r24, 0x36	; 54
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	65 e0       	ldi	r22, 0x05	; 5
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>

}
    3b80:	68 96       	adiw	r28, 0x18	; 24
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <Ultrasonic_edgeProcessing>:


void Ultrasonic_edgeProcessing(void)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
	edgeCount++;
    3b9a:	80 91 d8 01 	lds	r24, 0x01D8
    3b9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ba0:	80 93 d8 01 	sts	0x01D8, r24
	if(edgeCount == 1)
    3ba4:	80 91 d8 01 	lds	r24, 0x01D8
    3ba8:	81 30       	cpi	r24, 0x01	; 1
    3baa:	31 f4       	brne	.+12     	; 0x3bb8 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * reset the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    3bac:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <ICU_clearTimerValue>
		// Detect falling edge
		ICU_setEdgeDetectionType(FALLING);
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ICU_setEdgeDetectionType>
    3bb6:	0d c0       	rjmp	.+26     	; 0x3bd2 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(edgeCount == 2)
    3bb8:	80 91 d8 01 	lds	r24, 0x01D8
    3bbc:	82 30       	cpi	r24, 0x02	; 2
    3bbe:	49 f4       	brne	.+18     	; 0x3bd2 <Ultrasonic_edgeProcessing+0x40>
	{
		// Store the High time value
		timeHigh = ICU_getInputCaptureValue();
    3bc0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <ICU_getInputCaptureValue>
    3bc4:	90 93 da 01 	sts	0x01DA, r25
    3bc8:	80 93 d9 01 	sts	0x01D9, r24
		// Detect rising edge
		ICU_setEdgeDetectionType(RISING);
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ICU_setEdgeDetectionType>
	}
}
    3bd2:	cf 91       	pop	r28
    3bd4:	df 91       	pop	r29
    3bd6:	08 95       	ret

00003bd8 <segment_init>:
#include "driver_7segment.h"



void segment_init(channel_number ch_num)
{
    3bd8:	df 93       	push	r29
    3bda:	cf 93       	push	r28
    3bdc:	00 d0       	rcall	.+0      	; 0x3bde <segment_init+0x6>
    3bde:	0f 92       	push	r0
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	89 83       	std	Y+1, r24	; 0x01
                      	  	  /***********************SET THE DIRECTION AS OUTPUT FOR ALL CHANNELS*********************/
	DIO_voidSetPinDirection(PORTB,PIN0_ID,OUTPUT);
    3be6:	86 e3       	ldi	r24, 0x36	; 54
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	41 e0       	ldi	r20, 0x01	; 1
    3bee:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN1_ID,OUTPUT);
    3bf2:	86 e3       	ldi	r24, 0x36	; 54
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	61 e0       	ldi	r22, 0x01	; 1
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN2_ID,OUTPUT);
    3bfe:	86 e3       	ldi	r24, 0x36	; 54
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	62 e0       	ldi	r22, 0x02	; 2
    3c04:	41 e0       	ldi	r20, 0x01	; 1
    3c06:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN4_ID,OUTPUT);
    3c0a:	86 e3       	ldi	r24, 0x36	; 54
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	64 e0       	ldi	r22, 0x04	; 4
    3c10:	41 e0       	ldi	r20, 0x01	; 1
    3c12:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PORTA,PIN3_ID,OUTPUT);
    3c16:	89 e3       	ldi	r24, 0x39	; 57
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	63 e0       	ldi	r22, 0x03	; 3
    3c1c:	41 e0       	ldi	r20, 0x01	; 1
    3c1e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN2_ID,OUTPUT);
    3c22:	89 e3       	ldi	r24, 0x39	; 57
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	62 e0       	ldi	r22, 0x02	; 2
    3c28:	41 e0       	ldi	r20, 0x01	; 1
    3c2a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN5_ID,OUTPUT);
    3c2e:	86 e3       	ldi	r24, 0x36	; 54
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	65 e0       	ldi	r22, 0x05	; 5
    3c34:	41 e0       	ldi	r20, 0x01	; 1
    3c36:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN6_ID,OUTPUT);
    3c3a:	86 e3       	ldi	r24, 0x36	; 54
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	66 e0       	ldi	r22, 0x06	; 6
    3c40:	41 e0       	ldi	r20, 0x01	; 1
    3c42:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>


							/********************INITIALIZE ALL CHHANNELS TO DISPLAY ZERO*****************************/
	DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3c46:	86 e3       	ldi	r24, 0x36	; 54
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	60 e0       	ldi	r22, 0x00	; 0
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3c52:	86 e3       	ldi	r24, 0x36	; 54
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	61 e0       	ldi	r22, 0x01	; 1
    3c58:	40 e0       	ldi	r20, 0x00	; 0
    3c5a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3c5e:	86 e3       	ldi	r24, 0x36	; 54
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	62 e0       	ldi	r22, 0x02	; 2
    3c64:	40 e0       	ldi	r20, 0x00	; 0
    3c66:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3c6a:	86 e3       	ldi	r24, 0x36	; 54
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	64 e0       	ldi	r22, 0x04	; 4
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>


	switch(ch_num)
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	3b 83       	std	Y+3, r19	; 0x03
    3c7e:	2a 83       	std	Y+2, r18	; 0x02
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	81 30       	cpi	r24, 0x01	; 1
    3c86:	91 05       	cpc	r25, r1
    3c88:	79 f1       	breq	.+94     	; 0x3ce8 <segment_init+0x110>
    3c8a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c8c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c8e:	22 30       	cpi	r18, 0x02	; 2
    3c90:	31 05       	cpc	r19, r1
    3c92:	2c f4       	brge	.+10     	; 0x3c9e <segment_init+0xc6>
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	69 f0       	breq	.+26     	; 0x3cb6 <segment_init+0xde>
    3c9c:	6f c0       	rjmp	.+222    	; 0x3d7c <segment_init+0x1a4>
    3c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    3ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ca2:	22 30       	cpi	r18, 0x02	; 2
    3ca4:	31 05       	cpc	r19, r1
    3ca6:	c9 f1       	breq	.+114    	; 0x3d1a <segment_init+0x142>
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	9b 81       	ldd	r25, Y+3	; 0x03
    3cac:	83 30       	cpi	r24, 0x03	; 3
    3cae:	91 05       	cpc	r25, r1
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <segment_init+0xdc>
    3cb2:	4c c0       	rjmp	.+152    	; 0x3d4c <segment_init+0x174>
    3cb4:	63 c0       	rjmp	.+198    	; 0x3d7c <segment_init+0x1a4>
	{
												/***************SELECT THE FIRST CHANNEL AND DISABLE THE OTHERS*****************/

	case _1_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3cb6:	89 e3       	ldi	r24, 0x39	; 57
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	63 e0       	ldi	r22, 0x03	; 3
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_HIGH);
    3cc2:	89 e3       	ldi	r24, 0x39	; 57
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	62 e0       	ldi	r22, 0x02	; 2
    3cc8:	41 e0       	ldi	r20, 0x01	; 1
    3cca:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_HIGH);
    3cce:	86 e3       	ldi	r24, 0x36	; 54
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	65 e0       	ldi	r22, 0x05	; 5
    3cd4:	41 e0       	ldi	r20, 0x01	; 1
    3cd6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    3cda:	86 e3       	ldi	r24, 0x36	; 54
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	66 e0       	ldi	r22, 0x06	; 6
    3ce0:	41 e0       	ldi	r20, 0x01	; 1
    3ce2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3ce6:	4a c0       	rjmp	.+148    	; 0x3d7c <segment_init+0x1a4>
		break;

												/***************SELECT THE FIRST & SECOND CHANNELS AND DISABLE THE OTHERS*****************/

	case _2_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3ce8:	89 e3       	ldi	r24, 0x39	; 57
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	63 e0       	ldi	r22, 0x03	; 3
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    3cf4:	89 e3       	ldi	r24, 0x39	; 57
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	62 e0       	ldi	r22, 0x02	; 2
    3cfa:	40 e0       	ldi	r20, 0x00	; 0
    3cfc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_HIGH);
    3d00:	86 e3       	ldi	r24, 0x36	; 54
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	65 e0       	ldi	r22, 0x05	; 5
    3d06:	41 e0       	ldi	r20, 0x01	; 1
    3d08:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    3d0c:	86 e3       	ldi	r24, 0x36	; 54
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	66 e0       	ldi	r22, 0x06	; 6
    3d12:	41 e0       	ldi	r20, 0x01	; 1
    3d14:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3d18:	31 c0       	rjmp	.+98     	; 0x3d7c <segment_init+0x1a4>
		break;

												/***************SELECT THE FIRST,SECOND & THIRD CHANNEL AND DISABLE THE OTHER*****************/

	case _3_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3d1a:	89 e3       	ldi	r24, 0x39	; 57
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	63 e0       	ldi	r22, 0x03	; 3
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    3d26:	89 e3       	ldi	r24, 0x39	; 57
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	62 e0       	ldi	r22, 0x02	; 2
    3d2c:	40 e0       	ldi	r20, 0x00	; 0
    3d2e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_LOW);
    3d32:	86 e3       	ldi	r24, 0x36	; 54
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	65 e0       	ldi	r22, 0x05	; 5
    3d38:	40 e0       	ldi	r20, 0x00	; 0
    3d3a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    3d3e:	86 e3       	ldi	r24, 0x36	; 54
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	66 e0       	ldi	r22, 0x06	; 6
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3d4a:	18 c0       	rjmp	.+48     	; 0x3d7c <segment_init+0x1a4>
		break;

												/***************SELECT ALL CHANNELS*****************/

	case _4_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3d4c:	89 e3       	ldi	r24, 0x39	; 57
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	63 e0       	ldi	r22, 0x03	; 3
    3d52:	40 e0       	ldi	r20, 0x00	; 0
    3d54:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    3d58:	89 e3       	ldi	r24, 0x39	; 57
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	62 e0       	ldi	r22, 0x02	; 2
    3d5e:	40 e0       	ldi	r20, 0x00	; 0
    3d60:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_LOW);
    3d64:	86 e3       	ldi	r24, 0x36	; 54
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	65 e0       	ldi	r22, 0x05	; 5
    3d6a:	40 e0       	ldi	r20, 0x00	; 0
    3d6c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_LOW);
    3d70:	86 e3       	ldi	r24, 0x36	; 54
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	66 e0       	ldi	r22, 0x06	; 6
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		break;

	}


};
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <segment_num>:


void segment_num(number num)
{
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <segment_num+0x6>
    3d8e:	0f 92       	push	r0
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	3b 83       	std	Y+3, r19	; 0x03
    3d9e:	2a 83       	std	Y+2, r18	; 0x02
    3da0:	8a 81       	ldd	r24, Y+2	; 0x02
    3da2:	9b 81       	ldd	r25, Y+3	; 0x03
    3da4:	84 30       	cpi	r24, 0x04	; 4
    3da6:	91 05       	cpc	r25, r1
    3da8:	09 f4       	brne	.+2      	; 0x3dac <segment_num+0x24>
    3daa:	ab c0       	rjmp	.+342    	; 0x3f02 <segment_num+0x17a>
    3dac:	2a 81       	ldd	r18, Y+2	; 0x02
    3dae:	3b 81       	ldd	r19, Y+3	; 0x03
    3db0:	25 30       	cpi	r18, 0x05	; 5
    3db2:	31 05       	cpc	r19, r1
    3db4:	ec f4       	brge	.+58     	; 0x3df0 <segment_num+0x68>
    3db6:	8a 81       	ldd	r24, Y+2	; 0x02
    3db8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dba:	81 30       	cpi	r24, 0x01	; 1
    3dbc:	91 05       	cpc	r25, r1
    3dbe:	09 f4       	brne	.+2      	; 0x3dc2 <segment_num+0x3a>
    3dc0:	55 c0       	rjmp	.+170    	; 0x3e6c <segment_num+0xe4>
    3dc2:	2a 81       	ldd	r18, Y+2	; 0x02
    3dc4:	3b 81       	ldd	r19, Y+3	; 0x03
    3dc6:	22 30       	cpi	r18, 0x02	; 2
    3dc8:	31 05       	cpc	r19, r1
    3dca:	2c f4       	brge	.+10     	; 0x3dd6 <segment_num+0x4e>
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	99 f1       	breq	.+102    	; 0x3e3a <segment_num+0xb2>
    3dd4:	2b c1       	rjmp	.+598    	; 0x402c <segment_num+0x2a4>
    3dd6:	2a 81       	ldd	r18, Y+2	; 0x02
    3dd8:	3b 81       	ldd	r19, Y+3	; 0x03
    3dda:	22 30       	cpi	r18, 0x02	; 2
    3ddc:	31 05       	cpc	r19, r1
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <segment_num+0x5a>
    3de0:	5e c0       	rjmp	.+188    	; 0x3e9e <segment_num+0x116>
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
    3de4:	9b 81       	ldd	r25, Y+3	; 0x03
    3de6:	83 30       	cpi	r24, 0x03	; 3
    3de8:	91 05       	cpc	r25, r1
    3dea:	09 f4       	brne	.+2      	; 0x3dee <segment_num+0x66>
    3dec:	71 c0       	rjmp	.+226    	; 0x3ed0 <segment_num+0x148>
    3dee:	1e c1       	rjmp	.+572    	; 0x402c <segment_num+0x2a4>
    3df0:	2a 81       	ldd	r18, Y+2	; 0x02
    3df2:	3b 81       	ldd	r19, Y+3	; 0x03
    3df4:	27 30       	cpi	r18, 0x07	; 7
    3df6:	31 05       	cpc	r19, r1
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <segment_num+0x74>
    3dfa:	ce c0       	rjmp	.+412    	; 0x3f98 <segment_num+0x210>
    3dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3e00:	88 30       	cpi	r24, 0x08	; 8
    3e02:	91 05       	cpc	r25, r1
    3e04:	6c f4       	brge	.+26     	; 0x3e20 <segment_num+0x98>
    3e06:	2a 81       	ldd	r18, Y+2	; 0x02
    3e08:	3b 81       	ldd	r19, Y+3	; 0x03
    3e0a:	25 30       	cpi	r18, 0x05	; 5
    3e0c:	31 05       	cpc	r19, r1
    3e0e:	09 f4       	brne	.+2      	; 0x3e12 <segment_num+0x8a>
    3e10:	91 c0       	rjmp	.+290    	; 0x3f34 <segment_num+0x1ac>
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	9b 81       	ldd	r25, Y+3	; 0x03
    3e16:	86 30       	cpi	r24, 0x06	; 6
    3e18:	91 05       	cpc	r25, r1
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <segment_num+0x96>
    3e1c:	a4 c0       	rjmp	.+328    	; 0x3f66 <segment_num+0x1de>
    3e1e:	06 c1       	rjmp	.+524    	; 0x402c <segment_num+0x2a4>
    3e20:	2a 81       	ldd	r18, Y+2	; 0x02
    3e22:	3b 81       	ldd	r19, Y+3	; 0x03
    3e24:	28 30       	cpi	r18, 0x08	; 8
    3e26:	31 05       	cpc	r19, r1
    3e28:	09 f4       	brne	.+2      	; 0x3e2c <segment_num+0xa4>
    3e2a:	cf c0       	rjmp	.+414    	; 0x3fca <segment_num+0x242>
    3e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e30:	89 30       	cpi	r24, 0x09	; 9
    3e32:	91 05       	cpc	r25, r1
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <segment_num+0xb0>
    3e36:	e2 c0       	rjmp	.+452    	; 0x3ffc <segment_num+0x274>
    3e38:	f9 c0       	rjmp	.+498    	; 0x402c <segment_num+0x2a4>
	{
													/********************DISPLAY ZERO*********************/
	case ZERO:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3e3a:	86 e3       	ldi	r24, 0x36	; 54
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	60 e0       	ldi	r22, 0x00	; 0
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3e46:	86 e3       	ldi	r24, 0x36	; 54
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	61 e0       	ldi	r22, 0x01	; 1
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3e52:	86 e3       	ldi	r24, 0x36	; 54
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	62 e0       	ldi	r22, 0x02	; 2
    3e58:	40 e0       	ldi	r20, 0x00	; 0
    3e5a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3e5e:	86 e3       	ldi	r24, 0x36	; 54
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	64 e0       	ldi	r22, 0x04	; 4
    3e64:	40 e0       	ldi	r20, 0x00	; 0
    3e66:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3e6a:	e0 c0       	rjmp	.+448    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY ONE*********************/

	case ONE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    3e6c:	86 e3       	ldi	r24, 0x36	; 54
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	41 e0       	ldi	r20, 0x01	; 1
    3e74:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3e78:	86 e3       	ldi	r24, 0x36	; 54
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	61 e0       	ldi	r22, 0x01	; 1
    3e7e:	40 e0       	ldi	r20, 0x00	; 0
    3e80:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3e84:	86 e3       	ldi	r24, 0x36	; 54
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	62 e0       	ldi	r22, 0x02	; 2
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3e90:	86 e3       	ldi	r24, 0x36	; 54
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	64 e0       	ldi	r22, 0x04	; 4
    3e96:	40 e0       	ldi	r20, 0x00	; 0
    3e98:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3e9c:	c7 c0       	rjmp	.+398    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY TWO*********************/

	case TWO:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3e9e:	86 e3       	ldi	r24, 0x36	; 54
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	60 e0       	ldi	r22, 0x00	; 0
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    3eaa:	86 e3       	ldi	r24, 0x36	; 54
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	61 e0       	ldi	r22, 0x01	; 1
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3eb6:	86 e3       	ldi	r24, 0x36	; 54
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	62 e0       	ldi	r22, 0x02	; 2
    3ebc:	40 e0       	ldi	r20, 0x00	; 0
    3ebe:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3ec2:	86 e3       	ldi	r24, 0x36	; 54
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	64 e0       	ldi	r22, 0x04	; 4
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3ece:	ae c0       	rjmp	.+348    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY THREE*********************/

	case THREE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    3ed0:	86 e3       	ldi	r24, 0x36	; 54
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	60 e0       	ldi	r22, 0x00	; 0
    3ed6:	41 e0       	ldi	r20, 0x01	; 1
    3ed8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    3edc:	86 e3       	ldi	r24, 0x36	; 54
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	61 e0       	ldi	r22, 0x01	; 1
    3ee2:	41 e0       	ldi	r20, 0x01	; 1
    3ee4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3ee8:	86 e3       	ldi	r24, 0x36	; 54
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	62 e0       	ldi	r22, 0x02	; 2
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3ef4:	86 e3       	ldi	r24, 0x36	; 54
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	64 e0       	ldi	r22, 0x04	; 4
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3f00:	95 c0       	rjmp	.+298    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY FOUR*********************/

	case FOUR:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3f02:	86 e3       	ldi	r24, 0x36	; 54
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3f0e:	86 e3       	ldi	r24, 0x36	; 54
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	61 e0       	ldi	r22, 0x01	; 1
    3f14:	40 e0       	ldi	r20, 0x00	; 0
    3f16:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    3f1a:	86 e3       	ldi	r24, 0x36	; 54
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	62 e0       	ldi	r22, 0x02	; 2
    3f20:	41 e0       	ldi	r20, 0x01	; 1
    3f22:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3f26:	86 e3       	ldi	r24, 0x36	; 54
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	64 e0       	ldi	r22, 0x04	; 4
    3f2c:	40 e0       	ldi	r20, 0x00	; 0
    3f2e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3f32:	7c c0       	rjmp	.+248    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY FIVE*********************/

	case FIVE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    3f34:	86 e3       	ldi	r24, 0x36	; 54
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	41 e0       	ldi	r20, 0x01	; 1
    3f3c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3f40:	86 e3       	ldi	r24, 0x36	; 54
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	61 e0       	ldi	r22, 0x01	; 1
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    3f4c:	86 e3       	ldi	r24, 0x36	; 54
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	62 e0       	ldi	r22, 0x02	; 2
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3f58:	86 e3       	ldi	r24, 0x36	; 54
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	64 e0       	ldi	r22, 0x04	; 4
    3f5e:	40 e0       	ldi	r20, 0x00	; 0
    3f60:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3f64:	63 c0       	rjmp	.+198    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY SIX*********************/

	case SIX:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3f66:	86 e3       	ldi	r24, 0x36	; 54
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	40 e0       	ldi	r20, 0x00	; 0
    3f6e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    3f72:	86 e3       	ldi	r24, 0x36	; 54
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	61 e0       	ldi	r22, 0x01	; 1
    3f78:	41 e0       	ldi	r20, 0x01	; 1
    3f7a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    3f7e:	86 e3       	ldi	r24, 0x36	; 54
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	62 e0       	ldi	r22, 0x02	; 2
    3f84:	41 e0       	ldi	r20, 0x01	; 1
    3f86:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3f8a:	86 e3       	ldi	r24, 0x36	; 54
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	64 e0       	ldi	r22, 0x04	; 4
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3f96:	4a c0       	rjmp	.+148    	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY SEVEN*********************/

	case SEVEN:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    3f98:	86 e3       	ldi	r24, 0x36	; 54
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	60 e0       	ldi	r22, 0x00	; 0
    3f9e:	41 e0       	ldi	r20, 0x01	; 1
    3fa0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    3fa4:	86 e3       	ldi	r24, 0x36	; 54
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	61 e0       	ldi	r22, 0x01	; 1
    3faa:	41 e0       	ldi	r20, 0x01	; 1
    3fac:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    3fb0:	86 e3       	ldi	r24, 0x36	; 54
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	62 e0       	ldi	r22, 0x02	; 2
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3fbc:	86 e3       	ldi	r24, 0x36	; 54
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	64 e0       	ldi	r22, 0x04	; 4
    3fc2:	40 e0       	ldi	r20, 0x00	; 0
    3fc4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3fc8:	31 c0       	rjmp	.+98     	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY EIGHT*********************/

	case EIGHT:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3fca:	86 e3       	ldi	r24, 0x36	; 54
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3fd6:	86 e3       	ldi	r24, 0x36	; 54
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	61 e0       	ldi	r22, 0x01	; 1
    3fdc:	40 e0       	ldi	r20, 0x00	; 0
    3fde:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3fe2:	86 e3       	ldi	r24, 0x36	; 54
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	62 e0       	ldi	r22, 0x02	; 2
    3fe8:	40 e0       	ldi	r20, 0x00	; 0
    3fea:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_HIGH);
    3fee:	86 e3       	ldi	r24, 0x36	; 54
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	64 e0       	ldi	r22, 0x04	; 4
    3ff4:	41 e0       	ldi	r20, 0x01	; 1
    3ff6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
    3ffa:	18 c0       	rjmp	.+48     	; 0x402c <segment_num+0x2a4>
		break;
		/********************DISPLAY NINE*********************/

	case NINE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    3ffc:	86 e3       	ldi	r24, 0x36	; 54
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	41 e0       	ldi	r20, 0x01	; 1
    4004:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    4008:	86 e3       	ldi	r24, 0x36	; 54
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	61 e0       	ldi	r22, 0x01	; 1
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    4014:	86 e3       	ldi	r24, 0x36	; 54
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	62 e0       	ldi	r22, 0x02	; 2
    401a:	40 e0       	ldi	r20, 0x00	; 0
    401c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_HIGH);
    4020:	86 e3       	ldi	r24, 0x36	; 54
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	64 e0       	ldi	r22, 0x04	; 4
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPinValue>
		break;

	};


}
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	0f 90       	pop	r0
    4032:	cf 91       	pop	r28
    4034:	df 91       	pop	r29
    4036:	08 95       	ret

00004038 <main>:




int main ()
{
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	6d 97       	sbiw	r28, 0x1d	; 29
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	f8 94       	cli
    4046:	de bf       	out	0x3e, r29	; 62
    4048:	0f be       	out	0x3f, r0	; 63
    404a:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,PIN7_ID);
    404c:	af e5       	ldi	r26, 0x5F	; 95
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	ef e5       	ldi	r30, 0x5F	; 95
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	80 68       	ori	r24, 0x80	; 128
    4058:	8c 93       	st	X, r24
	//	//SET_BIT(SREG,PIN7_ID);
	//
	//	/*********************TIMER0_TESTING_DRIVER****************************/
	//
	//	//	DIO_voidSetPinDirection(PORTB,PIN3_ID,OUTPUT);
	DIO_voidSetPinDirection(PORTB,PIN7_ID,OUTPUT);//red
    405a:	86 e3       	ldi	r24, 0x36	; 54
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	67 e0       	ldi	r22, 0x07	; 7
    4060:	41 e0       	ldi	r20, 0x01	; 1
    4062:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN4_ID,OUTPUT);//green
    4066:	89 e3       	ldi	r24, 0x39	; 57
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	64 e0       	ldi	r22, 0x04	; 4
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN5_ID,OUTPUT);//blue
    4072:	89 e3       	ldi	r24, 0x39	; 57
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	65 e0       	ldi	r22, 0x05	; 5
    4078:	41 e0       	ldi	r20, 0x01	; 1
    407a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	/***********************
	 * ************************************COOLING SYSTEM PROJECT***********
	 * **********************************************************************************************************/

	DIO_voidSetPinDirection(PORTA,PIN0_ID,INPUT);
    407e:	89 e3       	ldi	r24, 0x39	; 57
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

	Init_temp();
    408a:	0e 94 26 1b 	call	0x364c	; 0x364c <Init_temp>
	H_LCD_void_IniT();
    408e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <H_LCD_void_IniT>
	DcMotor_Init();
    4092:	0e 94 82 1b 	call	0x3704	; 0x3704 <DcMotor_Init>

	uint8 temperature=0;
    4096:	1d 8e       	std	Y+29, r1	; 0x1d
	H_LCD_void_sendString("starting the app.");
    4098:	80 e6       	ldi	r24, 0x60	; 96
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <H_LCD_void_sendString>
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	aa e7       	ldi	r26, 0x7A	; 122
    40a6:	b4 e4       	ldi	r27, 0x44	; 68
    40a8:	89 8f       	std	Y+25, r24	; 0x19
    40aa:	9a 8f       	std	Y+26, r25	; 0x1a
    40ac:	ab 8f       	std	Y+27, r26	; 0x1b
    40ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b0:	69 8d       	ldd	r22, Y+25	; 0x19
    40b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	4a e7       	ldi	r20, 0x7A	; 122
    40be:	55 e4       	ldi	r21, 0x45	; 69
    40c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	8d 8b       	std	Y+21, r24	; 0x15
    40ca:	9e 8b       	std	Y+22, r25	; 0x16
    40cc:	af 8b       	std	Y+23, r26	; 0x17
    40ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40d0:	6d 89       	ldd	r22, Y+21	; 0x15
    40d2:	7e 89       	ldd	r23, Y+22	; 0x16
    40d4:	8f 89       	ldd	r24, Y+23	; 0x17
    40d6:	98 8d       	ldd	r25, Y+24	; 0x18
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	40 e8       	ldi	r20, 0x80	; 128
    40de:	5f e3       	ldi	r21, 0x3F	; 63
    40e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40e4:	88 23       	and	r24, r24
    40e6:	2c f4       	brge	.+10     	; 0x40f2 <main+0xba>
		__ticks = 1;
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	9c 8b       	std	Y+20, r25	; 0x14
    40ee:	8b 8b       	std	Y+19, r24	; 0x13
    40f0:	3f c0       	rjmp	.+126    	; 0x4170 <main+0x138>
	else if (__tmp > 65535)
    40f2:	6d 89       	ldd	r22, Y+21	; 0x15
    40f4:	7e 89       	ldd	r23, Y+22	; 0x16
    40f6:	8f 89       	ldd	r24, Y+23	; 0x17
    40f8:	98 8d       	ldd	r25, Y+24	; 0x18
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	3f ef       	ldi	r19, 0xFF	; 255
    40fe:	4f e7       	ldi	r20, 0x7F	; 127
    4100:	57 e4       	ldi	r21, 0x47	; 71
    4102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4106:	18 16       	cp	r1, r24
    4108:	4c f5       	brge	.+82     	; 0x415c <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    410a:	69 8d       	ldd	r22, Y+25	; 0x19
    410c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    410e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e2       	ldi	r20, 0x20	; 32
    4118:	51 e4       	ldi	r21, 0x41	; 65
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	9c 8b       	std	Y+20, r25	; 0x14
    4130:	8b 8b       	std	Y+19, r24	; 0x13
    4132:	0f c0       	rjmp	.+30     	; 0x4152 <main+0x11a>
    4134:	80 e9       	ldi	r24, 0x90	; 144
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	9a 8b       	std	Y+18, r25	; 0x12
    413a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    413c:	89 89       	ldd	r24, Y+17	; 0x11
    413e:	9a 89       	ldd	r25, Y+18	; 0x12
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	f1 f7       	brne	.-4      	; 0x4140 <main+0x108>
    4144:	9a 8b       	std	Y+18, r25	; 0x12
    4146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4148:	8b 89       	ldd	r24, Y+19	; 0x13
    414a:	9c 89       	ldd	r25, Y+20	; 0x14
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	9c 8b       	std	Y+20, r25	; 0x14
    4150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4152:	8b 89       	ldd	r24, Y+19	; 0x13
    4154:	9c 89       	ldd	r25, Y+20	; 0x14
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	69 f7       	brne	.-38     	; 0x4134 <main+0xfc>
    415a:	14 c0       	rjmp	.+40     	; 0x4184 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415c:	6d 89       	ldd	r22, Y+21	; 0x15
    415e:	7e 89       	ldd	r23, Y+22	; 0x16
    4160:	8f 89       	ldd	r24, Y+23	; 0x17
    4162:	98 8d       	ldd	r25, Y+24	; 0x18
    4164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	9c 8b       	std	Y+20, r25	; 0x14
    416e:	8b 8b       	std	Y+19, r24	; 0x13
    4170:	8b 89       	ldd	r24, Y+19	; 0x13
    4172:	9c 89       	ldd	r25, Y+20	; 0x14
    4174:	98 8b       	std	Y+16, r25	; 0x10
    4176:	8f 87       	std	Y+15, r24	; 0x0f
    4178:	8f 85       	ldd	r24, Y+15	; 0x0f
    417a:	98 89       	ldd	r25, Y+16	; 0x10
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <main+0x144>
    4180:	98 8b       	std	Y+16, r25	; 0x10
    4182:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	0e 94 12 1a 	call	0x3424	; 0x3424 <H_LCD_void_sendCommand>
	H_LCD_void_sendString("current temp = ");
    418a:	82 e7       	ldi	r24, 0x72	; 114
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <H_LCD_void_sendString>

	H_LCD_void_gotoXY(1,0);
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Duty = ");
    419a:	82 e8       	ldi	r24, 0x82	; 130
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <H_LCD_void_sendString>


	DIO_voidSetPinDirection(PORTD,PIN3_ID,INPUT);
    41a2:	80 e3       	ldi	r24, 0x30	; 48
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	63 e0       	ldi	r22, 0x03	; 3
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN5_ID,INPUT);
    41ae:	80 e3       	ldi	r24, 0x30	; 48
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	65 e0       	ldi	r22, 0x05	; 5
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN6_ID,INPUT);
    41ba:	80 e3       	ldi	r24, 0x30	; 48
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	66 e0       	ldi	r22, 0x06	; 6
    41c0:	40 e0       	ldi	r20, 0x00	; 0
    41c2:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN7_ID,INPUT);
    41c6:	80 e3       	ldi	r24, 0x30	; 48
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	67 e0       	ldi	r22, 0x07	; 7
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPinDirection>

		/***********************
		 * ************************************COOLING SYSTEM PROJECT***********
		 * **********************************************************************************************************/

		temperature=Read_Temp();
    41d2:	0e 94 3e 1b 	call	0x367c	; 0x367c <Read_Temp>
    41d6:	8d 8f       	std	Y+29, r24	; 0x1d
		H_LCD_void_gotoXY(0,15);
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	6f e0       	ldi	r22, 0x0F	; 15
    41dc:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <H_LCD_void_gotoXY>
		H_LCD_int_to_string(temperature);
    41e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41e2:	88 2f       	mov	r24, r24
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_LCD_int_to_string>
    41ea:	80 e0       	ldi	r24, 0x00	; 0
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	aa e7       	ldi	r26, 0x7A	; 122
    41f0:	b3 e4       	ldi	r27, 0x43	; 67
    41f2:	8b 87       	std	Y+11, r24	; 0x0b
    41f4:	9c 87       	std	Y+12, r25	; 0x0c
    41f6:	ad 87       	std	Y+13, r26	; 0x0d
    41f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4200:	9e 85       	ldd	r25, Y+14	; 0x0e
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	4a e7       	ldi	r20, 0x7A	; 122
    4208:	55 e4       	ldi	r21, 0x45	; 69
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	8f 83       	std	Y+7, r24	; 0x07
    4214:	98 87       	std	Y+8, r25	; 0x08
    4216:	a9 87       	std	Y+9, r26	; 0x09
    4218:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    421a:	6f 81       	ldd	r22, Y+7	; 0x07
    421c:	78 85       	ldd	r23, Y+8	; 0x08
    421e:	89 85       	ldd	r24, Y+9	; 0x09
    4220:	9a 85       	ldd	r25, Y+10	; 0x0a
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	40 e8       	ldi	r20, 0x80	; 128
    4228:	5f e3       	ldi	r21, 0x3F	; 63
    422a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    422e:	88 23       	and	r24, r24
    4230:	2c f4       	brge	.+10     	; 0x423c <main+0x204>
		__ticks = 1;
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	9e 83       	std	Y+6, r25	; 0x06
    4238:	8d 83       	std	Y+5, r24	; 0x05
    423a:	3f c0       	rjmp	.+126    	; 0x42ba <main+0x282>
	else if (__tmp > 65535)
    423c:	6f 81       	ldd	r22, Y+7	; 0x07
    423e:	78 85       	ldd	r23, Y+8	; 0x08
    4240:	89 85       	ldd	r24, Y+9	; 0x09
    4242:	9a 85       	ldd	r25, Y+10	; 0x0a
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	3f ef       	ldi	r19, 0xFF	; 255
    4248:	4f e7       	ldi	r20, 0x7F	; 127
    424a:	57 e4       	ldi	r21, 0x47	; 71
    424c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4250:	18 16       	cp	r1, r24
    4252:	4c f5       	brge	.+82     	; 0x42a6 <main+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4254:	6b 85       	ldd	r22, Y+11	; 0x0b
    4256:	7c 85       	ldd	r23, Y+12	; 0x0c
    4258:	8d 85       	ldd	r24, Y+13	; 0x0d
    425a:	9e 85       	ldd	r25, Y+14	; 0x0e
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	40 e2       	ldi	r20, 0x20	; 32
    4262:	51 e4       	ldi	r21, 0x41	; 65
    4264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	9e 83       	std	Y+6, r25	; 0x06
    427a:	8d 83       	std	Y+5, r24	; 0x05
    427c:	0f c0       	rjmp	.+30     	; 0x429c <main+0x264>
    427e:	80 e9       	ldi	r24, 0x90	; 144
    4280:	91 e0       	ldi	r25, 0x01	; 1
    4282:	9c 83       	std	Y+4, r25	; 0x04
    4284:	8b 83       	std	Y+3, r24	; 0x03
    4286:	8b 81       	ldd	r24, Y+3	; 0x03
    4288:	9c 81       	ldd	r25, Y+4	; 0x04
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	f1 f7       	brne	.-4      	; 0x428a <main+0x252>
    428e:	9c 83       	std	Y+4, r25	; 0x04
    4290:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4292:	8d 81       	ldd	r24, Y+5	; 0x05
    4294:	9e 81       	ldd	r25, Y+6	; 0x06
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	9e 83       	std	Y+6, r25	; 0x06
    429a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    429c:	8d 81       	ldd	r24, Y+5	; 0x05
    429e:	9e 81       	ldd	r25, Y+6	; 0x06
    42a0:	00 97       	sbiw	r24, 0x00	; 0
    42a2:	69 f7       	brne	.-38     	; 0x427e <main+0x246>
    42a4:	14 c0       	rjmp	.+40     	; 0x42ce <main+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a6:	6f 81       	ldd	r22, Y+7	; 0x07
    42a8:	78 85       	ldd	r23, Y+8	; 0x08
    42aa:	89 85       	ldd	r24, Y+9	; 0x09
    42ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	9e 83       	std	Y+6, r25	; 0x06
    42b8:	8d 83       	std	Y+5, r24	; 0x05
    42ba:	8d 81       	ldd	r24, Y+5	; 0x05
    42bc:	9e 81       	ldd	r25, Y+6	; 0x06
    42be:	9a 83       	std	Y+2, r25	; 0x02
    42c0:	89 83       	std	Y+1, r24	; 0x01
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	f1 f7       	brne	.-4      	; 0x42c6 <main+0x28e>
    42ca:	9a 83       	std	Y+2, r25	; 0x02
    42cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);


		if(temperature<=25)
    42ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42d0:	8a 31       	cpi	r24, 0x1A	; 26
    42d2:	68 f4       	brcc	.+26     	; 0x42ee <main+0x2b6>
		{
			DcMotor_Rotate(Stop,0);
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	0e 94 b3 1b 	call	0x3766	; 0x3766 <DcMotor_Rotate>
			H_LCD_void_gotoXY(1,10);
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	6a e0       	ldi	r22, 0x0A	; 10
    42e0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <H_LCD_void_gotoXY>
			H_LCD_int_to_string(0);
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_LCD_int_to_string>
    42ec:	72 cf       	rjmp	.-284    	; 0x41d2 <main+0x19a>
		}
		else if(temperature>25 && temperature <35)
    42ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42f0:	8a 31       	cpi	r24, 0x1A	; 26
    42f2:	80 f0       	brcs	.+32     	; 0x4314 <main+0x2dc>
    42f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42f6:	83 32       	cpi	r24, 0x23	; 35
    42f8:	68 f4       	brcc	.+26     	; 0x4314 <main+0x2dc>
		{
			DcMotor_Rotate(Anti_Clockwise,50);
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	62 e3       	ldi	r22, 0x32	; 50
    42fe:	0e 94 b3 1b 	call	0x3766	; 0x3766 <DcMotor_Rotate>
			H_LCD_void_gotoXY(1,10);
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	6a e0       	ldi	r22, 0x0A	; 10
    4306:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <H_LCD_void_gotoXY>
			H_LCD_int_to_string(50);
    430a:	82 e3       	ldi	r24, 0x32	; 50
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_LCD_int_to_string>
    4312:	5f cf       	rjmp	.-322    	; 0x41d2 <main+0x19a>
		}
		else if(temperature >=35)
    4314:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4316:	83 32       	cpi	r24, 0x23	; 35
    4318:	08 f4       	brcc	.+2      	; 0x431c <main+0x2e4>
    431a:	5b cf       	rjmp	.-330    	; 0x41d2 <main+0x19a>
		{
			DcMotor_Rotate(Anti_Clockwise,80);
    431c:	82 e0       	ldi	r24, 0x02	; 2
    431e:	60 e5       	ldi	r22, 0x50	; 80
    4320:	0e 94 b3 1b 	call	0x3766	; 0x3766 <DcMotor_Rotate>
			H_LCD_void_gotoXY(1,10);
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	6a e0       	ldi	r22, 0x0A	; 10
    4328:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <H_LCD_void_gotoXY>
			H_LCD_int_to_string(80);
    432c:	80 e5       	ldi	r24, 0x50	; 80
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_LCD_int_to_string>
    4334:	4e cf       	rjmp	.-356    	; 0x41d2 <main+0x19a>

00004336 <__mulsi3>:
    4336:	62 9f       	mul	r22, r18
    4338:	d0 01       	movw	r26, r0
    433a:	73 9f       	mul	r23, r19
    433c:	f0 01       	movw	r30, r0
    433e:	82 9f       	mul	r24, r18
    4340:	e0 0d       	add	r30, r0
    4342:	f1 1d       	adc	r31, r1
    4344:	64 9f       	mul	r22, r20
    4346:	e0 0d       	add	r30, r0
    4348:	f1 1d       	adc	r31, r1
    434a:	92 9f       	mul	r25, r18
    434c:	f0 0d       	add	r31, r0
    434e:	83 9f       	mul	r24, r19
    4350:	f0 0d       	add	r31, r0
    4352:	74 9f       	mul	r23, r20
    4354:	f0 0d       	add	r31, r0
    4356:	65 9f       	mul	r22, r21
    4358:	f0 0d       	add	r31, r0
    435a:	99 27       	eor	r25, r25
    435c:	72 9f       	mul	r23, r18
    435e:	b0 0d       	add	r27, r0
    4360:	e1 1d       	adc	r30, r1
    4362:	f9 1f       	adc	r31, r25
    4364:	63 9f       	mul	r22, r19
    4366:	b0 0d       	add	r27, r0
    4368:	e1 1d       	adc	r30, r1
    436a:	f9 1f       	adc	r31, r25
    436c:	bd 01       	movw	r22, r26
    436e:	cf 01       	movw	r24, r30
    4370:	11 24       	eor	r1, r1
    4372:	08 95       	ret

00004374 <__divmodhi4>:
    4374:	97 fb       	bst	r25, 7
    4376:	09 2e       	mov	r0, r25
    4378:	07 26       	eor	r0, r23
    437a:	0a d0       	rcall	.+20     	; 0x4390 <__divmodhi4_neg1>
    437c:	77 fd       	sbrc	r23, 7
    437e:	04 d0       	rcall	.+8      	; 0x4388 <__divmodhi4_neg2>
    4380:	2e d0       	rcall	.+92     	; 0x43de <__udivmodhi4>
    4382:	06 d0       	rcall	.+12     	; 0x4390 <__divmodhi4_neg1>
    4384:	00 20       	and	r0, r0
    4386:	1a f4       	brpl	.+6      	; 0x438e <__divmodhi4_exit>

00004388 <__divmodhi4_neg2>:
    4388:	70 95       	com	r23
    438a:	61 95       	neg	r22
    438c:	7f 4f       	sbci	r23, 0xFF	; 255

0000438e <__divmodhi4_exit>:
    438e:	08 95       	ret

00004390 <__divmodhi4_neg1>:
    4390:	f6 f7       	brtc	.-4      	; 0x438e <__divmodhi4_exit>
    4392:	90 95       	com	r25
    4394:	81 95       	neg	r24
    4396:	9f 4f       	sbci	r25, 0xFF	; 255
    4398:	08 95       	ret

0000439a <__udivmodsi4>:
    439a:	a1 e2       	ldi	r26, 0x21	; 33
    439c:	1a 2e       	mov	r1, r26
    439e:	aa 1b       	sub	r26, r26
    43a0:	bb 1b       	sub	r27, r27
    43a2:	fd 01       	movw	r30, r26
    43a4:	0d c0       	rjmp	.+26     	; 0x43c0 <__udivmodsi4_ep>

000043a6 <__udivmodsi4_loop>:
    43a6:	aa 1f       	adc	r26, r26
    43a8:	bb 1f       	adc	r27, r27
    43aa:	ee 1f       	adc	r30, r30
    43ac:	ff 1f       	adc	r31, r31
    43ae:	a2 17       	cp	r26, r18
    43b0:	b3 07       	cpc	r27, r19
    43b2:	e4 07       	cpc	r30, r20
    43b4:	f5 07       	cpc	r31, r21
    43b6:	20 f0       	brcs	.+8      	; 0x43c0 <__udivmodsi4_ep>
    43b8:	a2 1b       	sub	r26, r18
    43ba:	b3 0b       	sbc	r27, r19
    43bc:	e4 0b       	sbc	r30, r20
    43be:	f5 0b       	sbc	r31, r21

000043c0 <__udivmodsi4_ep>:
    43c0:	66 1f       	adc	r22, r22
    43c2:	77 1f       	adc	r23, r23
    43c4:	88 1f       	adc	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	1a 94       	dec	r1
    43ca:	69 f7       	brne	.-38     	; 0x43a6 <__udivmodsi4_loop>
    43cc:	60 95       	com	r22
    43ce:	70 95       	com	r23
    43d0:	80 95       	com	r24
    43d2:	90 95       	com	r25
    43d4:	9b 01       	movw	r18, r22
    43d6:	ac 01       	movw	r20, r24
    43d8:	bd 01       	movw	r22, r26
    43da:	cf 01       	movw	r24, r30
    43dc:	08 95       	ret

000043de <__udivmodhi4>:
    43de:	aa 1b       	sub	r26, r26
    43e0:	bb 1b       	sub	r27, r27
    43e2:	51 e1       	ldi	r21, 0x11	; 17
    43e4:	07 c0       	rjmp	.+14     	; 0x43f4 <__udivmodhi4_ep>

000043e6 <__udivmodhi4_loop>:
    43e6:	aa 1f       	adc	r26, r26
    43e8:	bb 1f       	adc	r27, r27
    43ea:	a6 17       	cp	r26, r22
    43ec:	b7 07       	cpc	r27, r23
    43ee:	10 f0       	brcs	.+4      	; 0x43f4 <__udivmodhi4_ep>
    43f0:	a6 1b       	sub	r26, r22
    43f2:	b7 0b       	sbc	r27, r23

000043f4 <__udivmodhi4_ep>:
    43f4:	88 1f       	adc	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	5a 95       	dec	r21
    43fa:	a9 f7       	brne	.-22     	; 0x43e6 <__udivmodhi4_loop>
    43fc:	80 95       	com	r24
    43fe:	90 95       	com	r25
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	08 95       	ret

00004406 <__prologue_saves__>:
    4406:	2f 92       	push	r2
    4408:	3f 92       	push	r3
    440a:	4f 92       	push	r4
    440c:	5f 92       	push	r5
    440e:	6f 92       	push	r6
    4410:	7f 92       	push	r7
    4412:	8f 92       	push	r8
    4414:	9f 92       	push	r9
    4416:	af 92       	push	r10
    4418:	bf 92       	push	r11
    441a:	cf 92       	push	r12
    441c:	df 92       	push	r13
    441e:	ef 92       	push	r14
    4420:	ff 92       	push	r15
    4422:	0f 93       	push	r16
    4424:	1f 93       	push	r17
    4426:	cf 93       	push	r28
    4428:	df 93       	push	r29
    442a:	cd b7       	in	r28, 0x3d	; 61
    442c:	de b7       	in	r29, 0x3e	; 62
    442e:	ca 1b       	sub	r28, r26
    4430:	db 0b       	sbc	r29, r27
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	09 94       	ijmp

0000443e <__epilogue_restores__>:
    443e:	2a 88       	ldd	r2, Y+18	; 0x12
    4440:	39 88       	ldd	r3, Y+17	; 0x11
    4442:	48 88       	ldd	r4, Y+16	; 0x10
    4444:	5f 84       	ldd	r5, Y+15	; 0x0f
    4446:	6e 84       	ldd	r6, Y+14	; 0x0e
    4448:	7d 84       	ldd	r7, Y+13	; 0x0d
    444a:	8c 84       	ldd	r8, Y+12	; 0x0c
    444c:	9b 84       	ldd	r9, Y+11	; 0x0b
    444e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4450:	b9 84       	ldd	r11, Y+9	; 0x09
    4452:	c8 84       	ldd	r12, Y+8	; 0x08
    4454:	df 80       	ldd	r13, Y+7	; 0x07
    4456:	ee 80       	ldd	r14, Y+6	; 0x06
    4458:	fd 80       	ldd	r15, Y+5	; 0x05
    445a:	0c 81       	ldd	r16, Y+4	; 0x04
    445c:	1b 81       	ldd	r17, Y+3	; 0x03
    445e:	aa 81       	ldd	r26, Y+2	; 0x02
    4460:	b9 81       	ldd	r27, Y+1	; 0x01
    4462:	ce 0f       	add	r28, r30
    4464:	d1 1d       	adc	r29, r1
    4466:	0f b6       	in	r0, 0x3f	; 63
    4468:	f8 94       	cli
    446a:	de bf       	out	0x3e, r29	; 62
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	cd bf       	out	0x3d, r28	; 61
    4470:	ed 01       	movw	r28, r26
    4472:	08 95       	ret

00004474 <itoa>:
    4474:	fb 01       	movw	r30, r22
    4476:	9f 01       	movw	r18, r30
    4478:	e8 94       	clt
    447a:	42 30       	cpi	r20, 0x02	; 2
    447c:	c4 f0       	brlt	.+48     	; 0x44ae <itoa+0x3a>
    447e:	45 32       	cpi	r20, 0x25	; 37
    4480:	b4 f4       	brge	.+44     	; 0x44ae <itoa+0x3a>
    4482:	4a 30       	cpi	r20, 0x0A	; 10
    4484:	29 f4       	brne	.+10     	; 0x4490 <itoa+0x1c>
    4486:	97 fb       	bst	r25, 7
    4488:	1e f4       	brtc	.+6      	; 0x4490 <itoa+0x1c>
    448a:	90 95       	com	r25
    448c:	81 95       	neg	r24
    448e:	9f 4f       	sbci	r25, 0xFF	; 255
    4490:	64 2f       	mov	r22, r20
    4492:	77 27       	eor	r23, r23
    4494:	0e 94 ef 21 	call	0x43de	; 0x43de <__udivmodhi4>
    4498:	80 5d       	subi	r24, 0xD0	; 208
    449a:	8a 33       	cpi	r24, 0x3A	; 58
    449c:	0c f0       	brlt	.+2      	; 0x44a0 <itoa+0x2c>
    449e:	89 5d       	subi	r24, 0xD9	; 217
    44a0:	81 93       	st	Z+, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	00 97       	sbiw	r24, 0x00	; 0
    44a6:	a1 f7       	brne	.-24     	; 0x4490 <itoa+0x1c>
    44a8:	16 f4       	brtc	.+4      	; 0x44ae <itoa+0x3a>
    44aa:	5d e2       	ldi	r21, 0x2D	; 45
    44ac:	51 93       	st	Z+, r21
    44ae:	10 82       	st	Z, r1
    44b0:	c9 01       	movw	r24, r18
    44b2:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <strrev>

000044b6 <strrev>:
    44b6:	dc 01       	movw	r26, r24
    44b8:	fc 01       	movw	r30, r24
    44ba:	67 2f       	mov	r22, r23
    44bc:	71 91       	ld	r23, Z+
    44be:	77 23       	and	r23, r23
    44c0:	e1 f7       	brne	.-8      	; 0x44ba <strrev+0x4>
    44c2:	32 97       	sbiw	r30, 0x02	; 2
    44c4:	04 c0       	rjmp	.+8      	; 0x44ce <strrev+0x18>
    44c6:	7c 91       	ld	r23, X
    44c8:	6d 93       	st	X+, r22
    44ca:	70 83       	st	Z, r23
    44cc:	62 91       	ld	r22, -Z
    44ce:	ae 17       	cp	r26, r30
    44d0:	bf 07       	cpc	r27, r31
    44d2:	c8 f3       	brcs	.-14     	; 0x44c6 <strrev+0x10>
    44d4:	08 95       	ret

000044d6 <_exit>:
    44d6:	f8 94       	cli

000044d8 <__stop_program>:
    44d8:	ff cf       	rjmp	.-2      	; 0x44d8 <__stop_program>
