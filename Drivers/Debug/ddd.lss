
ddd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003106  0000319a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800068  00800068  000031a2  2**0
                  ALLOC
  3 .stab         000028a4  00000000  00000000  000031a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000160b  00000000  00000000  00005a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000071b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_1>
       8:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_2>
       c:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 37       	cpi	r26, 0x71	; 113
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e0       	ldi	r30, 0x06	; 6
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <main>
      8a:	0c 94 81 18 	jmp	0x3102	; 0x3102 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 18 	jmp	0x300a	; 0x300a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 18 	jmp	0x300a	; 0x300a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_init>:

void (*ADC_ptr)(void);


void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <ADC_init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	//	ADC_REGS->ADCSRA_r.Bitfield.B7=0;  //DISABLE ADC

	ADC_REGS->ADMUX_r.Reg =((ADC_REGS->ADMUX_r.Reg) & 0x3F) | ((Config_Ptr->ref_volt) << 6); //SET REFERENCE VOLTAGE
     cac:	a4 e2       	ldi	r26, 0x24	; 36
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e4 e2       	ldi	r30, 0x24	; 36
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	83 81       	ldd	r24, Z+3	; 0x03
     cb6:	28 2f       	mov	r18, r24
     cb8:	2f 73       	andi	r18, 0x3F	; 63
     cba:	e9 81       	ldd	r30, Y+1	; 0x01
     cbc:	fa 81       	ldd	r31, Y+2	; 0x02
     cbe:	80 81       	ld	r24, Z
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	00 24       	eor	r0, r0
     cc6:	96 95       	lsr	r25
     cc8:	87 95       	ror	r24
     cca:	07 94       	ror	r0
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	07 94       	ror	r0
     cd2:	98 2f       	mov	r25, r24
     cd4:	80 2d       	mov	r24, r0
     cd6:	82 2b       	or	r24, r18
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	8c 93       	st	X, r24

	ADC_REGS->ADCSRA_r.Reg = (ADC_REGS->ADCSRA_r.Reg & 0xF8) | ((Config_Ptr -> prescaler)); //set prescaler
     cdc:	a4 e2       	ldi	r26, 0x24	; 36
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e4 e2       	ldi	r30, 0x24	; 36
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	98 2f       	mov	r25, r24
     ce8:	98 7f       	andi	r25, 0xF8	; 248
     cea:	e9 81       	ldd	r30, Y+1	; 0x01
     cec:	fa 81       	ldd	r31, Y+2	; 0x02
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	89 2b       	or	r24, r25
     cf2:	12 96       	adiw	r26, 0x02	; 2
     cf4:	8c 93       	st	X, r24


	ADC_REGS->ADCSRA_r.Reg |= 1<<7; //ENABLE ADC
     cf6:	a4 e2       	ldi	r26, 0x24	; 36
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e2       	ldi	r30, 0x24	; 36
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	12 96       	adiw	r26, 0x02	; 2
     d04:	8c 93       	st	X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2


	if(Config_Ptr->LeftAdjust==LEFT_ADJUST)
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	84 81       	ldd	r24, Z+4	; 0x04
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	a1 f4       	brne	.+40     	; 0xd3a <ADC_init+0x9c>
	{
		ADC_REGS->ADMUX_r.Bitfield.B5=Config_Ptr->LeftAdjust;  //set left or right adjust
     d12:	a4 e2       	ldi	r26, 0x24	; 36
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e9 81       	ldd	r30, Y+1	; 0x01
     d18:	fa 81       	ldd	r31, Y+2	; 0x02
     d1a:	84 81       	ldd	r24, Z+4	; 0x04
     d1c:	81 70       	andi	r24, 0x01	; 1
     d1e:	81 70       	andi	r24, 0x01	; 1
     d20:	98 2f       	mov	r25, r24
     d22:	92 95       	swap	r25
     d24:	99 0f       	add	r25, r25
     d26:	90 7e       	andi	r25, 0xE0	; 224
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	8c 91       	ld	r24, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	89 2b       	or	r24, r25
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	8c 93       	st	X, r24
     d36:	13 97       	sbiw	r26, 0x03	; 3
     d38:	18 c0       	rjmp	.+48     	; 0xd6a <ADC_init+0xcc>
	}
	else if(Config_Ptr->LeftAdjust==RIGHT_ADJUST)
     d3a:	e9 81       	ldd	r30, Y+1	; 0x01
     d3c:	fa 81       	ldd	r31, Y+2	; 0x02
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	88 23       	and	r24, r24
     d42:	99 f4       	brne	.+38     	; 0xd6a <ADC_init+0xcc>
	{
		ADC_REGS->ADMUX_r.Bitfield.B5=Config_Ptr->LeftAdjust;  //set left or right adjust
     d44:	a4 e2       	ldi	r26, 0x24	; 36
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	84 81       	ldd	r24, Z+4	; 0x04
     d4e:	81 70       	andi	r24, 0x01	; 1
     d50:	81 70       	andi	r24, 0x01	; 1
     d52:	98 2f       	mov	r25, r24
     d54:	92 95       	swap	r25
     d56:	99 0f       	add	r25, r25
     d58:	90 7e       	andi	r25, 0xE0	; 224
     d5a:	13 96       	adiw	r26, 0x03	; 3
     d5c:	8c 91       	ld	r24, X
     d5e:	13 97       	sbiw	r26, 0x03	; 3
     d60:	8f 7d       	andi	r24, 0xDF	; 223
     d62:	89 2b       	or	r24, r25
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	8c 93       	st	X, r24
     d68:	13 97       	sbiw	r26, 0x03	; 3
	}


	if(Config_Ptr->AutoTrigger==ON)
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	99 f4       	brne	.+38     	; 0xd9a <ADC_init+0xfc>
	{
		ADC_REGS->ADCSRA_r.Bitfield.B5=Config_Ptr->AutoTrigger;
     d74:	a4 e2       	ldi	r26, 0x24	; 36
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	81 70       	andi	r24, 0x01	; 1
     d80:	81 70       	andi	r24, 0x01	; 1
     d82:	98 2f       	mov	r25, r24
     d84:	92 95       	swap	r25
     d86:	99 0f       	add	r25, r25
     d88:	90 7e       	andi	r25, 0xE0	; 224
     d8a:	12 96       	adiw	r26, 0x02	; 2
     d8c:	8c 91       	ld	r24, X
     d8e:	12 97       	sbiw	r26, 0x02	; 2
     d90:	8f 7d       	andi	r24, 0xDF	; 223
     d92:	89 2b       	or	r24, r25
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	8c 93       	st	X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2

	}


}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <ADC_getDigitalValueSynchNonBlocking>:

uint16 ADC_getDigitalValueSynchNonBlocking(channel_num channel_num)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
	//	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */

	ADC_REGS->ADMUX_r.Reg = (ADC_REGS->ADMUX_r.Reg & 0xE0); /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     db0:	a4 e2       	ldi	r26, 0x24	; 36
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e4 e2       	ldi	r30, 0x24	; 36
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	83 81       	ldd	r24, Z+3	; 0x03
     dba:	80 7e       	andi	r24, 0xE0	; 224
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	8c 93       	st	X, r24

	ADC_REGS->ADMUX_r.Reg = ADC_REGS->ADMUX_r.Reg | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     dc0:	a4 e2       	ldi	r26, 0x24	; 36
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e4 e2       	ldi	r30, 0x24	; 36
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	89 2b       	or	r24, r25
     dce:	13 96       	adiw	r26, 0x03	; 3
     dd0:	8c 93       	st	X, r24

	SET_BIT(ADC_REGS->ADCSRA_r.Reg,6); /* Start conversion write '1' to ADSC */
     dd2:	a4 e2       	ldi	r26, 0x24	; 36
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e4 e2       	ldi	r30, 0x24	; 36
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	80 64       	ori	r24, 0x40	; 64
     dde:	12 96       	adiw	r26, 0x02	; 2
     de0:	8c 93       	st	X, r24
     de2:	12 97       	sbiw	r26, 0x02	; 2

	if(ADC_REGS->ADCSRA_r.Bitfield.B4 == 0)		/* Wait for conversion to complete, ADIF becomes '1' */
     de4:	e4 e2       	ldi	r30, 0x24	; 36
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	80 71       	andi	r24, 0x10	; 16
     dec:	88 23       	and	r24, r24
     dee:	49 f4       	brne	.+18     	; 0xe02 <ADC_getDigitalValueSynchNonBlocking+0x5e>

	{
		SET_BIT(ADC_REGS->ADCSRA_r.Reg,4); /* Clear ADIF by write '1' to it :) */
     df0:	a4 e2       	ldi	r26, 0x24	; 36
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e4 e2       	ldi	r30, 0x24	; 36
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	8c 93       	st	X, r24
     e00:	12 97       	sbiw	r26, 0x02	; 2

	}

	return ADC_REGS->ADCL_r; /* Read the digital value from the data register */
     e02:	e4 e2       	ldi	r30, 0x24	; 36
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01

}
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <ADC_getDigitalValueAsynchCallBack>:


void ADC_getDigitalValueAsynchCallBack(channel_num channel_num,void(*ptrfn)(void))
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <ADC_getDigitalValueAsynchCallBack+0x6>
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	7b 83       	std	Y+3, r23	; 0x03
     e22:	6a 83       	std	Y+2, r22	; 0x02
	ADC_REGS->ADMUX_r.Reg = (ADC_REGS->ADMUX_r.Reg & 0xE0); /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     e24:	a4 e2       	ldi	r26, 0x24	; 36
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e4 e2       	ldi	r30, 0x24	; 36
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	80 7e       	andi	r24, 0xE0	; 224
     e30:	13 96       	adiw	r26, 0x03	; 3
     e32:	8c 93       	st	X, r24

	ADC_REGS->ADMUX_r.Reg = ADC_REGS->ADMUX_r.Reg | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     e34:	a4 e2       	ldi	r26, 0x24	; 36
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e4 e2       	ldi	r30, 0x24	; 36
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	93 81       	ldd	r25, Z+3	; 0x03
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	89 2b       	or	r24, r25
     e42:	13 96       	adiw	r26, 0x03	; 3
     e44:	8c 93       	st	X, r24

	SET_BIT(SREG,PIN7_ID);
     e46:	af e5       	ldi	r26, 0x5F	; 95
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ef e5       	ldi	r30, 0x5F	; 95
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	8c 93       	st	X, r24

	ADC_REGS->ADCSRA_r.Bitfield.B3=1;
     e54:	e4 e2       	ldi	r30, 0x24	; 36
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	82 83       	std	Z+2, r24	; 0x02

	ADC_REGS->ADCSRA_r.Bitfield.B6=1;
     e5e:	e4 e2       	ldi	r30, 0x24	; 36
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	80 64       	ori	r24, 0x40	; 64
     e66:	82 83       	std	Z+2, r24	; 0x02

	ADC_ptr=ptrfn;
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	9b 81       	ldd	r25, Y+3	; 0x03
     e6c:	90 93 6a 00 	sts	0x006A, r25
     e70:	80 93 69 00 	sts	0x0069, r24


}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <__vector_16>:

void __vector_16 (void)
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(SREG,PIN7_ID);
     eaa:	af e5       	ldi	r26, 0x5F	; 95
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ef e5       	ldi	r30, 0x5F	; 95
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 77       	andi	r24, 0x7F	; 127
     eb6:	8c 93       	st	X, r24
	ADC_ptr();
     eb8:	e0 91 69 00 	lds	r30, 0x0069
     ebc:	f0 91 6a 00 	lds	r31, 0x006A
     ec0:	09 95       	icall
	ADC_REGS->ADCSRA_r.Bitfield.B4=0;
     ec2:	e4 e2       	ldi	r30, 0x24	; 36
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	8f 7e       	andi	r24, 0xEF	; 239
     eca:	82 83       	std	Z+2, r24	; 0x02

}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	ff 91       	pop	r31
     ed2:	ef 91       	pop	r30
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <DIO_voidSetPinDirection>:

#include <DIO_interface.h>


void DIO_voidSetPinDirection(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Direction)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <DIO_voidSetPinDirection+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <DIO_voidSetPinDirection+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <DIO_voidSetPinDirection+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6b 83       	std	Y+3, r22	; 0x03
     f06:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3e 83       	std	Y+6, r19	; 0x06
     f10:	2d 83       	std	Y+5, r18	; 0x05
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_voidSetPinDirection+0x2c>
     f1c:	51 c0       	rjmp	.+162    	; 0xfc0 <DIO_voidSetPinDirection+0xce>
     f1e:	2d 81       	ldd	r18, Y+5	; 0x05
     f20:	3e 81       	ldd	r19, Y+6	; 0x06
     f22:	24 30       	cpi	r18, 0x04	; 4
     f24:	31 05       	cpc	r19, r1
     f26:	7c f4       	brge	.+30     	; 0xf46 <DIO_voidSetPinDirection+0x54>
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	71 f1       	breq	.+92     	; 0xf8e <DIO_voidSetPinDirection+0x9c>
     f32:	2d 81       	ldd	r18, Y+5	; 0x05
     f34:	3e 81       	ldd	r19, Y+6	; 0x06
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	ac f5       	brge	.+106    	; 0xfa6 <DIO_voidSetPinDirection+0xb4>
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	d1 f0       	breq	.+52     	; 0xf78 <DIO_voidSetPinDirection+0x86>
     f44:	81 c0       	rjmp	.+258    	; 0x1048 <DIO_voidSetPinDirection+0x156>
     f46:	2d 81       	ldd	r18, Y+5	; 0x05
     f48:	3e 81       	ldd	r19, Y+6	; 0x06
     f4a:	25 30       	cpi	r18, 0x05	; 5
     f4c:	31 05       	cpc	r19, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <DIO_voidSetPinDirection+0x60>
     f50:	52 c0       	rjmp	.+164    	; 0xff6 <DIO_voidSetPinDirection+0x104>
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	85 30       	cpi	r24, 0x05	; 5
     f58:	91 05       	cpc	r25, r1
     f5a:	0c f4       	brge	.+2      	; 0xf5e <DIO_voidSetPinDirection+0x6c>
     f5c:	3f c0       	rjmp	.+126    	; 0xfdc <DIO_voidSetPinDirection+0xea>
     f5e:	2d 81       	ldd	r18, Y+5	; 0x05
     f60:	3e 81       	ldd	r19, Y+6	; 0x06
     f62:	26 30       	cpi	r18, 0x06	; 6
     f64:	31 05       	cpc	r19, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <DIO_voidSetPinDirection+0x78>
     f68:	54 c0       	rjmp	.+168    	; 0x1012 <DIO_voidSetPinDirection+0x120>
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	87 30       	cpi	r24, 0x07	; 7
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <DIO_voidSetPinDirection+0x84>
     f74:	5d c0       	rjmp	.+186    	; 0x1030 <DIO_voidSetPinDirection+0x13e>
     f76:	68 c0       	rjmp	.+208    	; 0x1048 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	81 70       	andi	r24, 0x01	; 1
     f7c:	e9 81       	ldd	r30, Y+1	; 0x01
     f7e:	fa 81       	ldd	r31, Y+2	; 0x02
     f80:	98 2f       	mov	r25, r24
     f82:	91 70       	andi	r25, 0x01	; 1
     f84:	81 81       	ldd	r24, Z+1	; 0x01
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	89 2b       	or	r24, r25
     f8a:	81 83       	std	Z+1, r24	; 0x01
     f8c:	5d c0       	rjmp	.+186    	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	81 70       	andi	r24, 0x01	; 1
     f92:	e9 81       	ldd	r30, Y+1	; 0x01
     f94:	fa 81       	ldd	r31, Y+2	; 0x02
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	98 2f       	mov	r25, r24
     f9a:	99 0f       	add	r25, r25
     f9c:	81 81       	ldd	r24, Z+1	; 0x01
     f9e:	8d 7f       	andi	r24, 0xFD	; 253
     fa0:	89 2b       	or	r24, r25
     fa2:	81 83       	std	Z+1, r24	; 0x01
     fa4:	51 c0       	rjmp	.+162    	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	e9 81       	ldd	r30, Y+1	; 0x01
     fac:	fa 81       	ldd	r31, Y+2	; 0x02
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	98 2f       	mov	r25, r24
     fb2:	99 0f       	add	r25, r25
     fb4:	99 0f       	add	r25, r25
     fb6:	81 81       	ldd	r24, Z+1	; 0x01
     fb8:	8b 7f       	andi	r24, 0xFB	; 251
     fba:	89 2b       	or	r24, r25
     fbc:	81 83       	std	Z+1, r24	; 0x01
     fbe:	44 c0       	rjmp	.+136    	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	81 70       	andi	r24, 0x01	; 1
     fc4:	e9 81       	ldd	r30, Y+1	; 0x01
     fc6:	fa 81       	ldd	r31, Y+2	; 0x02
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	98 2f       	mov	r25, r24
     fcc:	99 0f       	add	r25, r25
     fce:	99 0f       	add	r25, r25
     fd0:	99 0f       	add	r25, r25
     fd2:	81 81       	ldd	r24, Z+1	; 0x01
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	89 2b       	or	r24, r25
     fd8:	81 83       	std	Z+1, r24	; 0x01
     fda:	36 c0       	rjmp	.+108    	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	81 70       	andi	r24, 0x01	; 1
     fe0:	e9 81       	ldd	r30, Y+1	; 0x01
     fe2:	fa 81       	ldd	r31, Y+2	; 0x02
     fe4:	81 70       	andi	r24, 0x01	; 1
     fe6:	98 2f       	mov	r25, r24
     fe8:	92 95       	swap	r25
     fea:	90 7f       	andi	r25, 0xF0	; 240
     fec:	81 81       	ldd	r24, Z+1	; 0x01
     fee:	8f 7e       	andi	r24, 0xEF	; 239
     ff0:	89 2b       	or	r24, r25
     ff2:	81 83       	std	Z+1, r24	; 0x01
     ff4:	29 c0       	rjmp	.+82     	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	98 2f       	mov	r25, r24
    1002:	92 95       	swap	r25
    1004:	99 0f       	add	r25, r25
    1006:	90 7e       	andi	r25, 0xE0	; 224
    1008:	81 81       	ldd	r24, Z+1	; 0x01
    100a:	8f 7d       	andi	r24, 0xDF	; 223
    100c:	89 2b       	or	r24, r25
    100e:	81 83       	std	Z+1, r24	; 0x01
    1010:	1b c0       	rjmp	.+54     	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	81 70       	andi	r24, 0x01	; 1
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	98 2f       	mov	r25, r24
    101e:	92 95       	swap	r25
    1020:	99 0f       	add	r25, r25
    1022:	99 0f       	add	r25, r25
    1024:	90 7c       	andi	r25, 0xC0	; 192
    1026:	81 81       	ldd	r24, Z+1	; 0x01
    1028:	8f 7b       	andi	r24, 0xBF	; 191
    102a:	89 2b       	or	r24, r25
    102c:	81 83       	std	Z+1, r24	; 0x01
    102e:	0c c0       	rjmp	.+24     	; 0x1048 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	81 70       	andi	r24, 0x01	; 1
    1034:	e9 81       	ldd	r30, Y+1	; 0x01
    1036:	fa 81       	ldd	r31, Y+2	; 0x02
    1038:	98 2f       	mov	r25, r24
    103a:	97 95       	ror	r25
    103c:	99 27       	eor	r25, r25
    103e:	97 95       	ror	r25
    1040:	81 81       	ldd	r24, Z+1	; 0x01
    1042:	8f 77       	andi	r24, 0x7F	; 127
    1044:	89 2b       	or	r24, r25
    1046:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
    1048:	26 96       	adiw	r28, 0x06	; 6
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_voidSetPinValue+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_voidSetPinValue+0x8>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <DIO_voidSetPinValue+0xa>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3e 83       	std	Y+6, r19	; 0x06
    1078:	2d 83       	std	Y+5, r18	; 0x05
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <DIO_voidSetPinValue+0x2c>
    1084:	51 c0       	rjmp	.+162    	; 0x1128 <DIO_voidSetPinValue+0xce>
    1086:	2d 81       	ldd	r18, Y+5	; 0x05
    1088:	3e 81       	ldd	r19, Y+6	; 0x06
    108a:	24 30       	cpi	r18, 0x04	; 4
    108c:	31 05       	cpc	r19, r1
    108e:	7c f4       	brge	.+30     	; 0x10ae <DIO_voidSetPinValue+0x54>
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	71 f1       	breq	.+92     	; 0x10f6 <DIO_voidSetPinValue+0x9c>
    109a:	2d 81       	ldd	r18, Y+5	; 0x05
    109c:	3e 81       	ldd	r19, Y+6	; 0x06
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	ac f5       	brge	.+106    	; 0x110e <DIO_voidSetPinValue+0xb4>
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <DIO_voidSetPinValue+0x86>
    10ac:	81 c0       	rjmp	.+258    	; 0x11b0 <DIO_voidSetPinValue+0x156>
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	25 30       	cpi	r18, 0x05	; 5
    10b4:	31 05       	cpc	r19, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <DIO_voidSetPinValue+0x60>
    10b8:	52 c0       	rjmp	.+164    	; 0x115e <DIO_voidSetPinValue+0x104>
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	85 30       	cpi	r24, 0x05	; 5
    10c0:	91 05       	cpc	r25, r1
    10c2:	0c f4       	brge	.+2      	; 0x10c6 <DIO_voidSetPinValue+0x6c>
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <DIO_voidSetPinValue+0xea>
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <DIO_voidSetPinValue+0x78>
    10d0:	54 c0       	rjmp	.+168    	; 0x117a <DIO_voidSetPinValue+0x120>
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	87 30       	cpi	r24, 0x07	; 7
    10d8:	91 05       	cpc	r25, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <DIO_voidSetPinValue+0x84>
    10dc:	5d c0       	rjmp	.+186    	; 0x1198 <DIO_voidSetPinValue+0x13e>
    10de:	68 c0       	rjmp	.+208    	; 0x11b0 <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	81 70       	andi	r24, 0x01	; 1
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	98 2f       	mov	r25, r24
    10ea:	91 70       	andi	r25, 0x01	; 1
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	8e 7f       	andi	r24, 0xFE	; 254
    10f0:	89 2b       	or	r24, r25
    10f2:	82 83       	std	Z+2, r24	; 0x02
    10f4:	5d c0       	rjmp	.+186    	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	81 70       	andi	r24, 0x01	; 1
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	98 2f       	mov	r25, r24
    1102:	99 0f       	add	r25, r25
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	8d 7f       	andi	r24, 0xFD	; 253
    1108:	89 2b       	or	r24, r25
    110a:	82 83       	std	Z+2, r24	; 0x02
    110c:	51 c0       	rjmp	.+162    	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	98 2f       	mov	r25, r24
    111a:	99 0f       	add	r25, r25
    111c:	99 0f       	add	r25, r25
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	8b 7f       	andi	r24, 0xFB	; 251
    1122:	89 2b       	or	r24, r25
    1124:	82 83       	std	Z+2, r24	; 0x02
    1126:	44 c0       	rjmp	.+136    	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	e9 81       	ldd	r30, Y+1	; 0x01
    112e:	fa 81       	ldd	r31, Y+2	; 0x02
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	98 2f       	mov	r25, r24
    1134:	99 0f       	add	r25, r25
    1136:	99 0f       	add	r25, r25
    1138:	99 0f       	add	r25, r25
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	87 7f       	andi	r24, 0xF7	; 247
    113e:	89 2b       	or	r24, r25
    1140:	82 83       	std	Z+2, r24	; 0x02
    1142:	36 c0       	rjmp	.+108    	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	98 2f       	mov	r25, r24
    1150:	92 95       	swap	r25
    1152:	90 7f       	andi	r25, 0xF0	; 240
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	8f 7e       	andi	r24, 0xEF	; 239
    1158:	89 2b       	or	r24, r25
    115a:	82 83       	std	Z+2, r24	; 0x02
    115c:	29 c0       	rjmp	.+82     	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	e9 81       	ldd	r30, Y+1	; 0x01
    1164:	fa 81       	ldd	r31, Y+2	; 0x02
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	98 2f       	mov	r25, r24
    116a:	92 95       	swap	r25
    116c:	99 0f       	add	r25, r25
    116e:	90 7e       	andi	r25, 0xE0	; 224
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	8f 7d       	andi	r24, 0xDF	; 223
    1174:	89 2b       	or	r24, r25
    1176:	82 83       	std	Z+2, r24	; 0x02
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	81 70       	andi	r24, 0x01	; 1
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	81 70       	andi	r24, 0x01	; 1
    1184:	98 2f       	mov	r25, r24
    1186:	92 95       	swap	r25
    1188:	99 0f       	add	r25, r25
    118a:	99 0f       	add	r25, r25
    118c:	90 7c       	andi	r25, 0xC0	; 192
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	8f 7b       	andi	r24, 0xBF	; 191
    1192:	89 2b       	or	r24, r25
    1194:	82 83       	std	Z+2, r24	; 0x02
    1196:	0c c0       	rjmp	.+24     	; 0x11b0 <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	e9 81       	ldd	r30, Y+1	; 0x01
    119e:	fa 81       	ldd	r31, Y+2	; 0x02
    11a0:	98 2f       	mov	r25, r24
    11a2:	97 95       	ror	r25
    11a4:	99 27       	eor	r25, r25
    11a6:	97 95       	ror	r25
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	8f 77       	andi	r24, 0x7F	; 127
    11ac:	89 2b       	or	r24, r25
    11ae:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
    11b0:	26 96       	adiw	r28, 0x06	; 6
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <DIO_voidGetPinValue>:

uint8 DIO_voidGetPinValue(Port_Def* ptr,uint8 Copy_u8PinId)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_voidGetPinValue+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_voidGetPinValue+0x8>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <DIO_voidGetPinValue+0xa>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9b 83       	std	Y+3, r25	; 0x03
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
    11d6:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3e 83       	std	Y+6, r19	; 0x06
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <DIO_voidGetPinValue+0x2c>
    11ec:	3e c0       	rjmp	.+124    	; 0x126a <DIO_voidGetPinValue+0xa8>
    11ee:	2d 81       	ldd	r18, Y+5	; 0x05
    11f0:	3e 81       	ldd	r19, Y+6	; 0x06
    11f2:	24 30       	cpi	r18, 0x04	; 4
    11f4:	31 05       	cpc	r19, r1
    11f6:	7c f4       	brge	.+30     	; 0x1216 <DIO_voidGetPinValue+0x54>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	29 f1       	breq	.+74     	; 0x124c <DIO_voidGetPinValue+0x8a>
    1202:	2d 81       	ldd	r18, Y+5	; 0x05
    1204:	3e 81       	ldd	r19, Y+6	; 0x06
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	3c f5       	brge	.+78     	; 0x125a <DIO_voidGetPinValue+0x98>
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	b1 f0       	breq	.+44     	; 0x1240 <DIO_voidGetPinValue+0x7e>
    1214:	55 c0       	rjmp	.+170    	; 0x12c0 <DIO_voidGetPinValue+0xfe>
    1216:	2d 81       	ldd	r18, Y+5	; 0x05
    1218:	3e 81       	ldd	r19, Y+6	; 0x06
    121a:	25 30       	cpi	r18, 0x05	; 5
    121c:	31 05       	cpc	r19, r1
    121e:	b1 f1       	breq	.+108    	; 0x128c <DIO_voidGetPinValue+0xca>
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	85 30       	cpi	r24, 0x05	; 5
    1226:	91 05       	cpc	r25, r1
    1228:	4c f1       	brlt	.+82     	; 0x127c <DIO_voidGetPinValue+0xba>
    122a:	2d 81       	ldd	r18, Y+5	; 0x05
    122c:	3e 81       	ldd	r19, Y+6	; 0x06
    122e:	26 30       	cpi	r18, 0x06	; 6
    1230:	31 05       	cpc	r19, r1
    1232:	a9 f1       	breq	.+106    	; 0x129e <DIO_voidGetPinValue+0xdc>
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	87 30       	cpi	r24, 0x07	; 7
    123a:	91 05       	cpc	r25, r1
    123c:	d1 f1       	breq	.+116    	; 0x12b2 <DIO_voidGetPinValue+0xf0>
    123e:	40 c0       	rjmp	.+128    	; 0x12c0 <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    1240:	ea 81       	ldd	r30, Y+2	; 0x02
    1242:	fb 81       	ldd	r31, Y+3	; 0x03
    1244:	80 81       	ld	r24, Z
    1246:	81 70       	andi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	3a c0       	rjmp	.+116    	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    124c:	ea 81       	ldd	r30, Y+2	; 0x02
    124e:	fb 81       	ldd	r31, Y+3	; 0x03
    1250:	80 81       	ld	r24, Z
    1252:	86 95       	lsr	r24
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	33 c0       	rjmp	.+102    	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    125a:	ea 81       	ldd	r30, Y+2	; 0x02
    125c:	fb 81       	ldd	r31, Y+3	; 0x03
    125e:	80 81       	ld	r24, Z
    1260:	86 95       	lsr	r24
    1262:	86 95       	lsr	r24
    1264:	81 70       	andi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	2b c0       	rjmp	.+86     	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    126a:	ea 81       	ldd	r30, Y+2	; 0x02
    126c:	fb 81       	ldd	r31, Y+3	; 0x03
    126e:	80 81       	ld	r24, Z
    1270:	86 95       	lsr	r24
    1272:	86 95       	lsr	r24
    1274:	86 95       	lsr	r24
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	22 c0       	rjmp	.+68     	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    127c:	ea 81       	ldd	r30, Y+2	; 0x02
    127e:	fb 81       	ldd	r31, Y+3	; 0x03
    1280:	80 81       	ld	r24, Z
    1282:	82 95       	swap	r24
    1284:	8f 70       	andi	r24, 0x0F	; 15
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	1a c0       	rjmp	.+52     	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	80 81       	ld	r24, Z
    1292:	82 95       	swap	r24
    1294:	86 95       	lsr	r24
    1296:	87 70       	andi	r24, 0x07	; 7
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	11 c0       	rjmp	.+34     	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    129e:	ea 81       	ldd	r30, Y+2	; 0x02
    12a0:	fb 81       	ldd	r31, Y+3	; 0x03
    12a2:	80 81       	ld	r24, Z
    12a4:	82 95       	swap	r24
    12a6:	86 95       	lsr	r24
    12a8:	86 95       	lsr	r24
    12aa:	83 70       	andi	r24, 0x03	; 3
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    12b2:	ea 81       	ldd	r30, Y+2	; 0x02
    12b4:	fb 81       	ldd	r31, Y+3	; 0x03
    12b6:	80 81       	ld	r24, Z
    12b8:	88 1f       	adc	r24, r24
    12ba:	88 27       	eor	r24, r24
    12bc:	88 1f       	adc	r24, r24
    12be:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c2:	26 96       	adiw	r28, 0x06	; 6
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(Port_Def* ptr,uint8 Copy_u8Direction)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_voidSetPortDirection+0x6>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    12e6:	e9 81       	ldd	r30, Y+1	; 0x01
    12e8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	81 83       	std	Z+1, r24	; 0x01
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(Port_Def* ptr,uint8 Copy_u8Value)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_voidSetPortValue+0x6>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	82 83       	std	Z+2, r24	; 0x02
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <DIO_voidGetPortValue>:

uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_voidGetPortValue+0x6>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    132e:	e9 81       	ldd	r30, Y+1	; 0x01
    1330:	fa 81       	ldd	r31, Y+2	; 0x02
    1332:	80 81       	ld	r24, Z
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <EXTI_ENABLE>:
static ERROR_STATE status;

/****************************ENABLE THE EXTERNAL INTERRUPT MODULE****************************/

ERROR_STATE EXTI_ENABLE(EXTI_CONFIG* ptr_config)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <EXTI_ENABLE+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <EXTI_ENABLE+0x8>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01

	GIE_Disable();											//DISABLE GLOBAL INT BIT (I-BIT)
    134e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <GIE_Disable>
	SET_BIT(EXTI->GICR.Reg,ptr_config->INT_ID);				//ENABLE WHICH INT TO BE USED
    1352:	a4 e5       	ldi	r26, 0x54	; 84
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e4 e5       	ldi	r30, 0x54	; 84
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	87 81       	ldd	r24, Z+7	; 0x07
    135c:	48 2f       	mov	r20, r24
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	81 81       	ldd	r24, Z+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <EXTI_ENABLE+0x36>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <EXTI_ENABLE+0x32>
    1378:	84 2b       	or	r24, r20
    137a:	17 96       	adiw	r26, 0x07	; 7
    137c:	8c 93       	st	X, r24
    137e:	17 97       	sbiw	r26, 0x07	; 7


	if(ptr_config->INT_ID != EXTI_INT0 || ptr_config->INT_ID != EXTI_INT1 || ptr_config->INT_ID != EXTI_INT2)
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	86 30       	cpi	r24, 0x06	; 6
    1388:	51 f4       	brne	.+20     	; 0x139e <EXTI_ENABLE+0x60>
    138a:	e9 81       	ldd	r30, Y+1	; 0x01
    138c:	fa 81       	ldd	r31, Y+2	; 0x02
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	87 30       	cpi	r24, 0x07	; 7
    1392:	29 f4       	brne	.+10     	; 0x139e <EXTI_ENABLE+0x60>
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	81 81       	ldd	r24, Z+1	; 0x01
    139a:	85 30       	cpi	r24, 0x05	; 5
    139c:	11 f0       	breq	.+4      	; 0x13a2 <EXTI_ENABLE+0x64>
	{
		status= OUT_OF_RANGE_VALUE;
    139e:	10 92 68 00 	sts	0x0068, r1
	//	else if(ptr_config=='NULL')      //ana kda bkaren address b integer 3awz akaren eza kan l pointer da byshawer 3la null wlla la
	//	{
	//		status=NULL_POINTER;
	//	}

	SET_BIT(EXTI->GICR.Reg,ptr_config->INT_ID);				//ENABLE WHICH INT TO BE USED
    13a2:	a4 e5       	ldi	r26, 0x54	; 84
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e4 e5       	ldi	r30, 0x54	; 84
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	87 81       	ldd	r24, Z+7	; 0x07
    13ac:	48 2f       	mov	r20, r24
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	81 81       	ldd	r24, Z+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <EXTI_ENABLE+0x84>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	2a 95       	dec	r18
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <EXTI_ENABLE+0x80>
    13c6:	84 2b       	or	r24, r20
    13c8:	17 96       	adiw	r26, 0x07	; 7
    13ca:	8c 93       	st	X, r24
    13cc:	17 97       	sbiw	r26, 0x07	; 7

	switch(ptr_config->INT_ID)
    13ce:	e9 81       	ldd	r30, Y+1	; 0x01
    13d0:	fa 81       	ldd	r31, Y+2	; 0x02
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3c 83       	std	Y+4, r19	; 0x04
    13da:	2b 83       	std	Y+3, r18	; 0x03
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	86 30       	cpi	r24, 0x06	; 6
    13e2:	91 05       	cpc	r25, r1
    13e4:	61 f0       	breq	.+24     	; 0x13fe <EXTI_ENABLE+0xc0>
    13e6:	2b 81       	ldd	r18, Y+3	; 0x03
    13e8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ea:	27 30       	cpi	r18, 0x07	; 7
    13ec:	31 05       	cpc	r19, r1
    13ee:	39 f1       	breq	.+78     	; 0x143e <EXTI_ENABLE+0x100>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	85 30       	cpi	r24, 0x05	; 5
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <EXTI_ENABLE+0xbe>
    13fa:	48 c0       	rjmp	.+144    	; 0x148c <EXTI_ENABLE+0x14e>
    13fc:	70 c0       	rjmp	.+224    	; 0x14de <EXTI_ENABLE+0x1a0>
	{
	case EXTI_INT0:
		EXTI->MCUCR.Reg &= 0b11111100;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT0
    13fe:	a4 e5       	ldi	r26, 0x54	; 84
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e4 e5       	ldi	r30, 0x54	; 84
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	81 81       	ldd	r24, Z+1	; 0x01
    1408:	8c 7f       	andi	r24, 0xFC	; 252
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	8c 93       	st	X, r24
		EXTI->MCUCR.Reg |= ptr_config->trigger_type;
    140e:	a4 e5       	ldi	r26, 0x54	; 84
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e4 e5       	ldi	r30, 0x54	; 84
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	80 81       	ld	r24, Z
    141e:	89 2b       	or	r24, r25
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[0] = ptr_config->ptr_call_back;
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	90 93 6c 00 	sts	0x006C, r25
    1432:	80 93 6b 00 	sts	0x006B, r24
		status= NO_ERROR;
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	80 93 68 00 	sts	0x0068, r24
    143c:	50 c0       	rjmp	.+160    	; 0x14de <EXTI_ENABLE+0x1a0>
		break;

	case EXTI_INT1:
		EXTI->MCUCR.Reg &= 0b11110011;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT1
    143e:	a4 e5       	ldi	r26, 0x54	; 84
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e4 e5       	ldi	r30, 0x54	; 84
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	83 7f       	andi	r24, 0xF3	; 243
    144a:	11 96       	adiw	r26, 0x01	; 1
    144c:	8c 93       	st	X, r24
		EXTI->MCUCR.Reg |=(ptr_config->trigger_type) <<2;
    144e:	a4 e5       	ldi	r26, 0x54	; 84
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e4 e5       	ldi	r30, 0x54	; 84
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	81 81       	ldd	r24, Z+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	80 81       	ld	r24, Z
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	82 2b       	or	r24, r18
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	8c 93       	st	X, r24
    1472:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[1] = ptr_config->ptr_call_back;
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	90 93 6e 00 	sts	0x006E, r25
    1480:	80 93 6d 00 	sts	0x006D, r24
		status= NO_ERROR;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	80 93 68 00 	sts	0x0068, r24
    148a:	29 c0       	rjmp	.+82     	; 0x14de <EXTI_ENABLE+0x1a0>
		break;

	case EXTI_INT2:

		EXTI->MCUCSR.Reg &=0b11011111;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT2
    148c:	a4 e5       	ldi	r26, 0x54	; 84
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e4 e5       	ldi	r30, 0x54	; 84
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8f 7d       	andi	r24, 0xDF	; 223
    1498:	8c 93       	st	X, r24
		EXTI->MCUCSR.Reg |=(ptr_config->trigger_type-2) <<PIN6_ID;
    149a:	a4 e5       	ldi	r26, 0x54	; 84
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e4 e5       	ldi	r30, 0x54	; 84
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	28 2f       	mov	r18, r24
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	80 81       	ld	r24, Z
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 97       	sbiw	r24, 0x02	; 2
    14b2:	00 24       	eor	r0, r0
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	07 94       	ror	r0
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	07 94       	ror	r0
    14c0:	98 2f       	mov	r25, r24
    14c2:	80 2d       	mov	r24, r0
    14c4:	82 2b       	or	r24, r18
    14c6:	8c 93       	st	X, r24
		EXT_INT_POINTERS[2] = ptr_config->ptr_call_back;
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	90 93 70 00 	sts	0x0070, r25
    14d4:	80 93 6f 00 	sts	0x006F, r24
		status= NO_ERROR;
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	80 93 68 00 	sts	0x0068, r24
		break;
	}
	GIE_Enable();											//DON'T FORGET TO ENABLE THE GLOBAL I-BIT AFTER CONFIGURING THE EXTI
    14de:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <GIE_Enable>

	return status;
    14e2:	80 91 68 00 	lds	r24, 0x0068
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <EXTI_DISABLE>:


/********************************DISABLE THE EXTI MODULE****************************/

ERROR_STATE EXTI_DISABLE(EXTI_CONFIG* ptr_config)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <EXTI_DISABLE+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <EXTI_DISABLE+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_config->INT_ID != EXTI_INT0 || ptr_config->INT_ID != EXTI_INT1 || ptr_config->INT_ID != EXTI_INT2)
    1504:	e9 81       	ldd	r30, Y+1	; 0x01
    1506:	fa 81       	ldd	r31, Y+2	; 0x02
    1508:	81 81       	ldd	r24, Z+1	; 0x01
    150a:	86 30       	cpi	r24, 0x06	; 6
    150c:	51 f4       	brne	.+20     	; 0x1522 <EXTI_DISABLE+0x2e>
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	fa 81       	ldd	r31, Y+2	; 0x02
    1512:	81 81       	ldd	r24, Z+1	; 0x01
    1514:	87 30       	cpi	r24, 0x07	; 7
    1516:	29 f4       	brne	.+10     	; 0x1522 <EXTI_DISABLE+0x2e>
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	81 81       	ldd	r24, Z+1	; 0x01
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	19 f0       	breq	.+6      	; 0x1528 <EXTI_DISABLE+0x34>
	{
		status= OUT_OF_RANGE_VALUE;
    1522:	10 92 68 00 	sts	0x0068, r1
    1526:	3d c0       	rjmp	.+122    	; 0x15a2 <EXTI_DISABLE+0xae>
//	{
//		status=NULL_POINTER;
//	}
	else
	{
		switch(ptr_config->INT_ID)
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	81 81       	ldd	r24, Z+1	; 0x01
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3c 83       	std	Y+4, r19	; 0x04
    1534:	2b 83       	std	Y+3, r18	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	86 30       	cpi	r24, 0x06	; 6
    153c:	91 05       	cpc	r25, r1
    153e:	59 f0       	breq	.+22     	; 0x1556 <EXTI_DISABLE+0x62>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	27 30       	cpi	r18, 0x07	; 7
    1546:	31 05       	cpc	r19, r1
    1548:	99 f0       	breq	.+38     	; 0x1570 <EXTI_DISABLE+0x7c>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	85 30       	cpi	r24, 0x05	; 5
    1550:	91 05       	cpc	r25, r1
    1552:	d9 f0       	breq	.+54     	; 0x158a <EXTI_DISABLE+0x96>
    1554:	26 c0       	rjmp	.+76     	; 0x15a2 <EXTI_DISABLE+0xae>
		{
		case EXTI_INT0:
			EXTI->GICR.Reg &= ~1<<EXTI_INT0; //disable interrupt 0
    1556:	a4 e5       	ldi	r26, 0x54	; 84
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e4 e5       	ldi	r30, 0x54	; 84
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	87 81       	ldd	r24, Z+7	; 0x07
    1560:	80 78       	andi	r24, 0x80	; 128
    1562:	17 96       	adiw	r26, 0x07	; 7
    1564:	8c 93       	st	X, r24
    1566:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERROR;
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	80 93 68 00 	sts	0x0068, r24
    156e:	19 c0       	rjmp	.+50     	; 0x15a2 <EXTI_DISABLE+0xae>
			break;

		case EXTI_INT1:
			EXTI->GICR.Reg &= ~(1<<EXTI_INT1); //disable interrupt 1
    1570:	a4 e5       	ldi	r26, 0x54	; 84
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e4 e5       	ldi	r30, 0x54	; 84
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	87 81       	ldd	r24, Z+7	; 0x07
    157a:	8f 77       	andi	r24, 0x7F	; 127
    157c:	17 96       	adiw	r26, 0x07	; 7
    157e:	8c 93       	st	X, r24
    1580:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERROR;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	80 93 68 00 	sts	0x0068, r24
    1588:	0c c0       	rjmp	.+24     	; 0x15a2 <EXTI_DISABLE+0xae>
			break;

		case EXTI_INT2:
			EXTI->GICR.Reg &= ~1<<EXTI_INT2; //disable interrupt 2
    158a:	a4 e5       	ldi	r26, 0x54	; 84
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e4 e5       	ldi	r30, 0x54	; 84
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	87 81       	ldd	r24, Z+7	; 0x07
    1594:	80 7c       	andi	r24, 0xC0	; 192
    1596:	17 96       	adiw	r26, 0x07	; 7
    1598:	8c 93       	st	X, r24
    159a:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERROR;
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	80 93 68 00 	sts	0x0068, r24
			break;
		}
	}
	return status;
    15a2:	80 91 68 00 	lds	r24, 0x0068

}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <GIE_Enable>:

void GIE_Enable()
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,PIN7_ID);
    15bc:	af e5       	ldi	r26, 0x5F	; 95
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ef e5       	ldi	r30, 0x5F	; 95
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	8c 93       	st	X, r24
}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <GIE_Disable>:

void GIE_Disable()
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    15d8:	af e5       	ldi	r26, 0x5F	; 95
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ef e5       	ldi	r30, 0x5F	; 95
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 77       	andi	r24, 0x7F	; 127
    15e4:	8c 93       	st	X, r24
}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <__vector_1>:


/****************************ISR FOR INT0**********************/
void __vector_1 (void)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    1616:	af e5       	ldi	r26, 0x5F	; 95
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e5       	ldi	r30, 0x5F	; 95
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 77       	andi	r24, 0x7F	; 127
    1622:	8c 93       	st	X, r24
	EXT_INT_POINTERS[0]();
    1624:	e0 91 6b 00 	lds	r30, 0x006B
    1628:	f0 91 6c 00 	lds	r31, 0x006C
    162c:	09 95       	icall
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__vector_2>:

/****************************ISR FOR INT1**********************/

void __vector_2 (void){
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	6f 93       	push	r22
    1668:	7f 93       	push	r23
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	af 93       	push	r26
    1670:	bf 93       	push	r27
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    167e:	af e5       	ldi	r26, 0x5F	; 95
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ef e5       	ldi	r30, 0x5F	; 95
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 77       	andi	r24, 0x7F	; 127
    168a:	8c 93       	st	X, r24
	EXT_INT_POINTERS[1]();
    168c:	e0 91 6d 00 	lds	r30, 0x006D
    1690:	f0 91 6e 00 	lds	r31, 0x006E
    1694:	09 95       	icall

}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <__vector_3>:
/****************************ISR FOR INT2**********************/

void __vector_3 (void){
    16bc:	1f 92       	push	r1
    16be:	0f 92       	push	r0
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	0f 92       	push	r0
    16c4:	11 24       	eor	r1, r1
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    16e6:	af e5       	ldi	r26, 0x5F	; 95
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ef e5       	ldi	r30, 0x5F	; 95
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 77       	andi	r24, 0x7F	; 127
    16f2:	8c 93       	st	X, r24
	EXT_INT_POINTERS[2]();
    16f4:	e0 91 6f 00 	lds	r30, 0x006F
    16f8:	f0 91 70 00 	lds	r31, 0x0070
    16fc:	09 95       	icall

}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	0f 90       	pop	r0
    1720:	1f 90       	pop	r1
    1722:	18 95       	reti

00001724 <keypad_init>:
#include"KEYPAD.h"



void keypad_init()
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTC,PIN5_ID,OUTPUT);
    172c:	83 e3       	ldi	r24, 0x33	; 51
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	65 e0       	ldi	r22, 0x05	; 5
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN4_ID,OUTPUT);
    1738:	83 e3       	ldi	r24, 0x33	; 51
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	64 e0       	ldi	r22, 0x04	; 4
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN3_ID,OUTPUT);
    1744:	83 e3       	ldi	r24, 0x33	; 51
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	63 e0       	ldi	r22, 0x03	; 3
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN2_ID,OUTPUT);
    1750:	83 e3       	ldi	r24, 0x33	; 51
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	62 e0       	ldi	r22, 0x02	; 2
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PORTD,PIN7_ID,INPUT);
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	67 e0       	ldi	r22, 0x07	; 7
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN6_ID,INPUT);
    1768:	80 e3       	ldi	r24, 0x30	; 48
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	66 e0       	ldi	r22, 0x06	; 6
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN5_ID,INPUT);
    1774:	80 e3       	ldi	r24, 0x30	; 48
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	65 e0       	ldi	r22, 0x05	; 5
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN3_ID,INPUT);
    1780:	80 e3       	ldi	r24, 0x30	; 48
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	63 e0       	ldi	r22, 0x03	; 3
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>


}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <keypad_getch>:


uint8 keypad_getch()
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	0f 92       	push	r0
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	uint8 ch=0;
    179c:	19 82       	std	Y+1, r1	; 0x01
	//uint8 array[ROWS][COLUMNS];

	return ch ;
    179e:	89 81       	ldd	r24, Y+1	; 0x01

}
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <H_LCD_void_Init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void H_LCD_void_Init(void)
{
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ce 55       	subi	r28, 0x5E	; 94
    17b6:	d0 40       	sbci	r29, 0x00	; 0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS, and E pins as output pins */
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT);
    17c2:	89 e3       	ldi	r24, 0x39	; 57
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	63 e0       	ldi	r22, 0x03	; 3
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>

	//DIO_voidSetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT);
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT);
    17ce:	89 e3       	ldi	r24, 0x39	; 57
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	62 e0       	ldi	r22, 0x02	; 2
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>

	/* Configure 4 pins in the data port as output pins */
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D4_PIN,OUTPUT);
    17da:	86 e3       	ldi	r24, 0x36	; 54
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D5_PIN,OUTPUT);
    17e6:	86 e3       	ldi	r24, 0x36	; 54
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D6_PIN,OUTPUT);
    17f2:	86 e3       	ldi	r24, 0x36	; 54
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D7_PIN,OUTPUT);
    17fe:	86 e3       	ldi	r24, 0x36	; 54
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	64 e0       	ldi	r22, 0x04	; 4
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
    180a:	fe 01       	movw	r30, r28
    180c:	e5 5a       	subi	r30, 0xA5	; 165
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a8 e4       	ldi	r26, 0x48	; 72
    1816:	b2 e4       	ldi	r27, 0x42	; 66
    1818:	80 83       	st	Z, r24
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	a2 83       	std	Z+2, r26	; 0x02
    181e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1820:	8e 01       	movw	r16, r28
    1822:	09 5a       	subi	r16, 0xA9	; 169
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	fe 01       	movw	r30, r28
    1828:	e5 5a       	subi	r30, 0xA5	; 165
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	55 e4       	ldi	r21, 0x45	; 69
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	f8 01       	movw	r30, r16
    1846:	80 83       	st	Z, r24
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	a2 83       	std	Z+2, r26	; 0x02
    184c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    184e:	fe 01       	movw	r30, r28
    1850:	e9 5a       	subi	r30, 0xA9	; 169
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e8       	ldi	r20, 0x80	; 128
    1862:	5f e3       	ldi	r21, 0x3F	; 63
    1864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1868:	88 23       	and	r24, r24
    186a:	44 f4       	brge	.+16     	; 0x187c <H_LCD_void_Init+0xd4>
		__ticks = 1;
    186c:	fe 01       	movw	r30, r28
    186e:	eb 5a       	subi	r30, 0xAB	; 171
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	80 83       	st	Z, r24
    187a:	64 c0       	rjmp	.+200    	; 0x1944 <H_LCD_void_Init+0x19c>
	else if (__tmp > 65535)
    187c:	fe 01       	movw	r30, r28
    187e:	e9 5a       	subi	r30, 0xA9	; 169
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	0c f0       	brlt	.+2      	; 0x189c <H_LCD_void_Init+0xf4>
    189a:	43 c0       	rjmp	.+134    	; 0x1922 <H_LCD_void_Init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	fe 01       	movw	r30, r28
    189e:	e5 5a       	subi	r30, 0xA5	; 165
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e2       	ldi	r20, 0x20	; 32
    18b0:	51 e4       	ldi	r21, 0x41	; 65
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8e 01       	movw	r16, r28
    18bc:	0b 5a       	subi	r16, 0xAB	; 171
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	f8 01       	movw	r30, r16
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <H_LCD_void_Init+0x16a>
    18d4:	fe 01       	movw	r30, r28
    18d6:	ed 5a       	subi	r30, 0xAD	; 173
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 e9       	ldi	r24, 0x90	; 144
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 5a       	subi	r30, 0xAD	; 173
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <H_LCD_void_Init+0x144>
    18f0:	fe 01       	movw	r30, r28
    18f2:	ed 5a       	subi	r30, 0xAD	; 173
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	de 01       	movw	r26, r28
    18fc:	ab 5a       	subi	r26, 0xAB	; 171
    18fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1900:	fe 01       	movw	r30, r28
    1902:	eb 5a       	subi	r30, 0xAB	; 171
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	11 96       	adiw	r26, 0x01	; 1
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	fe 01       	movw	r30, r28
    1914:	eb 5a       	subi	r30, 0xAB	; 171
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	d1 f6       	brne	.-76     	; 0x18d4 <H_LCD_void_Init+0x12c>
    1920:	27 c0       	rjmp	.+78     	; 0x1970 <H_LCD_void_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	8e 01       	movw	r16, r28
    1924:	0b 5a       	subi	r16, 0xAB	; 171
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	fe 01       	movw	r30, r28
    192a:	e9 5a       	subi	r30, 0xA9	; 169
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
    1944:	de 01       	movw	r26, r28
    1946:	af 5a       	subi	r26, 0xAF	; 175
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	eb 5a       	subi	r30, 0xAB	; 171
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	8d 93       	st	X+, r24
    1956:	9c 93       	st	X, r25
    1958:	fe 01       	movw	r30, r28
    195a:	ef 5a       	subi	r30, 0xAF	; 175
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <H_LCD_void_Init+0x1ba>
    1966:	fe 01       	movw	r30, r28
    1968:	ef 5a       	subi	r30, 0xAF	; 175
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24

#if (LCD_DATA_BITS_MODE == 4)
	_delay_ms(50);

	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1970:	89 e3       	ldi	r24, 0x39	; 57
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN0_ID,LOGIC_LOW);
    197c:	86 e3       	ldi	r24, 0x36	; 54
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN1_ID,LOGIC_HIGH);
    1988:	86 e3       	ldi	r24, 0x36	; 54
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN2_ID,LOGIC_LOW);
    1994:	86 e3       	ldi	r24, 0x36	; 54
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	62 e0       	ldi	r22, 0x02	; 2
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN4_ID,LOGIC_LOW);
    19a0:	86 e3       	ldi	r24, 0x36	; 54
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	64 e0       	ldi	r22, 0x04	; 4
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    19ac:	fe 01       	movw	r30, r28
    19ae:	e3 5b       	subi	r30, 0xB3	; 179
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e8       	ldi	r26, 0x80	; 128
    19b8:	bf e3       	ldi	r27, 0x3F	; 63
    19ba:	80 83       	st	Z, r24
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	a2 83       	std	Z+2, r26	; 0x02
    19c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	8e 01       	movw	r16, r28
    19c4:	07 5b       	subi	r16, 0xB7	; 183
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	fe 01       	movw	r30, r28
    19ca:	e3 5b       	subi	r30, 0xB3	; 179
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a e7       	ldi	r20, 0x7A	; 122
    19dc:	55 e4       	ldi	r21, 0x45	; 69
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	f8 01       	movw	r30, r16
    19e8:	80 83       	st	Z, r24
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	a2 83       	std	Z+2, r26	; 0x02
    19ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f0:	fe 01       	movw	r30, r28
    19f2:	e7 5b       	subi	r30, 0xB7	; 183
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	44 f4       	brge	.+16     	; 0x1a1e <H_LCD_void_Init+0x276>
		__ticks = 1;
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e9 5b       	subi	r30, 0xB9	; 185
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	64 c0       	rjmp	.+200    	; 0x1ae6 <H_LCD_void_Init+0x33e>
	else if (__tmp > 65535)
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e7 5b       	subi	r30, 0xB7	; 183
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	0c f0       	brlt	.+2      	; 0x1a3e <H_LCD_void_Init+0x296>
    1a3c:	43 c0       	rjmp	.+134    	; 0x1ac4 <H_LCD_void_Init+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e3 5b       	subi	r30, 0xB3	; 179
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	09 5b       	subi	r16, 0xB9	; 185
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	f8 01       	movw	r30, r16
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	1f c0       	rjmp	.+62     	; 0x1ab4 <H_LCD_void_Init+0x30c>
    1a76:	fe 01       	movw	r30, r28
    1a78:	eb 5b       	subi	r30, 0xBB	; 187
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 e9       	ldi	r24, 0x90	; 144
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	80 83       	st	Z, r24
    1a84:	fe 01       	movw	r30, r28
    1a86:	eb 5b       	subi	r30, 0xBB	; 187
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <H_LCD_void_Init+0x2e6>
    1a92:	fe 01       	movw	r30, r28
    1a94:	eb 5b       	subi	r30, 0xBB	; 187
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	de 01       	movw	r26, r28
    1a9e:	a9 5b       	subi	r26, 0xB9	; 185
    1aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e9 5b       	subi	r30, 0xB9	; 185
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	91 81       	ldd	r25, Z+1	; 0x01
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	11 96       	adiw	r26, 0x01	; 1
    1ab0:	9c 93       	st	X, r25
    1ab2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5b       	subi	r30, 0xB9	; 185
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	d1 f6       	brne	.-76     	; 0x1a76 <H_LCD_void_Init+0x2ce>
    1ac2:	27 c0       	rjmp	.+78     	; 0x1b12 <H_LCD_void_Init+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	8e 01       	movw	r16, r28
    1ac6:	09 5b       	subi	r16, 0xB9	; 185
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	fe 01       	movw	r30, r28
    1acc:	e7 5b       	subi	r30, 0xB7	; 183
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	de 01       	movw	r26, r28
    1ae8:	ad 5b       	subi	r26, 0xBD	; 189
    1aea:	bf 4f       	sbci	r27, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	e9 5b       	subi	r30, 0xB9	; 185
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	8d 93       	st	X+, r24
    1af8:	9c 93       	st	X, r25
    1afa:	fe 01       	movw	r30, r28
    1afc:	ed 5b       	subi	r30, 0xBD	; 189
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <H_LCD_void_Init+0x35c>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 5b       	subi	r30, 0xBD	; 189
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
	_delay_ms(1);


	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b12:	88 e2       	ldi	r24, 0x28	; 40
    1b14:	0e 94 dd 12 	call	0x25ba	; 0x25ba <H_LCD_void_sendCommand>
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ff 96       	adiw	r30, 0x3f	; 63
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 ea       	ldi	r26, 0xA0	; 160
    1b22:	b0 e4       	ldi	r27, 0x40	; 64
    1b24:	80 83       	st	Z, r24
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	a2 83       	std	Z+2, r26	; 0x02
    1b2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ff 96       	adiw	r30, 0x3f	; 63
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	2b ea       	ldi	r18, 0xAB	; 171
    1b3a:	3a ea       	ldi	r19, 0xAA	; 170
    1b3c:	4a ea       	ldi	r20, 0xAA	; 170
    1b3e:	50 e4       	ldi	r21, 0x40	; 64
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8b af       	std	Y+59, r24	; 0x3b
    1b4a:	9c af       	std	Y+60, r25	; 0x3c
    1b4c:	ad af       	std	Y+61, r26	; 0x3d
    1b4e:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1b50:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b52:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	1c f4       	brge	.+6      	; 0x1b6e <H_LCD_void_Init+0x3c6>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	8a af       	std	Y+58, r24	; 0x3a
    1b6c:	93 c0       	rjmp	.+294    	; 0x1c94 <H_LCD_void_Init+0x4ec>
	else if (__tmp > 255)
    1b6e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b70:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	53 e4       	ldi	r21, 0x43	; 67
    1b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <H_LCD_void_Init+0x3e0>
    1b86:	7d c0       	rjmp	.+250    	; 0x1c82 <H_LCD_void_Init+0x4da>
	{
		_delay_ms(__us / 1000.0);
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ff 96       	adiw	r30, 0x3f	; 63
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8e ab       	std	Y+54, r24	; 0x36
    1ba6:	9f ab       	std	Y+55, r25	; 0x37
    1ba8:	a8 af       	std	Y+56, r26	; 0x38
    1baa:	b9 af       	std	Y+57, r27	; 0x39
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6e a9       	ldd	r22, Y+54	; 0x36
    1bae:	7f a9       	ldd	r23, Y+55	; 0x37
    1bb0:	88 ad       	ldd	r24, Y+56	; 0x38
    1bb2:	99 ad       	ldd	r25, Y+57	; 0x39
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	55 e4       	ldi	r21, 0x45	; 69
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8a ab       	std	Y+50, r24	; 0x32
    1bc6:	9b ab       	std	Y+51, r25	; 0x33
    1bc8:	ac ab       	std	Y+52, r26	; 0x34
    1bca:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1bcc:	6a a9       	ldd	r22, Y+50	; 0x32
    1bce:	7b a9       	ldd	r23, Y+51	; 0x33
    1bd0:	8c a9       	ldd	r24, Y+52	; 0x34
    1bd2:	9d a9       	ldd	r25, Y+53	; 0x35
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <H_LCD_void_Init+0x446>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	99 ab       	std	Y+49, r25	; 0x31
    1bea:	88 ab       	std	Y+48, r24	; 0x30
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <H_LCD_void_Init+0x4c4>
	else if (__tmp > 65535)
    1bee:	6a a9       	ldd	r22, Y+50	; 0x32
    1bf0:	7b a9       	ldd	r23, Y+51	; 0x33
    1bf2:	8c a9       	ldd	r24, Y+52	; 0x34
    1bf4:	9d a9       	ldd	r25, Y+53	; 0x35
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <H_LCD_void_Init+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6e a9       	ldd	r22, Y+54	; 0x36
    1c08:	7f a9       	ldd	r23, Y+55	; 0x37
    1c0a:	88 ad       	ldd	r24, Y+56	; 0x38
    1c0c:	99 ad       	ldd	r25, Y+57	; 0x39
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	99 ab       	std	Y+49, r25	; 0x31
    1c2c:	88 ab       	std	Y+48, r24	; 0x30
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <H_LCD_void_Init+0x4a6>
    1c30:	80 e9       	ldi	r24, 0x90	; 144
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	9f a7       	std	Y+47, r25	; 0x2f
    1c36:	8e a7       	std	Y+46, r24	; 0x2e
    1c38:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c3a:	9f a5       	ldd	r25, Y+47	; 0x2f
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <H_LCD_void_Init+0x494>
    1c40:	9f a7       	std	Y+47, r25	; 0x2f
    1c42:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	88 a9       	ldd	r24, Y+48	; 0x30
    1c46:	99 a9       	ldd	r25, Y+49	; 0x31
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	99 ab       	std	Y+49, r25	; 0x31
    1c4c:	88 ab       	std	Y+48, r24	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	88 a9       	ldd	r24, Y+48	; 0x30
    1c50:	99 a9       	ldd	r25, Y+49	; 0x31
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <H_LCD_void_Init+0x488>
    1c56:	24 c0       	rjmp	.+72     	; 0x1ca0 <H_LCD_void_Init+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6a a9       	ldd	r22, Y+50	; 0x32
    1c5a:	7b a9       	ldd	r23, Y+51	; 0x33
    1c5c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c5e:	9d a9       	ldd	r25, Y+53	; 0x35
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	99 ab       	std	Y+49, r25	; 0x31
    1c6a:	88 ab       	std	Y+48, r24	; 0x30
    1c6c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c6e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c70:	9d a7       	std	Y+45, r25	; 0x2d
    1c72:	8c a7       	std	Y+44, r24	; 0x2c
    1c74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <H_LCD_void_Init+0x4d0>
    1c7c:	9d a7       	std	Y+45, r25	; 0x2d
    1c7e:	8c a7       	std	Y+44, r24	; 0x2c
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <H_LCD_void_Init+0x4f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c82:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c84:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8a af       	std	Y+58, r24	; 0x3a
    1c94:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c96:	8b a7       	std	Y+43, r24	; 0x2b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c9a:	8a 95       	dec	r24
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <H_LCD_void_Init+0x4f2>
    1c9e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_us(5);
	H_LCD_void_sendCommand(LCD_CURSOR_OFF);
    1ca0:	8c e0       	ldi	r24, 0x0C	; 12
    1ca2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <H_LCD_void_sendCommand>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a0 e8       	ldi	r26, 0x80	; 128
    1cac:	bf e3       	ldi	r27, 0x3F	; 63
    1cae:	8f a3       	std	Y+39, r24	; 0x27
    1cb0:	98 a7       	std	Y+40, r25	; 0x28
    1cb2:	a9 a7       	std	Y+41, r26	; 0x29
    1cb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cba:	89 a5       	ldd	r24, Y+41	; 0x29
    1cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a e7       	ldi	r20, 0x7A	; 122
    1cc4:	55 e4       	ldi	r21, 0x45	; 69
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8b a3       	std	Y+35, r24	; 0x23
    1cd0:	9c a3       	std	Y+36, r25	; 0x24
    1cd2:	ad a3       	std	Y+37, r26	; 0x25
    1cd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <H_LCD_void_Init+0x550>
		__ticks = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9a a3       	std	Y+34, r25	; 0x22
    1cf4:	89 a3       	std	Y+33, r24	; 0x21
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <H_LCD_void_Init+0x5ce>
	else if (__tmp > 65535)
    1cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	4f e7       	ldi	r20, 0x7F	; 127
    1d06:	57 e4       	ldi	r21, 0x47	; 71
    1d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	4c f5       	brge	.+82     	; 0x1d62 <H_LCD_void_Init+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	6f a1       	ldd	r22, Y+39	; 0x27
    1d12:	78 a5       	ldd	r23, Y+40	; 0x28
    1d14:	89 a5       	ldd	r24, Y+41	; 0x29
    1d16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e2       	ldi	r20, 0x20	; 32
    1d1e:	51 e4       	ldi	r21, 0x41	; 65
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	89 a3       	std	Y+33, r24	; 0x21
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <H_LCD_void_Init+0x5b0>
    1d3a:	80 e9       	ldi	r24, 0x90	; 144
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	98 a3       	std	Y+32, r25	; 0x20
    1d40:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d44:	98 a1       	ldd	r25, Y+32	; 0x20
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <H_LCD_void_Init+0x59e>
    1d4a:	98 a3       	std	Y+32, r25	; 0x20
    1d4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d50:	9a a1       	ldd	r25, Y+34	; 0x22
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9a a3       	std	Y+34, r25	; 0x22
    1d56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <H_LCD_void_Init+0x592>
    1d60:	14 c0       	rjmp	.+40     	; 0x1d8a <H_LCD_void_Init+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	6b a1       	ldd	r22, Y+35	; 0x23
    1d64:	7c a1       	ldd	r23, Y+36	; 0x24
    1d66:	8d a1       	ldd	r24, Y+37	; 0x25
    1d68:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9a a3       	std	Y+34, r25	; 0x22
    1d74:	89 a3       	std	Y+33, r24	; 0x21
    1d76:	89 a1       	ldd	r24, Y+33	; 0x21
    1d78:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <H_LCD_void_Init+0x5da>
    1d86:	9e 8f       	std	Y+30, r25	; 0x1e
    1d88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <H_LCD_void_sendCommand>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 ea       	ldi	r26, 0xA0	; 160
    1d96:	b0 e4       	ldi	r27, 0x40	; 64
    1d98:	89 8f       	std	Y+25, r24	; 0x19
    1d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	69 8d       	ldd	r22, Y+25	; 0x19
    1da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	55 e4       	ldi	r21, 0x45	; 69
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8d 8b       	std	Y+21, r24	; 0x15
    1dba:	9e 8b       	std	Y+22, r25	; 0x16
    1dbc:	af 8b       	std	Y+23, r26	; 0x17
    1dbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <H_LCD_void_Init+0x63a>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9c 8b       	std	Y+20, r25	; 0x14
    1dde:	8b 8b       	std	Y+19, r24	; 0x13
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <H_LCD_void_Init+0x6b8>
	else if (__tmp > 65535)
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <H_LCD_void_Init+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9c 8b       	std	Y+20, r25	; 0x14
    1e20:	8b 8b       	std	Y+19, r24	; 0x13
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <H_LCD_void_Init+0x69a>
    1e24:	80 e9       	ldi	r24, 0x90	; 144
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	89 8b       	std	Y+17, r24	; 0x11
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <H_LCD_void_Init+0x688>
    1e34:	9a 8b       	std	Y+18, r25	; 0x12
    1e36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9c 8b       	std	Y+20, r25	; 0x14
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <H_LCD_void_Init+0x67c>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <H_LCD_void_Init+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9c 8b       	std	Y+20, r25	; 0x14
    1e5e:	8b 8b       	std	Y+19, r24	; 0x13
    1e60:	8b 89       	ldd	r24, Y+19	; 0x13
    1e62:	9c 89       	ldd	r25, Y+20	; 0x14
    1e64:	98 8b       	std	Y+16, r25	; 0x10
    1e66:	8f 87       	std	Y+15, r24	; 0x0f
    1e68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6a:	98 89       	ldd	r25, Y+16	; 0x10
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <H_LCD_void_Init+0x6c4>
    1e70:	98 8b       	std	Y+16, r25	; 0x10
    1e72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	0e 94 dd 12 	call	0x25ba	; 0x25ba <H_LCD_void_sendCommand>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a e7       	ldi	r20, 0x7A	; 122
    1e98:	55 e4       	ldi	r21, 0x45	; 69
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <H_LCD_void_Init+0x724>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <H_LCD_void_Init+0x7a2>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <H_LCD_void_Init+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <H_LCD_void_Init+0x784>
    1f0e:	80 e9       	ldi	r24, 0x90	; 144
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <H_LCD_void_Init+0x772>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <H_LCD_void_Init+0x766>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <H_LCD_void_Init+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <H_LCD_void_Init+0x7ae>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_sendCommand(LCD_Entery_mode_set);

#endif


}
    1f5e:	c2 5a       	subi	r28, 0xA2	; 162
    1f60:	df 4f       	sbci	r29, 0xFF	; 255
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <latchbyte>:

static void latchbyte(uint8_t Byte)
{
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	c7 54       	subi	r28, 0x47	; 71
    1f84:	d0 40       	sbci	r29, 0x00	; 0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	fe 01       	movw	r30, r28
    1f92:	e9 5b       	subi	r30, 0xB9	; 185
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 83       	st	Z, r24


	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1f98:	89 e3       	ldi	r24, 0x39	; 57
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ed 5b       	subi	r30, 0xBD	; 189
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e8       	ldi	r26, 0x80	; 128
    1fb0:	bf e3       	ldi	r27, 0x3F	; 63
    1fb2:	80 83       	st	Z, r24
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	a2 83       	std	Z+2, r26	; 0x02
    1fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	8e 01       	movw	r16, r28
    1fbc:	01 5c       	subi	r16, 0xC1	; 193
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ed 5b       	subi	r30, 0xBD	; 189
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	55 e4       	ldi	r21, 0x45	; 69
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	f8 01       	movw	r30, r16
    1fe0:	80 83       	st	Z, r24
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	a2 83       	std	Z+2, r26	; 0x02
    1fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe8:	fe 01       	movw	r30, r28
    1fea:	ff 96       	adiw	r30, 0x3f	; 63
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <latchbyte+0x98>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e af       	std	Y+62, r25	; 0x3e
    200a:	8d af       	std	Y+61, r24	; 0x3d
    200c:	46 c0       	rjmp	.+140    	; 0x209a <latchbyte+0x124>
	else if (__tmp > 65535)
    200e:	fe 01       	movw	r30, r28
    2010:	ff 96       	adiw	r30, 0x3f	; 63
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	64 f5       	brge	.+88     	; 0x2082 <latchbyte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	fe 01       	movw	r30, r28
    202c:	ed 5b       	subi	r30, 0xBD	; 189
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9e af       	std	Y+62, r25	; 0x3e
    2056:	8d af       	std	Y+61, r24	; 0x3d
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <latchbyte+0x102>
    205a:	80 e9       	ldi	r24, 0x90	; 144
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9c af       	std	Y+60, r25	; 0x3c
    2060:	8b af       	std	Y+59, r24	; 0x3b
    2062:	8b ad       	ldd	r24, Y+59	; 0x3b
    2064:	9c ad       	ldd	r25, Y+60	; 0x3c
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <latchbyte+0xf0>
    206a:	9c af       	std	Y+60, r25	; 0x3c
    206c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2070:	9e ad       	ldd	r25, Y+62	; 0x3e
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9e af       	std	Y+62, r25	; 0x3e
    2076:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8d ad       	ldd	r24, Y+61	; 0x3d
    207a:	9e ad       	ldd	r25, Y+62	; 0x3e
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <latchbyte+0xe4>
    2080:	16 c0       	rjmp	.+44     	; 0x20ae <latchbyte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	fe 01       	movw	r30, r28
    2084:	ff 96       	adiw	r30, 0x3f	; 63
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9e af       	std	Y+62, r25	; 0x3e
    2098:	8d af       	std	Y+61, r24	; 0x3d
    209a:	8d ad       	ldd	r24, Y+61	; 0x3d
    209c:	9e ad       	ldd	r25, Y+62	; 0x3e
    209e:	9a af       	std	Y+58, r25	; 0x3a
    20a0:	89 af       	std	Y+57, r24	; 0x39
    20a2:	89 ad       	ldd	r24, Y+57	; 0x39
    20a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <latchbyte+0x130>
    20aa:	9a af       	std	Y+58, r25	; 0x3a
    20ac:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D4_PIN, GET_BIT(Byte,4));
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 5b       	subi	r30, 0xB9	; 185
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	80 71       	andi	r24, 0x10	; 16
    20bc:	90 70       	andi	r25, 0x00	; 0
    20be:	95 95       	asr	r25
    20c0:	87 95       	ror	r24
    20c2:	95 95       	asr	r25
    20c4:	87 95       	ror	r24
    20c6:	95 95       	asr	r25
    20c8:	87 95       	ror	r24
    20ca:	95 95       	asr	r25
    20cc:	87 95       	ror	r24
    20ce:	28 2f       	mov	r18, r24
    20d0:	86 e3       	ldi	r24, 0x36	; 54
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	42 2f       	mov	r20, r18
    20d8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D5_PIN, GET_BIT(Byte,5));
    20dc:	fe 01       	movw	r30, r28
    20de:	e9 5b       	subi	r30, 0xB9	; 185
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	80 72       	andi	r24, 0x20	; 32
    20ea:	90 70       	andi	r25, 0x00	; 0
    20ec:	95 95       	asr	r25
    20ee:	87 95       	ror	r24
    20f0:	95 95       	asr	r25
    20f2:	87 95       	ror	r24
    20f4:	95 95       	asr	r25
    20f6:	87 95       	ror	r24
    20f8:	95 95       	asr	r25
    20fa:	87 95       	ror	r24
    20fc:	95 95       	asr	r25
    20fe:	87 95       	ror	r24
    2100:	28 2f       	mov	r18, r24
    2102:	86 e3       	ldi	r24, 0x36	; 54
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	42 2f       	mov	r20, r18
    210a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D6_PIN, GET_BIT(Byte,6));
    210e:	fe 01       	movw	r30, r28
    2110:	e9 5b       	subi	r30, 0xB9	; 185
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	80 74       	andi	r24, 0x40	; 64
    211c:	90 70       	andi	r25, 0x00	; 0
    211e:	08 2e       	mov	r0, r24
    2120:	89 2f       	mov	r24, r25
    2122:	00 0c       	add	r0, r0
    2124:	88 1f       	adc	r24, r24
    2126:	99 0b       	sbc	r25, r25
    2128:	00 0c       	add	r0, r0
    212a:	88 1f       	adc	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	28 2f       	mov	r18, r24
    2130:	86 e3       	ldi	r24, 0x36	; 54
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	62 e0       	ldi	r22, 0x02	; 2
    2136:	42 2f       	mov	r20, r18
    2138:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D7_PIN, GET_BIT(Byte,7));
    213c:	fe 01       	movw	r30, r28
    213e:	e9 5b       	subi	r30, 0xB9	; 185
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	28 2f       	mov	r18, r24
    2146:	22 1f       	adc	r18, r18
    2148:	22 27       	eor	r18, r18
    214a:	22 1f       	adc	r18, r18
    214c:	86 e3       	ldi	r24, 0x36	; 54
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	42 2f       	mov	r20, r18
    2154:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2158:	89 e3       	ldi	r24, 0x39	; 57
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	62 e0       	ldi	r22, 0x02	; 2
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e8       	ldi	r26, 0x80	; 128
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	8d ab       	std	Y+53, r24	; 0x35
    216e:	9e ab       	std	Y+54, r25	; 0x36
    2170:	af ab       	std	Y+55, r26	; 0x37
    2172:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	6d a9       	ldd	r22, Y+53	; 0x35
    2176:	7e a9       	ldd	r23, Y+54	; 0x36
    2178:	8f a9       	ldd	r24, Y+55	; 0x37
    217a:	98 ad       	ldd	r25, Y+56	; 0x38
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a e7       	ldi	r20, 0x7A	; 122
    2182:	55 e4       	ldi	r21, 0x45	; 69
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	89 ab       	std	Y+49, r24	; 0x31
    218e:	9a ab       	std	Y+50, r25	; 0x32
    2190:	ab ab       	std	Y+51, r26	; 0x33
    2192:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2194:	69 a9       	ldd	r22, Y+49	; 0x31
    2196:	7a a9       	ldd	r23, Y+50	; 0x32
    2198:	8b a9       	ldd	r24, Y+51	; 0x33
    219a:	9c a9       	ldd	r25, Y+52	; 0x34
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <latchbyte+0x240>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	98 ab       	std	Y+48, r25	; 0x30
    21b2:	8f a7       	std	Y+47, r24	; 0x2f
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <latchbyte+0x2be>
	else if (__tmp > 65535)
    21b6:	69 a9       	ldd	r22, Y+49	; 0x31
    21b8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ba:	8b a9       	ldd	r24, Y+51	; 0x33
    21bc:	9c a9       	ldd	r25, Y+52	; 0x34
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <latchbyte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	6d a9       	ldd	r22, Y+53	; 0x35
    21d0:	7e a9       	ldd	r23, Y+54	; 0x36
    21d2:	8f a9       	ldd	r24, Y+55	; 0x37
    21d4:	98 ad       	ldd	r25, Y+56	; 0x38
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	98 ab       	std	Y+48, r25	; 0x30
    21f4:	8f a7       	std	Y+47, r24	; 0x2f
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <latchbyte+0x2a0>
    21f8:	80 e9       	ldi	r24, 0x90	; 144
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	9e a7       	std	Y+46, r25	; 0x2e
    21fe:	8d a7       	std	Y+45, r24	; 0x2d
    2200:	8d a5       	ldd	r24, Y+45	; 0x2d
    2202:	9e a5       	ldd	r25, Y+46	; 0x2e
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <latchbyte+0x28e>
    2208:	9e a7       	std	Y+46, r25	; 0x2e
    220a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8f a5       	ldd	r24, Y+47	; 0x2f
    220e:	98 a9       	ldd	r25, Y+48	; 0x30
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	98 ab       	std	Y+48, r25	; 0x30
    2214:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8f a5       	ldd	r24, Y+47	; 0x2f
    2218:	98 a9       	ldd	r25, Y+48	; 0x30
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <latchbyte+0x282>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <latchbyte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	69 a9       	ldd	r22, Y+49	; 0x31
    2222:	7a a9       	ldd	r23, Y+50	; 0x32
    2224:	8b a9       	ldd	r24, Y+51	; 0x33
    2226:	9c a9       	ldd	r25, Y+52	; 0x34
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	9c a7       	std	Y+44, r25	; 0x2c
    223a:	8b a7       	std	Y+43, r24	; 0x2b
    223c:	8b a5       	ldd	r24, Y+43	; 0x2b
    223e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <latchbyte+0x2ca>
    2244:	9c a7       	std	Y+44, r25	; 0x2c
    2246:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2248:	89 e3       	ldi	r24, 0x39	; 57
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	62 e0       	ldi	r22, 0x02	; 2
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e8       	ldi	r26, 0x80	; 128
    225a:	bf e3       	ldi	r27, 0x3F	; 63
    225c:	8f a3       	std	Y+39, r24	; 0x27
    225e:	98 a7       	std	Y+40, r25	; 0x28
    2260:	a9 a7       	std	Y+41, r26	; 0x29
    2262:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	6f a1       	ldd	r22, Y+39	; 0x27
    2266:	78 a5       	ldd	r23, Y+40	; 0x28
    2268:	89 a5       	ldd	r24, Y+41	; 0x29
    226a:	9a a5       	ldd	r25, Y+42	; 0x2a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a e7       	ldi	r20, 0x7A	; 122
    2272:	55 e4       	ldi	r21, 0x45	; 69
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8b a3       	std	Y+35, r24	; 0x23
    227e:	9c a3       	std	Y+36, r25	; 0x24
    2280:	ad a3       	std	Y+37, r26	; 0x25
    2282:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2284:	6b a1       	ldd	r22, Y+35	; 0x23
    2286:	7c a1       	ldd	r23, Y+36	; 0x24
    2288:	8d a1       	ldd	r24, Y+37	; 0x25
    228a:	9e a1       	ldd	r25, Y+38	; 0x26
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <latchbyte+0x330>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <latchbyte+0x3ae>
	else if (__tmp > 65535)
    22a6:	6b a1       	ldd	r22, Y+35	; 0x23
    22a8:	7c a1       	ldd	r23, Y+36	; 0x24
    22aa:	8d a1       	ldd	r24, Y+37	; 0x25
    22ac:	9e a1       	ldd	r25, Y+38	; 0x26
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <latchbyte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	6f a1       	ldd	r22, Y+39	; 0x27
    22c0:	78 a5       	ldd	r23, Y+40	; 0x28
    22c2:	89 a5       	ldd	r24, Y+41	; 0x29
    22c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9a a3       	std	Y+34, r25	; 0x22
    22e4:	89 a3       	std	Y+33, r24	; 0x21
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <latchbyte+0x390>
    22e8:	80 e9       	ldi	r24, 0x90	; 144
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	98 a3       	std	Y+32, r25	; 0x20
    22ee:	8f 8f       	std	Y+31, r24	; 0x1f
    22f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22f2:	98 a1       	ldd	r25, Y+32	; 0x20
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <latchbyte+0x37e>
    22f8:	98 a3       	std	Y+32, r25	; 0x20
    22fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	89 a1       	ldd	r24, Y+33	; 0x21
    22fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9a a3       	std	Y+34, r25	; 0x22
    2304:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	69 f7       	brne	.-38     	; 0x22e8 <latchbyte+0x372>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <latchbyte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	6b a1       	ldd	r22, Y+35	; 0x23
    2312:	7c a1       	ldd	r23, Y+36	; 0x24
    2314:	8d a1       	ldd	r24, Y+37	; 0x25
    2316:	9e a1       	ldd	r25, Y+38	; 0x26
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9a a3       	std	Y+34, r25	; 0x22
    2322:	89 a3       	std	Y+33, r24	; 0x21
    2324:	89 a1       	ldd	r24, Y+33	; 0x21
    2326:	9a a1       	ldd	r25, Y+34	; 0x22
    2328:	9e 8f       	std	Y+30, r25	; 0x1e
    232a:	8d 8f       	std	Y+29, r24	; 0x1d
    232c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    232e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <latchbyte+0x3ba>
    2334:	9e 8f       	std	Y+30, r25	; 0x1e
    2336:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D4_PIN, GET_BIT(Byte,0));
    2338:	fe 01       	movw	r30, r28
    233a:	e9 5b       	subi	r30, 0xB9	; 185
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	28 2f       	mov	r18, r24
    2342:	21 70       	andi	r18, 0x01	; 1
    2344:	86 e3       	ldi	r24, 0x36	; 54
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	42 2f       	mov	r20, r18
    234c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D5_PIN, GET_BIT(Byte,1));
    2350:	fe 01       	movw	r30, r28
    2352:	e9 5b       	subi	r30, 0xB9	; 185
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	82 70       	andi	r24, 0x02	; 2
    235e:	90 70       	andi	r25, 0x00	; 0
    2360:	95 95       	asr	r25
    2362:	87 95       	ror	r24
    2364:	28 2f       	mov	r18, r24
    2366:	86 e3       	ldi	r24, 0x36	; 54
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	42 2f       	mov	r20, r18
    236e:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D6_PIN, GET_BIT(Byte,2));
    2372:	fe 01       	movw	r30, r28
    2374:	e9 5b       	subi	r30, 0xB9	; 185
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	84 70       	andi	r24, 0x04	; 4
    2380:	90 70       	andi	r25, 0x00	; 0
    2382:	95 95       	asr	r25
    2384:	87 95       	ror	r24
    2386:	95 95       	asr	r25
    2388:	87 95       	ror	r24
    238a:	28 2f       	mov	r18, r24
    238c:	86 e3       	ldi	r24, 0x36	; 54
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	62 e0       	ldi	r22, 0x02	; 2
    2392:	42 2f       	mov	r20, r18
    2394:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D7_PIN, GET_BIT(Byte,3));
    2398:	fe 01       	movw	r30, r28
    239a:	e9 5b       	subi	r30, 0xB9	; 185
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	88 70       	andi	r24, 0x08	; 8
    23a6:	90 70       	andi	r25, 0x00	; 0
    23a8:	95 95       	asr	r25
    23aa:	87 95       	ror	r24
    23ac:	95 95       	asr	r25
    23ae:	87 95       	ror	r24
    23b0:	95 95       	asr	r25
    23b2:	87 95       	ror	r24
    23b4:	28 2f       	mov	r18, r24
    23b6:	86 e3       	ldi	r24, 0x36	; 54
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	64 e0       	ldi	r22, 0x04	; 4
    23bc:	42 2f       	mov	r20, r18
    23be:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    23c2:	89 e3       	ldi	r24, 0x39	; 57
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	62 e0       	ldi	r22, 0x02	; 2
    23c8:	41 e0       	ldi	r20, 0x01	; 1
    23ca:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e8       	ldi	r26, 0x80	; 128
    23d4:	bf e3       	ldi	r27, 0x3F	; 63
    23d6:	89 8f       	std	Y+25, r24	; 0x19
    23d8:	9a 8f       	std	Y+26, r25	; 0x1a
    23da:	ab 8f       	std	Y+27, r26	; 0x1b
    23dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	69 8d       	ldd	r22, Y+25	; 0x19
    23e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a e7       	ldi	r20, 0x7A	; 122
    23ec:	55 e4       	ldi	r21, 0x45	; 69
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	8d 8b       	std	Y+21, r24	; 0x15
    23f8:	9e 8b       	std	Y+22, r25	; 0x16
    23fa:	af 8b       	std	Y+23, r26	; 0x17
    23fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <latchbyte+0x4aa>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	3f c0       	rjmp	.+126    	; 0x249e <latchbyte+0x528>
	else if (__tmp > 65535)
    2420:	6d 89       	ldd	r22, Y+21	; 0x15
    2422:	7e 89       	ldd	r23, Y+22	; 0x16
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <latchbyte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	69 8d       	ldd	r22, Y+25	; 0x19
    243a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <latchbyte+0x50a>
    2462:	80 e9       	ldi	r24, 0x90	; 144
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	9a 8b       	std	Y+18, r25	; 0x12
    2468:	89 8b       	std	Y+17, r24	; 0x11
    246a:	89 89       	ldd	r24, Y+17	; 0x11
    246c:	9a 89       	ldd	r25, Y+18	; 0x12
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <latchbyte+0x4f8>
    2472:	9a 8b       	std	Y+18, r25	; 0x12
    2474:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8b 89       	ldd	r24, Y+19	; 0x13
    2478:	9c 89       	ldd	r25, Y+20	; 0x14
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <latchbyte+0x4ec>
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <latchbyte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	6d 89       	ldd	r22, Y+21	; 0x15
    248c:	7e 89       	ldd	r23, Y+22	; 0x16
    248e:	8f 89       	ldd	r24, Y+23	; 0x17
    2490:	98 8d       	ldd	r25, Y+24	; 0x18
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9c 8b       	std	Y+20, r25	; 0x14
    249c:	8b 8b       	std	Y+19, r24	; 0x13
    249e:	8b 89       	ldd	r24, Y+19	; 0x13
    24a0:	9c 89       	ldd	r25, Y+20	; 0x14
    24a2:	98 8b       	std	Y+16, r25	; 0x10
    24a4:	8f 87       	std	Y+15, r24	; 0x0f
    24a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a8:	98 89       	ldd	r25, Y+16	; 0x10
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <latchbyte+0x534>
    24ae:	98 8b       	std	Y+16, r25	; 0x10
    24b0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    24b2:	89 e3       	ldi	r24, 0x39	; 57
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 ea       	ldi	r26, 0xA0	; 160
    24c4:	b0 e4       	ldi	r27, 0x40	; 64
    24c6:	8b 87       	std	Y+11, r24	; 0x0b
    24c8:	9c 87       	std	Y+12, r25	; 0x0c
    24ca:	ad 87       	std	Y+13, r26	; 0x0d
    24cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	55 e4       	ldi	r21, 0x45	; 69
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8f 83       	std	Y+7, r24	; 0x07
    24e8:	98 87       	std	Y+8, r25	; 0x08
    24ea:	a9 87       	std	Y+9, r26	; 0x09
    24ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <latchbyte+0x59a>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	3f c0       	rjmp	.+126    	; 0x258e <latchbyte+0x618>
	else if (__tmp > 65535)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <latchbyte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <latchbyte+0x5fa>
    2552:	80 e9       	ldi	r24, 0x90	; 144
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <latchbyte+0x5e8>
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <latchbyte+0x5dc>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <latchbyte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <latchbyte+0x624>
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    25a2:	c9 5b       	subi	r28, 0xB9	; 185
    25a4:	df 4f       	sbci	r29, 0xFF	; 255
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	08 95       	ret

000025ba <H_LCD_void_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void H_LCD_void_sendCommand(uint8 command)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	2f 97       	sbiw	r28, 0x0f	; 15
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    25d0:	89 e3       	ldi	r24, 0x39	; 57
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	63 e0       	ldi	r22, 0x03	; 3
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 e8       	ldi	r26, 0x80	; 128
    25e2:	bf e3       	ldi	r27, 0x3F	; 63
    25e4:	8b 87       	std	Y+11, r24	; 0x0b
    25e6:	9c 87       	std	Y+12, r25	; 0x0c
    25e8:	ad 87       	std	Y+13, r26	; 0x0d
    25ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a e7       	ldi	r20, 0x7A	; 122
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8f 83       	std	Y+7, r24	; 0x07
    2606:	98 87       	std	Y+8, r25	; 0x08
    2608:	a9 87       	std	Y+9, r26	; 0x09
    260a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <H_LCD_void_sendCommand+0x74>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <H_LCD_void_sendCommand+0xf2>
	else if (__tmp > 65535)
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <H_LCD_void_sendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	0f c0       	rjmp	.+30     	; 0x268e <H_LCD_void_sendCommand+0xd4>
    2670:	80 e9       	ldi	r24, 0x90	; 144
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <H_LCD_void_sendCommand+0xc2>
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <H_LCD_void_sendCommand+0xb6>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <H_LCD_void_sendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <H_LCD_void_sendCommand+0xfe>
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1); /* delay for processing Tas = 50ns */
	latchbyte(command);
    26c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c2:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <latchbyte>

}
    26c6:	2f 96       	adiw	r28, 0x0f	; 15
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <H_LCD_void_sendData>:

void H_LCD_void_sendData(uint8 data )
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	2f 97       	sbiw	r28, 0x0f	; 15
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Instruction Mode RS=0 */
    26ee:	89 e3       	ldi	r24, 0x39	; 57
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	63 e0       	ldi	r22, 0x03	; 3
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a0 e8       	ldi	r26, 0x80	; 128
    2700:	bf e3       	ldi	r27, 0x3F	; 63
    2702:	8b 87       	std	Y+11, r24	; 0x0b
    2704:	9c 87       	std	Y+12, r25	; 0x0c
    2706:	ad 87       	std	Y+13, r26	; 0x0d
    2708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270a:	6b 85       	ldd	r22, Y+11	; 0x0b
    270c:	7c 85       	ldd	r23, Y+12	; 0x0c
    270e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2710:	9e 85       	ldd	r25, Y+14	; 0x0e
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	4a e7       	ldi	r20, 0x7A	; 122
    2718:	55 e4       	ldi	r21, 0x45	; 69
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	8f 83       	std	Y+7, r24	; 0x07
    2724:	98 87       	std	Y+8, r25	; 0x08
    2726:	a9 87       	std	Y+9, r26	; 0x09
    2728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e8       	ldi	r20, 0x80	; 128
    2738:	5f e3       	ldi	r21, 0x3F	; 63
    273a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273e:	88 23       	and	r24, r24
    2740:	2c f4       	brge	.+10     	; 0x274c <H_LCD_void_sendData+0x74>
		__ticks = 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	3f c0       	rjmp	.+126    	; 0x27ca <H_LCD_void_sendData+0xf2>
	else if (__tmp > 65535)
    274c:	6f 81       	ldd	r22, Y+7	; 0x07
    274e:	78 85       	ldd	r23, Y+8	; 0x08
    2750:	89 85       	ldd	r24, Y+9	; 0x09
    2752:	9a 85       	ldd	r25, Y+10	; 0x0a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	3f ef       	ldi	r19, 0xFF	; 255
    2758:	4f e7       	ldi	r20, 0x7F	; 127
    275a:	57 e4       	ldi	r21, 0x47	; 71
    275c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2760:	18 16       	cp	r1, r24
    2762:	4c f5       	brge	.+82     	; 0x27b6 <H_LCD_void_sendData+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2764:	6b 85       	ldd	r22, Y+11	; 0x0b
    2766:	7c 85       	ldd	r23, Y+12	; 0x0c
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	9e 85       	ldd	r25, Y+14	; 0x0e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e2       	ldi	r20, 0x20	; 32
    2772:	51 e4       	ldi	r21, 0x41	; 65
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
    278c:	0f c0       	rjmp	.+30     	; 0x27ac <H_LCD_void_sendData+0xd4>
    278e:	80 e9       	ldi	r24, 0x90	; 144
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	9c 81       	ldd	r25, Y+4	; 0x04
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <H_LCD_void_sendData+0xc2>
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	69 f7       	brne	.-38     	; 0x278e <H_LCD_void_sendData+0xb6>
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <H_LCD_void_sendData+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b6:	6f 81       	ldd	r22, Y+7	; 0x07
    27b8:	78 85       	ldd	r23, Y+8	; 0x08
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <H_LCD_void_sendData+0xfe>
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tas = 50ns */
	latchbyte(data);
    27de:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <latchbyte>

}
    27e4:	2f 96       	adiw	r28, 0x0f	; 15
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <H_LCD_void_sendString>:
/*
 * Description :
 * Display the required string on the screen
 */
void H_LCD_void_sendString(const char *Str)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <H_LCD_void_sendString+0x6>
    27fc:	0f 92       	push	r0
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9b 83       	std	Y+3, r25	; 0x03
    2804:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2806:	19 82       	std	Y+1, r1	; 0x01
    2808:	0e c0       	rjmp	.+28     	; 0x2826 <H_LCD_void_sendString+0x30>
	while(Str[i] != '\0')
	{
		H_LCD_void_sendData(Str[i]);
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	28 2f       	mov	r18, r24
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	9b 81       	ldd	r25, Y+3	; 0x03
    2814:	fc 01       	movw	r30, r24
    2816:	e2 0f       	add	r30, r18
    2818:	f3 1f       	adc	r31, r19
    281a:	80 81       	ld	r24, Z
    281c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <H_LCD_void_sendData>
		i++;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	8f 5f       	subi	r24, 0xFF	; 255
    2824:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void H_LCD_void_sendString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	9b 81       	ldd	r25, Y+3	; 0x03
    2830:	fc 01       	movw	r30, r24
    2832:	e2 0f       	add	r30, r18
    2834:	f3 1f       	adc	r31, r19
    2836:	80 81       	ld	r24, Z
    2838:	88 23       	and	r24, r24
    283a:	39 f7       	brne	.-50     	; 0x280a <H_LCD_void_sendString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	 *********************************************************/
}
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <H_LCD_void_gotoXY>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void H_LCD_void_gotoXY(uint8 row,uint8 col)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	00 d0       	rcall	.+0      	; 0x284e <H_LCD_void_gotoXY+0x6>
    284e:	00 d0       	rcall	.+0      	; 0x2850 <H_LCD_void_gotoXY+0x8>
    2850:	0f 92       	push	r0
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	8a 83       	std	Y+2, r24	; 0x02
    2858:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	3d 83       	std	Y+5, r19	; 0x05
    2862:	2c 83       	std	Y+4, r18	; 0x04
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	91 05       	cpc	r25, r1
    286c:	c1 f0       	breq	.+48     	; 0x289e <H_LCD_void_gotoXY+0x56>
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	2c f4       	brge	.+10     	; 0x2882 <H_LCD_void_gotoXY+0x3a>
    2878:	8c 81       	ldd	r24, Y+4	; 0x04
    287a:	9d 81       	ldd	r25, Y+5	; 0x05
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	61 f0       	breq	.+24     	; 0x2898 <H_LCD_void_gotoXY+0x50>
    2880:	19 c0       	rjmp	.+50     	; 0x28b4 <H_LCD_void_gotoXY+0x6c>
    2882:	2c 81       	ldd	r18, Y+4	; 0x04
    2884:	3d 81       	ldd	r19, Y+5	; 0x05
    2886:	22 30       	cpi	r18, 0x02	; 2
    2888:	31 05       	cpc	r19, r1
    288a:	69 f0       	breq	.+26     	; 0x28a6 <H_LCD_void_gotoXY+0x5e>
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
    288e:	9d 81       	ldd	r25, Y+5	; 0x05
    2890:	83 30       	cpi	r24, 0x03	; 3
    2892:	91 05       	cpc	r25, r1
    2894:	61 f0       	breq	.+24     	; 0x28ae <H_LCD_void_gotoXY+0x66>
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <H_LCD_void_gotoXY+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	0b c0       	rjmp	.+22     	; 0x28b4 <H_LCD_void_gotoXY+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	80 5c       	subi	r24, 0xC0	; 192
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	07 c0       	rjmp	.+14     	; 0x28b4 <H_LCD_void_gotoXY+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	80 5f       	subi	r24, 0xF0	; 240
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <H_LCD_void_gotoXY+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	80 5b       	subi	r24, 0xB0	; 176
    28b2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	H_LCD_void_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	80 68       	ori	r24, 0x80	; 128
    28b8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <H_LCD_void_sendCommand>
}
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <LCD_displayStringRowColumn+0x6>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <LCD_displayStringRowColumn+0x8>
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	6a 83       	std	Y+2, r22	; 0x02
    28dc:	5c 83       	std	Y+4, r21	; 0x04
    28de:	4b 83       	std	Y+3, r20	; 0x03
	H_LCD_void_gotoXY(row,col); /* go to to the required LCD position */
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	6a 81       	ldd	r22, Y+2	; 0x02
    28e4:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_void_gotoXY>
	H_LCD_void_sendString(Str); /* display the string */
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <H_LCD_void_sendString>
}
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <H_LCD_void_sendIntNum>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void H_LCD_void_sendIntNum(uint32 data)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	64 97       	sbiw	r28, 0x14	; 20
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	69 8b       	std	Y+17, r22	; 0x11
    2914:	7a 8b       	std	Y+18, r23	; 0x12
    2916:	8b 8b       	std	Y+19, r24	; 0x13
    2918:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	9a 89       	ldd	r25, Y+18	; 0x12
    291e:	9e 01       	movw	r18, r28
    2920:	2f 5f       	subi	r18, 0xFF	; 255
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	b9 01       	movw	r22, r18
    2926:	4a e0       	ldi	r20, 0x0A	; 10
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	0e 94 3c 18 	call	0x3078	; 0x3078 <itoa>
	H_LCD_void_sendString(buff); /* Display the string */
    292e:	ce 01       	movw	r24, r28
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <H_LCD_void_sendString>
}
    2936:	64 96       	adiw	r28, 0x14	; 20
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	0e 94 dd 12 	call	0x25ba	; 0x25ba <H_LCD_void_sendCommand>
}
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <segment_init>:
#include "driver_7segment.h"



void segment_init(channel_number ch_num)
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <segment_init+0x6>
    2962:	0f 92       	push	r0
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	89 83       	std	Y+1, r24	; 0x01
                      	  	  /***********************SET THE DIRECTION AS OUTPUT FOR ALL CHANNELS*********************/
	DIO_voidSetPinDirection(PORTB,PIN0_ID,OUTPUT);
    296a:	86 e3       	ldi	r24, 0x36	; 54
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN1_ID,OUTPUT);
    2976:	86 e3       	ldi	r24, 0x36	; 54
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN2_ID,OUTPUT);
    2982:	86 e3       	ldi	r24, 0x36	; 54
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	62 e0       	ldi	r22, 0x02	; 2
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN4_ID,OUTPUT);
    298e:	86 e3       	ldi	r24, 0x36	; 54
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	64 e0       	ldi	r22, 0x04	; 4
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PORTA,PIN3_ID,OUTPUT);
    299a:	89 e3       	ldi	r24, 0x39	; 57
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN2_ID,OUTPUT);
    29a6:	89 e3       	ldi	r24, 0x39	; 57
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	62 e0       	ldi	r22, 0x02	; 2
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN5_ID,OUTPUT);
    29b2:	86 e3       	ldi	r24, 0x36	; 54
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	65 e0       	ldi	r22, 0x05	; 5
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN6_ID,OUTPUT);
    29be:	86 e3       	ldi	r24, 0x36	; 54
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	66 e0       	ldi	r22, 0x06	; 6
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>


							/********************INITIALIZE ALL CHHANNELS TO DISPLAY ZERO*****************************/
	DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    29ca:	86 e3       	ldi	r24, 0x36	; 54
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    29d6:	86 e3       	ldi	r24, 0x36	; 54
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    29e2:	86 e3       	ldi	r24, 0x36	; 54
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	62 e0       	ldi	r22, 0x02	; 2
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    29ee:	86 e3       	ldi	r24, 0x36	; 54
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	64 e0       	ldi	r22, 0x04	; 4
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>


	switch(ch_num)
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	3b 83       	std	Y+3, r19	; 0x03
    2a02:	2a 83       	std	Y+2, r18	; 0x02
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	9b 81       	ldd	r25, Y+3	; 0x03
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	79 f1       	breq	.+94     	; 0x2a6c <segment_init+0x110>
    2a0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a10:	3b 81       	ldd	r19, Y+3	; 0x03
    2a12:	22 30       	cpi	r18, 0x02	; 2
    2a14:	31 05       	cpc	r19, r1
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <segment_init+0xc6>
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	69 f0       	breq	.+26     	; 0x2a3a <segment_init+0xde>
    2a20:	6f c0       	rjmp	.+222    	; 0x2b00 <segment_init+0x1a4>
    2a22:	2a 81       	ldd	r18, Y+2	; 0x02
    2a24:	3b 81       	ldd	r19, Y+3	; 0x03
    2a26:	22 30       	cpi	r18, 0x02	; 2
    2a28:	31 05       	cpc	r19, r1
    2a2a:	c9 f1       	breq	.+114    	; 0x2a9e <segment_init+0x142>
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a30:	83 30       	cpi	r24, 0x03	; 3
    2a32:	91 05       	cpc	r25, r1
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <segment_init+0xdc>
    2a36:	4c c0       	rjmp	.+152    	; 0x2ad0 <segment_init+0x174>
    2a38:	63 c0       	rjmp	.+198    	; 0x2b00 <segment_init+0x1a4>
	{
												/***************SELECT THE FIRST CHANNEL AND DISABLE THE OTHERS*****************/

	case _1_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    2a3a:	89 e3       	ldi	r24, 0x39	; 57
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	63 e0       	ldi	r22, 0x03	; 3
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_HIGH);
    2a46:	89 e3       	ldi	r24, 0x39	; 57
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	62 e0       	ldi	r22, 0x02	; 2
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_HIGH);
    2a52:	86 e3       	ldi	r24, 0x36	; 54
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	65 e0       	ldi	r22, 0x05	; 5
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    2a5e:	86 e3       	ldi	r24, 0x36	; 54
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	66 e0       	ldi	r22, 0x06	; 6
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2a6a:	4a c0       	rjmp	.+148    	; 0x2b00 <segment_init+0x1a4>
		break;

												/***************SELECT THE FIRST & SECOND CHANNELS AND DISABLE THE OTHERS*****************/

	case _2_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    2a6c:	89 e3       	ldi	r24, 0x39	; 57
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	63 e0       	ldi	r22, 0x03	; 3
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    2a78:	89 e3       	ldi	r24, 0x39	; 57
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_HIGH);
    2a84:	86 e3       	ldi	r24, 0x36	; 54
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	65 e0       	ldi	r22, 0x05	; 5
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    2a90:	86 e3       	ldi	r24, 0x36	; 54
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	66 e0       	ldi	r22, 0x06	; 6
    2a96:	41 e0       	ldi	r20, 0x01	; 1
    2a98:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2a9c:	31 c0       	rjmp	.+98     	; 0x2b00 <segment_init+0x1a4>
		break;

												/***************SELECT THE FIRST,SECOND & THIRD CHANNEL AND DISABLE THE OTHER*****************/

	case _3_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    2a9e:	89 e3       	ldi	r24, 0x39	; 57
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	63 e0       	ldi	r22, 0x03	; 3
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    2aaa:	89 e3       	ldi	r24, 0x39	; 57
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	62 e0       	ldi	r22, 0x02	; 2
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_LOW);
    2ab6:	86 e3       	ldi	r24, 0x36	; 54
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	65 e0       	ldi	r22, 0x05	; 5
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    2ac2:	86 e3       	ldi	r24, 0x36	; 54
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	66 e0       	ldi	r22, 0x06	; 6
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2ace:	18 c0       	rjmp	.+48     	; 0x2b00 <segment_init+0x1a4>
		break;

												/***************SELECT ALL CHANNELS*****************/

	case _4_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    2ad0:	89 e3       	ldi	r24, 0x39	; 57
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	63 e0       	ldi	r22, 0x03	; 3
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    2adc:	89 e3       	ldi	r24, 0x39	; 57
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	62 e0       	ldi	r22, 0x02	; 2
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_LOW);
    2ae8:	86 e3       	ldi	r24, 0x36	; 54
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	65 e0       	ldi	r22, 0x05	; 5
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_LOW);
    2af4:	86 e3       	ldi	r24, 0x36	; 54
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	66 e0       	ldi	r22, 0x06	; 6
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		break;

	}


};
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <segment_num>:


void segment_num(number num)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <segment_num+0x6>
    2b12:	0f 92       	push	r0
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	3b 83       	std	Y+3, r19	; 0x03
    2b22:	2a 83       	std	Y+2, r18	; 0x02
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	84 30       	cpi	r24, 0x04	; 4
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <segment_num+0x24>
    2b2e:	ab c0       	rjmp	.+342    	; 0x2c86 <segment_num+0x17a>
    2b30:	2a 81       	ldd	r18, Y+2	; 0x02
    2b32:	3b 81       	ldd	r19, Y+3	; 0x03
    2b34:	25 30       	cpi	r18, 0x05	; 5
    2b36:	31 05       	cpc	r19, r1
    2b38:	ec f4       	brge	.+58     	; 0x2b74 <segment_num+0x68>
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	91 05       	cpc	r25, r1
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <segment_num+0x3a>
    2b44:	55 c0       	rjmp	.+170    	; 0x2bf0 <segment_num+0xe4>
    2b46:	2a 81       	ldd	r18, Y+2	; 0x02
    2b48:	3b 81       	ldd	r19, Y+3	; 0x03
    2b4a:	22 30       	cpi	r18, 0x02	; 2
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <segment_num+0x4e>
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	99 f1       	breq	.+102    	; 0x2bbe <segment_num+0xb2>
    2b58:	2b c1       	rjmp	.+598    	; 0x2db0 <segment_num+0x2a4>
    2b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b5c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	31 05       	cpc	r19, r1
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <segment_num+0x5a>
    2b64:	5e c0       	rjmp	.+188    	; 0x2c22 <segment_num+0x116>
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	83 30       	cpi	r24, 0x03	; 3
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <segment_num+0x66>
    2b70:	71 c0       	rjmp	.+226    	; 0x2c54 <segment_num+0x148>
    2b72:	1e c1       	rjmp	.+572    	; 0x2db0 <segment_num+0x2a4>
    2b74:	2a 81       	ldd	r18, Y+2	; 0x02
    2b76:	3b 81       	ldd	r19, Y+3	; 0x03
    2b78:	27 30       	cpi	r18, 0x07	; 7
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <segment_num+0x74>
    2b7e:	ce c0       	rjmp	.+412    	; 0x2d1c <segment_num+0x210>
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	9b 81       	ldd	r25, Y+3	; 0x03
    2b84:	88 30       	cpi	r24, 0x08	; 8
    2b86:	91 05       	cpc	r25, r1
    2b88:	6c f4       	brge	.+26     	; 0x2ba4 <segment_num+0x98>
    2b8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b8c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b8e:	25 30       	cpi	r18, 0x05	; 5
    2b90:	31 05       	cpc	r19, r1
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <segment_num+0x8a>
    2b94:	91 c0       	rjmp	.+290    	; 0x2cb8 <segment_num+0x1ac>
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	86 30       	cpi	r24, 0x06	; 6
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <segment_num+0x96>
    2ba0:	a4 c0       	rjmp	.+328    	; 0x2cea <segment_num+0x1de>
    2ba2:	06 c1       	rjmp	.+524    	; 0x2db0 <segment_num+0x2a4>
    2ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba8:	28 30       	cpi	r18, 0x08	; 8
    2baa:	31 05       	cpc	r19, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <segment_num+0xa4>
    2bae:	cf c0       	rjmp	.+414    	; 0x2d4e <segment_num+0x242>
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb4:	89 30       	cpi	r24, 0x09	; 9
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <segment_num+0xb0>
    2bba:	e2 c0       	rjmp	.+452    	; 0x2d80 <segment_num+0x274>
    2bbc:	f9 c0       	rjmp	.+498    	; 0x2db0 <segment_num+0x2a4>
	{
													/********************DISPLAY ZERO*********************/
	case ZERO:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    2bbe:	86 e3       	ldi	r24, 0x36	; 54
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    2bca:	86 e3       	ldi	r24, 0x36	; 54
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	61 e0       	ldi	r22, 0x01	; 1
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    2bd6:	86 e3       	ldi	r24, 0x36	; 54
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	62 e0       	ldi	r22, 0x02	; 2
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2be2:	86 e3       	ldi	r24, 0x36	; 54
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	64 e0       	ldi	r22, 0x04	; 4
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2bee:	e0 c0       	rjmp	.+448    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY ONE*********************/

	case ONE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    2bf0:	86 e3       	ldi	r24, 0x36	; 54
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    2bfc:	86 e3       	ldi	r24, 0x36	; 54
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    2c08:	86 e3       	ldi	r24, 0x36	; 54
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2c14:	86 e3       	ldi	r24, 0x36	; 54
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	64 e0       	ldi	r22, 0x04	; 4
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2c20:	c7 c0       	rjmp	.+398    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY TWO*********************/

	case TWO:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    2c22:	86 e3       	ldi	r24, 0x36	; 54
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    2c2e:	86 e3       	ldi	r24, 0x36	; 54
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    2c3a:	86 e3       	ldi	r24, 0x36	; 54
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	62 e0       	ldi	r22, 0x02	; 2
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2c46:	86 e3       	ldi	r24, 0x36	; 54
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	64 e0       	ldi	r22, 0x04	; 4
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2c52:	ae c0       	rjmp	.+348    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY THREE*********************/

	case THREE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    2c54:	86 e3       	ldi	r24, 0x36	; 54
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	41 e0       	ldi	r20, 0x01	; 1
    2c5c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    2c60:	86 e3       	ldi	r24, 0x36	; 54
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	61 e0       	ldi	r22, 0x01	; 1
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    2c6c:	86 e3       	ldi	r24, 0x36	; 54
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	62 e0       	ldi	r22, 0x02	; 2
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2c78:	86 e3       	ldi	r24, 0x36	; 54
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2c84:	95 c0       	rjmp	.+298    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY FOUR*********************/

	case FOUR:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    2c86:	86 e3       	ldi	r24, 0x36	; 54
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    2c92:	86 e3       	ldi	r24, 0x36	; 54
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	61 e0       	ldi	r22, 0x01	; 1
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    2c9e:	86 e3       	ldi	r24, 0x36	; 54
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	62 e0       	ldi	r22, 0x02	; 2
    2ca4:	41 e0       	ldi	r20, 0x01	; 1
    2ca6:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2caa:	86 e3       	ldi	r24, 0x36	; 54
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	64 e0       	ldi	r22, 0x04	; 4
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2cb6:	7c c0       	rjmp	.+248    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY FIVE*********************/

	case FIVE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    2cb8:	86 e3       	ldi	r24, 0x36	; 54
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    2cc4:	86 e3       	ldi	r24, 0x36	; 54
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	61 e0       	ldi	r22, 0x01	; 1
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    2cd0:	86 e3       	ldi	r24, 0x36	; 54
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	62 e0       	ldi	r22, 0x02	; 2
    2cd6:	41 e0       	ldi	r20, 0x01	; 1
    2cd8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2cdc:	86 e3       	ldi	r24, 0x36	; 54
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	64 e0       	ldi	r22, 0x04	; 4
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2ce8:	63 c0       	rjmp	.+198    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY SIX*********************/

	case SIX:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    2cea:	86 e3       	ldi	r24, 0x36	; 54
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    2cf6:	86 e3       	ldi	r24, 0x36	; 54
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	61 e0       	ldi	r22, 0x01	; 1
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    2d02:	86 e3       	ldi	r24, 0x36	; 54
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	62 e0       	ldi	r22, 0x02	; 2
    2d08:	41 e0       	ldi	r20, 0x01	; 1
    2d0a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2d0e:	86 e3       	ldi	r24, 0x36	; 54
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	64 e0       	ldi	r22, 0x04	; 4
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2d1a:	4a c0       	rjmp	.+148    	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY SEVEN*********************/

	case SEVEN:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    2d1c:	86 e3       	ldi	r24, 0x36	; 54
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    2d28:	86 e3       	ldi	r24, 0x36	; 54
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	61 e0       	ldi	r22, 0x01	; 1
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    2d34:	86 e3       	ldi	r24, 0x36	; 54
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	62 e0       	ldi	r22, 0x02	; 2
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    2d40:	86 e3       	ldi	r24, 0x36	; 54
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	64 e0       	ldi	r22, 0x04	; 4
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2d4c:	31 c0       	rjmp	.+98     	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY EIGHT*********************/

	case EIGHT:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    2d4e:	86 e3       	ldi	r24, 0x36	; 54
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    2d5a:	86 e3       	ldi	r24, 0x36	; 54
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    2d66:	86 e3       	ldi	r24, 0x36	; 54
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	62 e0       	ldi	r22, 0x02	; 2
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_HIGH);
    2d72:	86 e3       	ldi	r24, 0x36	; 54
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	64 e0       	ldi	r22, 0x04	; 4
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2d7e:	18 c0       	rjmp	.+48     	; 0x2db0 <segment_num+0x2a4>
		break;
		/********************DISPLAY NINE*********************/

	case NINE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    2d80:	86 e3       	ldi	r24, 0x36	; 54
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    2d8c:	86 e3       	ldi	r24, 0x36	; 54
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    2d98:	86 e3       	ldi	r24, 0x36	; 54
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	62 e0       	ldi	r22, 0x02	; 2
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_HIGH);
    2da4:	86 e3       	ldi	r24, 0x36	; 54
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	64 e0       	ldi	r22, 0x04	; 4
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
		break;

	};


}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <led_on>:



							/***********************EXTI DRIVER TESTING*******************************/
void led_on()
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	6c 97       	sbiw	r28, 0x1c	; 28
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
	//DIO_voidSetPinDirection(PORTA,PIN5_ID,OUTPUT);
	DIO_voidSetPinValue(PORTA,PIN6_ID,LOGIC_HIGH);
    2dd0:	89 e3       	ldi	r24, 0x39	; 57
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	66 e0       	ldi	r22, 0x06	; 6
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	aa e7       	ldi	r26, 0x7A	; 122
    2de2:	b4 e4       	ldi	r27, 0x44	; 68
    2de4:	89 8f       	std	Y+25, r24	; 0x19
    2de6:	9a 8f       	std	Y+26, r25	; 0x1a
    2de8:	ab 8f       	std	Y+27, r26	; 0x1b
    2dea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	69 8d       	ldd	r22, Y+25	; 0x19
    2dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4a e7       	ldi	r20, 0x7A	; 122
    2dfa:	55 e4       	ldi	r21, 0x45	; 69
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	8d 8b       	std	Y+21, r24	; 0x15
    2e06:	9e 8b       	std	Y+22, r25	; 0x16
    2e08:	af 8b       	std	Y+23, r26	; 0x17
    2e0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e10:	8f 89       	ldd	r24, Y+23	; 0x17
    2e12:	98 8d       	ldd	r25, Y+24	; 0x18
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <led_on+0x72>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9c 8b       	std	Y+20, r25	; 0x14
    2e2a:	8b 8b       	std	Y+19, r24	; 0x13
    2e2c:	3f c0       	rjmp	.+126    	; 0x2eac <led_on+0xf0>
	else if (__tmp > 65535)
    2e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e30:	7e 89       	ldd	r23, Y+22	; 0x16
    2e32:	8f 89       	ldd	r24, Y+23	; 0x17
    2e34:	98 8d       	ldd	r25, Y+24	; 0x18
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	4c f5       	brge	.+82     	; 0x2e98 <led_on+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e46:	69 8d       	ldd	r22, Y+25	; 0x19
    2e48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9c 8b       	std	Y+20, r25	; 0x14
    2e6c:	8b 8b       	std	Y+19, r24	; 0x13
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <led_on+0xd2>
    2e70:	80 e9       	ldi	r24, 0x90	; 144
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	9a 8b       	std	Y+18, r25	; 0x12
    2e76:	89 8b       	std	Y+17, r24	; 0x11
    2e78:	89 89       	ldd	r24, Y+17	; 0x11
    2e7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <led_on+0xc0>
    2e80:	9a 8b       	std	Y+18, r25	; 0x12
    2e82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8b 89       	ldd	r24, Y+19	; 0x13
    2e86:	9c 89       	ldd	r25, Y+20	; 0x14
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9c 8b       	std	Y+20, r25	; 0x14
    2e8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e90:	9c 89       	ldd	r25, Y+20	; 0x14
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <led_on+0xb4>
    2e96:	14 c0       	rjmp	.+40     	; 0x2ec0 <led_on+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9c 8b       	std	Y+20, r25	; 0x14
    2eaa:	8b 8b       	std	Y+19, r24	; 0x13
    2eac:	8b 89       	ldd	r24, Y+19	; 0x13
    2eae:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb0:	98 8b       	std	Y+16, r25	; 0x10
    2eb2:	8f 87       	std	Y+15, r24	; 0x0f
    2eb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb6:	98 89       	ldd	r25, Y+16	; 0x10
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <led_on+0xfc>
    2ebc:	98 8b       	std	Y+16, r25	; 0x10
    2ebe:	8f 87       	std	Y+15, r24	; 0x0f
	//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_HIGH);
	_delay_ms(1000);
	DIO_voidSetPinValue(PORTA,PIN6_ID,LOGIC_LOW);
    2ec0:	89 e3       	ldi	r24, 0x39	; 57
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	66 e0       	ldi	r22, 0x06	; 6
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_voidSetPinValue>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	aa e7       	ldi	r26, 0x7A	; 122
    2ed2:	b4 e4       	ldi	r27, 0x44	; 68
    2ed4:	8b 87       	std	Y+11, r24	; 0x0b
    2ed6:	9c 87       	std	Y+12, r25	; 0x0c
    2ed8:	ad 87       	std	Y+13, r26	; 0x0d
    2eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	4a e7       	ldi	r20, 0x7A	; 122
    2eea:	55 e4       	ldi	r21, 0x45	; 69
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	8f 83       	std	Y+7, r24	; 0x07
    2ef6:	98 87       	std	Y+8, r25	; 0x08
    2ef8:	a9 87       	std	Y+9, r26	; 0x09
    2efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efc:	6f 81       	ldd	r22, Y+7	; 0x07
    2efe:	78 85       	ldd	r23, Y+8	; 0x08
    2f00:	89 85       	ldd	r24, Y+9	; 0x09
    2f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e8       	ldi	r20, 0x80	; 128
    2f0a:	5f e3       	ldi	r21, 0x3F	; 63
    2f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f10:	88 23       	and	r24, r24
    2f12:	2c f4       	brge	.+10     	; 0x2f1e <led_on+0x162>
		__ticks = 1;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	3f c0       	rjmp	.+126    	; 0x2f9c <led_on+0x1e0>
	else if (__tmp > 65535)
    2f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f20:	78 85       	ldd	r23, Y+8	; 0x08
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	3f ef       	ldi	r19, 0xFF	; 255
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	57 e4       	ldi	r21, 0x47	; 71
    2f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f32:	18 16       	cp	r1, r24
    2f34:	4c f5       	brge	.+82     	; 0x2f88 <led_on+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e2       	ldi	r20, 0x20	; 32
    2f44:	51 e4       	ldi	r21, 0x41	; 65
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <led_on+0x1c2>
    2f60:	80 e9       	ldi	r24, 0x90	; 144
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	8b 83       	std	Y+3, r24	; 0x03
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <led_on+0x1b0>
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f80:	9e 81       	ldd	r25, Y+6	; 0x06
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	69 f7       	brne	.-38     	; 0x2f60 <led_on+0x1a4>
    2f86:	14 c0       	rjmp	.+40     	; 0x2fb0 <led_on+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f88:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8a:	78 85       	ldd	r23, Y+8	; 0x08
    2f8c:	89 85       	ldd	r24, Y+9	; 0x09
    2f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <led_on+0x1ec>
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_LOW);

}
    2fb0:	6c 96       	adiw	r28, 0x1c	; 28
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <main>:
						/***********************EXTI DRIVER TESTING*******************************/



int main ()
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	27 97       	sbiw	r28, 0x07	; 7
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
	//		segment_init(_4_channels);

	/*******************************TESTING_7_SEGMENT_DRIVER******************************************/

	//segment_init(channel_0);
		H_LCD_void_Init();
    2fd6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <H_LCD_void_Init>
		//H_LCD_void_sendString("yasso mogrem   ");

		ADC_ConfigType ADC_Object;

		ADC_Object.ref_volt=Internal_AREF;
    2fda:	83 e0       	ldi	r24, 0x03	; 3
    2fdc:	8b 83       	std	Y+3, r24	; 0x03
		ADC_Object.prescaler=Div_Factor128;
    2fde:	87 e0       	ldi	r24, 0x07	; 7
    2fe0:	8c 83       	std	Y+4, r24	; 0x04
		ADC_Object.AutoTrigger=0;
    2fe2:	1d 82       	std	Y+5, r1	; 0x05
	//	ADC_Object.EnableOrDisable=DISABLE;

		ADC_init(&ADC_Object);
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	03 96       	adiw	r24, 0x03	; 3
    2fe8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_init>
		uint16 value=0;
    2fec:	1a 82       	std	Y+2, r1	; 0x02
    2fee:	19 82       	std	Y+1, r1	; 0x01
	//	DIO_voidSetPinDirection(PORTB,PIN7_ID,OUTPUT);
	//	DIO_voidSetPinDirection(PORTA,PIN4_ID,OUTPUT);
	//	DIO_voidSetPinDirection(PORTA,PIN6_ID,OUTPUT);

		DIO_voidSetPinDirection(PORTA,PIN6_ID,OUTPUT);
    2ff0:	89 e3       	ldi	r24, 0x39	; 57
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	66 e0       	ldi	r22, 0x06	; 6
    2ff6:	41 e0       	ldi	r20, 0x01	; 1
    2ff8:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_voidSetPinDirection>

	while(1)
	{


		ADC_getDigitalValueAsynchCallBack(channel_1,led_on);
    2ffc:	2e ed       	ldi	r18, 0xDE	; 222
    2ffe:	36 e1       	ldi	r19, 0x16	; 22
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	b9 01       	movw	r22, r18
    3004:	0e 94 09 07 	call	0xe12	; 0xe12 <ADC_getDigitalValueAsynchCallBack>
    3008:	f9 cf       	rjmp	.-14     	; 0x2ffc <main+0x3a>

0000300a <__prologue_saves__>:
    300a:	2f 92       	push	r2
    300c:	3f 92       	push	r3
    300e:	4f 92       	push	r4
    3010:	5f 92       	push	r5
    3012:	6f 92       	push	r6
    3014:	7f 92       	push	r7
    3016:	8f 92       	push	r8
    3018:	9f 92       	push	r9
    301a:	af 92       	push	r10
    301c:	bf 92       	push	r11
    301e:	cf 92       	push	r12
    3020:	df 92       	push	r13
    3022:	ef 92       	push	r14
    3024:	ff 92       	push	r15
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	ca 1b       	sub	r28, r26
    3034:	db 0b       	sbc	r29, r27
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	09 94       	ijmp

00003042 <__epilogue_restores__>:
    3042:	2a 88       	ldd	r2, Y+18	; 0x12
    3044:	39 88       	ldd	r3, Y+17	; 0x11
    3046:	48 88       	ldd	r4, Y+16	; 0x10
    3048:	5f 84       	ldd	r5, Y+15	; 0x0f
    304a:	6e 84       	ldd	r6, Y+14	; 0x0e
    304c:	7d 84       	ldd	r7, Y+13	; 0x0d
    304e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3050:	9b 84       	ldd	r9, Y+11	; 0x0b
    3052:	aa 84       	ldd	r10, Y+10	; 0x0a
    3054:	b9 84       	ldd	r11, Y+9	; 0x09
    3056:	c8 84       	ldd	r12, Y+8	; 0x08
    3058:	df 80       	ldd	r13, Y+7	; 0x07
    305a:	ee 80       	ldd	r14, Y+6	; 0x06
    305c:	fd 80       	ldd	r15, Y+5	; 0x05
    305e:	0c 81       	ldd	r16, Y+4	; 0x04
    3060:	1b 81       	ldd	r17, Y+3	; 0x03
    3062:	aa 81       	ldd	r26, Y+2	; 0x02
    3064:	b9 81       	ldd	r27, Y+1	; 0x01
    3066:	ce 0f       	add	r28, r30
    3068:	d1 1d       	adc	r29, r1
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	ed 01       	movw	r28, r26
    3076:	08 95       	ret

00003078 <itoa>:
    3078:	fb 01       	movw	r30, r22
    307a:	9f 01       	movw	r18, r30
    307c:	e8 94       	clt
    307e:	42 30       	cpi	r20, 0x02	; 2
    3080:	c4 f0       	brlt	.+48     	; 0x30b2 <itoa+0x3a>
    3082:	45 32       	cpi	r20, 0x25	; 37
    3084:	b4 f4       	brge	.+44     	; 0x30b2 <itoa+0x3a>
    3086:	4a 30       	cpi	r20, 0x0A	; 10
    3088:	29 f4       	brne	.+10     	; 0x3094 <itoa+0x1c>
    308a:	97 fb       	bst	r25, 7
    308c:	1e f4       	brtc	.+6      	; 0x3094 <itoa+0x1c>
    308e:	90 95       	com	r25
    3090:	81 95       	neg	r24
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	64 2f       	mov	r22, r20
    3096:	77 27       	eor	r23, r23
    3098:	0e 94 6d 18 	call	0x30da	; 0x30da <__udivmodhi4>
    309c:	80 5d       	subi	r24, 0xD0	; 208
    309e:	8a 33       	cpi	r24, 0x3A	; 58
    30a0:	0c f0       	brlt	.+2      	; 0x30a4 <itoa+0x2c>
    30a2:	89 5d       	subi	r24, 0xD9	; 217
    30a4:	81 93       	st	Z+, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	a1 f7       	brne	.-24     	; 0x3094 <itoa+0x1c>
    30ac:	16 f4       	brtc	.+4      	; 0x30b2 <itoa+0x3a>
    30ae:	5d e2       	ldi	r21, 0x2D	; 45
    30b0:	51 93       	st	Z+, r21
    30b2:	10 82       	st	Z, r1
    30b4:	c9 01       	movw	r24, r18
    30b6:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <strrev>

000030ba <strrev>:
    30ba:	dc 01       	movw	r26, r24
    30bc:	fc 01       	movw	r30, r24
    30be:	67 2f       	mov	r22, r23
    30c0:	71 91       	ld	r23, Z+
    30c2:	77 23       	and	r23, r23
    30c4:	e1 f7       	brne	.-8      	; 0x30be <strrev+0x4>
    30c6:	32 97       	sbiw	r30, 0x02	; 2
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <strrev+0x18>
    30ca:	7c 91       	ld	r23, X
    30cc:	6d 93       	st	X+, r22
    30ce:	70 83       	st	Z, r23
    30d0:	62 91       	ld	r22, -Z
    30d2:	ae 17       	cp	r26, r30
    30d4:	bf 07       	cpc	r27, r31
    30d6:	c8 f3       	brcs	.-14     	; 0x30ca <strrev+0x10>
    30d8:	08 95       	ret

000030da <__udivmodhi4>:
    30da:	aa 1b       	sub	r26, r26
    30dc:	bb 1b       	sub	r27, r27
    30de:	51 e1       	ldi	r21, 0x11	; 17
    30e0:	07 c0       	rjmp	.+14     	; 0x30f0 <__udivmodhi4_ep>

000030e2 <__udivmodhi4_loop>:
    30e2:	aa 1f       	adc	r26, r26
    30e4:	bb 1f       	adc	r27, r27
    30e6:	a6 17       	cp	r26, r22
    30e8:	b7 07       	cpc	r27, r23
    30ea:	10 f0       	brcs	.+4      	; 0x30f0 <__udivmodhi4_ep>
    30ec:	a6 1b       	sub	r26, r22
    30ee:	b7 0b       	sbc	r27, r23

000030f0 <__udivmodhi4_ep>:
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	5a 95       	dec	r21
    30f6:	a9 f7       	brne	.-22     	; 0x30e2 <__udivmodhi4_loop>
    30f8:	80 95       	com	r24
    30fa:	90 95       	com	r25
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	08 95       	ret

00003102 <_exit>:
    3102:	f8 94       	cli

00003104 <__stop_program>:
    3104:	ff cf       	rjmp	.-2      	; 0x3104 <__stop_program>
