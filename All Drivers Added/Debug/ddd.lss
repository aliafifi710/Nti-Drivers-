
ddd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000445e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000445e  000044f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080018e  0080018e  00004620  2**0
                  ALLOC
  3 .stab         000047d0  00000000  00000000  00004620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028ba  00000000  00000000  00008df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b84a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ba3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000de47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000103a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001085a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000111c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_1>
       8:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_2>
       c:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 21 	call	0x42c0	; 0x42c0 <main>
      8a:	0c 94 2d 22 	jmp	0x445a	; 0x445a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:

void (*ADC_ptr)(void);


void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	//	ADC_REGS->ADCSRA_r.Bitfield.B7=0;  //DISABLE ADC

	ADC_REGS->ADMUX_r.Reg =((ADC_REGS->ADMUX_r.Reg) & 0x3F) | ((Config_Ptr->ref_volt) << 6); //SET REFERENCE VOLTAGE
     e3c:	a4 e2       	ldi	r26, 0x24	; 36
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e4 e2       	ldi	r30, 0x24	; 36
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	2f 73       	andi	r18, 0x3F	; 63
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	00 24       	eor	r0, r0
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	07 94       	ror	r0
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	07 94       	ror	r0
     e62:	98 2f       	mov	r25, r24
     e64:	80 2d       	mov	r24, r0
     e66:	82 2b       	or	r24, r18
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	8c 93       	st	X, r24

	ADC_REGS->ADCSRA_r.Reg = (ADC_REGS->ADCSRA_r.Reg & 0xF8) | ((Config_Ptr -> prescaler)); //set prescaler
     e6c:	a4 e2       	ldi	r26, 0x24	; 36
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e4 e2       	ldi	r30, 0x24	; 36
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	98 2f       	mov	r25, r24
     e78:	98 7f       	andi	r25, 0xF8	; 248
     e7a:	e9 81       	ldd	r30, Y+1	; 0x01
     e7c:	fa 81       	ldd	r31, Y+2	; 0x02
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	89 2b       	or	r24, r25
     e82:	12 96       	adiw	r26, 0x02	; 2
     e84:	8c 93       	st	X, r24


	ADC_REGS->ADCSRA_r.Reg |= 1<<7; //ENABLE ADC
     e86:	a4 e2       	ldi	r26, 0x24	; 36
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e4 e2       	ldi	r30, 0x24	; 36
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	8c 93       	st	X, r24
     e96:	12 97       	sbiw	r26, 0x02	; 2


	if(Config_Ptr->LeftAdjust==LEFT_ADJUST)
     e98:	e9 81       	ldd	r30, Y+1	; 0x01
     e9a:	fa 81       	ldd	r31, Y+2	; 0x02
     e9c:	84 81       	ldd	r24, Z+4	; 0x04
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	a1 f4       	brne	.+40     	; 0xeca <ADC_init+0x9c>
	{
		ADC_REGS->ADMUX_r.Bitfield.B5=Config_Ptr->LeftAdjust;  //set left or right adjust
     ea2:	a4 e2       	ldi	r26, 0x24	; 36
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	84 81       	ldd	r24, Z+4	; 0x04
     eac:	81 70       	andi	r24, 0x01	; 1
     eae:	81 70       	andi	r24, 0x01	; 1
     eb0:	98 2f       	mov	r25, r24
     eb2:	92 95       	swap	r25
     eb4:	99 0f       	add	r25, r25
     eb6:	90 7e       	andi	r25, 0xE0	; 224
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	8c 91       	ld	r24, X
     ebc:	13 97       	sbiw	r26, 0x03	; 3
     ebe:	8f 7d       	andi	r24, 0xDF	; 223
     ec0:	89 2b       	or	r24, r25
     ec2:	13 96       	adiw	r26, 0x03	; 3
     ec4:	8c 93       	st	X, r24
     ec6:	13 97       	sbiw	r26, 0x03	; 3
     ec8:	18 c0       	rjmp	.+48     	; 0xefa <ADC_init+0xcc>
	}
	else if(Config_Ptr->LeftAdjust==RIGHT_ADJUST)
     eca:	e9 81       	ldd	r30, Y+1	; 0x01
     ecc:	fa 81       	ldd	r31, Y+2	; 0x02
     ece:	84 81       	ldd	r24, Z+4	; 0x04
     ed0:	88 23       	and	r24, r24
     ed2:	99 f4       	brne	.+38     	; 0xefa <ADC_init+0xcc>
	{
		ADC_REGS->ADMUX_r.Bitfield.B5=Config_Ptr->LeftAdjust;  //set left or right adjust
     ed4:	a4 e2       	ldi	r26, 0x24	; 36
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e9 81       	ldd	r30, Y+1	; 0x01
     eda:	fa 81       	ldd	r31, Y+2	; 0x02
     edc:	84 81       	ldd	r24, Z+4	; 0x04
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	98 2f       	mov	r25, r24
     ee4:	92 95       	swap	r25
     ee6:	99 0f       	add	r25, r25
     ee8:	90 7e       	andi	r25, 0xE0	; 224
     eea:	13 96       	adiw	r26, 0x03	; 3
     eec:	8c 91       	ld	r24, X
     eee:	13 97       	sbiw	r26, 0x03	; 3
     ef0:	8f 7d       	andi	r24, 0xDF	; 223
     ef2:	89 2b       	or	r24, r25
     ef4:	13 96       	adiw	r26, 0x03	; 3
     ef6:	8c 93       	st	X, r24
     ef8:	13 97       	sbiw	r26, 0x03	; 3
	}


	if(Config_Ptr->AutoTrigger==ON)
     efa:	e9 81       	ldd	r30, Y+1	; 0x01
     efc:	fa 81       	ldd	r31, Y+2	; 0x02
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	99 f4       	brne	.+38     	; 0xf2a <ADC_init+0xfc>
	{
		ADC_REGS->ADCSRA_r.Bitfield.B5=Config_Ptr->AutoTrigger;
     f04:	a4 e2       	ldi	r26, 0x24	; 36
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	fa 81       	ldd	r31, Y+2	; 0x02
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	98 2f       	mov	r25, r24
     f14:	92 95       	swap	r25
     f16:	99 0f       	add	r25, r25
     f18:	90 7e       	andi	r25, 0xE0	; 224
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	8c 91       	ld	r24, X
     f1e:	12 97       	sbiw	r26, 0x02	; 2
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	89 2b       	or	r24, r25
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	8c 93       	st	X, r24
     f28:	12 97       	sbiw	r26, 0x02	; 2

	}


}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <ADC_getDigitalValueSynchNonBlocking>:

uint16 ADC_getDigitalValueSynchNonBlocking(channel_num channel_num)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	//	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */

	ADC_REGS->ADMUX_r.Reg = (ADC_REGS->ADMUX_r.Reg & 0xE0); /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     f40:	a4 e2       	ldi	r26, 0x24	; 36
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e2       	ldi	r30, 0x24	; 36
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	83 81       	ldd	r24, Z+3	; 0x03
     f4a:	80 7e       	andi	r24, 0xE0	; 224
     f4c:	13 96       	adiw	r26, 0x03	; 3
     f4e:	8c 93       	st	X, r24

	ADC_REGS->ADMUX_r.Reg = ADC_REGS->ADMUX_r.Reg | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     f50:	a4 e2       	ldi	r26, 0x24	; 36
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e4 e2       	ldi	r30, 0x24	; 36
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	89 2b       	or	r24, r25
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	8c 93       	st	X, r24

	SET_BIT(ADC_REGS->ADCSRA_r.Reg,6); /* Start conversion write '1' to ADSC */
     f62:	a4 e2       	ldi	r26, 0x24	; 36
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e4 e2       	ldi	r30, 0x24	; 36
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	8c 93       	st	X, r24
     f72:	12 97       	sbiw	r26, 0x02	; 2

	if(ADC_REGS->ADCSRA_r.Bitfield.B4 == 0)		/* Wait for conversion to complete, ADIF becomes '1' */
     f74:	e4 e2       	ldi	r30, 0x24	; 36
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	80 71       	andi	r24, 0x10	; 16
     f7c:	88 23       	and	r24, r24
     f7e:	49 f4       	brne	.+18     	; 0xf92 <ADC_getDigitalValueSynchNonBlocking+0x5e>

	{
		SET_BIT(ADC_REGS->ADCSRA_r.Reg,4); /* Clear ADIF by write '1' to it :) */
     f80:	a4 e2       	ldi	r26, 0x24	; 36
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e4 e2       	ldi	r30, 0x24	; 36
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	80 61       	ori	r24, 0x10	; 16
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	8c 93       	st	X, r24
     f90:	12 97       	sbiw	r26, 0x02	; 2

	}

	return ADC_REGS->ADCL_r; /* Read the digital value from the data register */
     f92:	e4 e2       	ldi	r30, 0x24	; 36
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01

}
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <ADC_getDigitalValueAsynchCallBack>:


void ADC_getDigitalValueAsynchCallBack(channel_num channel_num,void(*ptrfn)(void))
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <ADC_getDigitalValueAsynchCallBack+0x6>
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	7b 83       	std	Y+3, r23	; 0x03
     fb2:	6a 83       	std	Y+2, r22	; 0x02
	ADC_REGS->ADMUX_r.Reg = (ADC_REGS->ADMUX_r.Reg & 0xE0); /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     fb4:	a4 e2       	ldi	r26, 0x24	; 36
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e4 e2       	ldi	r30, 0x24	; 36
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	83 81       	ldd	r24, Z+3	; 0x03
     fbe:	80 7e       	andi	r24, 0xE0	; 224
     fc0:	13 96       	adiw	r26, 0x03	; 3
     fc2:	8c 93       	st	X, r24

	ADC_REGS->ADMUX_r.Reg = ADC_REGS->ADMUX_r.Reg | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     fc4:	a4 e2       	ldi	r26, 0x24	; 36
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e2       	ldi	r30, 0x24	; 36
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	89 2b       	or	r24, r25
     fd2:	13 96       	adiw	r26, 0x03	; 3
     fd4:	8c 93       	st	X, r24

	SET_BIT(SREG,PIN7_ID);
     fd6:	af e5       	ldi	r26, 0x5F	; 95
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ef e5       	ldi	r30, 0x5F	; 95
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 68       	ori	r24, 0x80	; 128
     fe2:	8c 93       	st	X, r24

	ADC_REGS->ADCSRA_r.Bitfield.B3=1;
     fe4:	e4 e2       	ldi	r30, 0x24	; 36
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	82 83       	std	Z+2, r24	; 0x02

	ADC_REGS->ADCSRA_r.Bitfield.B6=1;
     fee:	e4 e2       	ldi	r30, 0x24	; 36
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	82 83       	std	Z+2, r24	; 0x02

	ADC_ptr=ptrfn;
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	90 93 9e 01 	sts	0x019E, r25
    1000:	80 93 9d 01 	sts	0x019D, r24


}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <__vector_16>:

void __vector_16 (void)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(SREG,PIN7_ID);
    103a:	af e5       	ldi	r26, 0x5F	; 95
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ef e5       	ldi	r30, 0x5F	; 95
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	8c 93       	st	X, r24
	ADC_ptr();
    1048:	e0 91 9d 01 	lds	r30, 0x019D
    104c:	f0 91 9e 01 	lds	r31, 0x019E
    1050:	09 95       	icall
	ADC_REGS->ADCSRA_r.Bitfield.B4=0;
    1052:	e4 e2       	ldi	r30, 0x24	; 36
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	8f 7e       	andi	r24, 0xEF	; 239
    105a:	82 83       	std	Z+2, r24	; 0x02

}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <DIO_voidSetPinDirection>:

#include "DIO_interface.h"


void DIO_voidSetPinDirection(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Direction)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <DIO_voidSetPinDirection+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <DIO_voidSetPinDirection+0x8>
    108a:	00 d0       	rcall	.+0      	; 0x108c <DIO_voidSetPinDirection+0xa>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6b 83       	std	Y+3, r22	; 0x03
    1096:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3e 83       	std	Y+6, r19	; 0x06
    10a0:	2d 83       	std	Y+5, r18	; 0x05
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <DIO_voidSetPinDirection+0x2c>
    10ac:	51 c0       	rjmp	.+162    	; 0x1150 <DIO_voidSetPinDirection+0xce>
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	31 05       	cpc	r19, r1
    10b6:	7c f4       	brge	.+30     	; 0x10d6 <DIO_voidSetPinDirection+0x54>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	71 f1       	breq	.+92     	; 0x111e <DIO_voidSetPinDirection+0x9c>
    10c2:	2d 81       	ldd	r18, Y+5	; 0x05
    10c4:	3e 81       	ldd	r19, Y+6	; 0x06
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	ac f5       	brge	.+106    	; 0x1136 <DIO_voidSetPinDirection+0xb4>
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	d1 f0       	breq	.+52     	; 0x1108 <DIO_voidSetPinDirection+0x86>
    10d4:	81 c0       	rjmp	.+258    	; 0x11d8 <DIO_voidSetPinDirection+0x156>
    10d6:	2d 81       	ldd	r18, Y+5	; 0x05
    10d8:	3e 81       	ldd	r19, Y+6	; 0x06
    10da:	25 30       	cpi	r18, 0x05	; 5
    10dc:	31 05       	cpc	r19, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <DIO_voidSetPinDirection+0x60>
    10e0:	52 c0       	rjmp	.+164    	; 0x1186 <DIO_voidSetPinDirection+0x104>
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	85 30       	cpi	r24, 0x05	; 5
    10e8:	91 05       	cpc	r25, r1
    10ea:	0c f4       	brge	.+2      	; 0x10ee <DIO_voidSetPinDirection+0x6c>
    10ec:	3f c0       	rjmp	.+126    	; 0x116c <DIO_voidSetPinDirection+0xea>
    10ee:	2d 81       	ldd	r18, Y+5	; 0x05
    10f0:	3e 81       	ldd	r19, Y+6	; 0x06
    10f2:	26 30       	cpi	r18, 0x06	; 6
    10f4:	31 05       	cpc	r19, r1
    10f6:	09 f4       	brne	.+2      	; 0x10fa <DIO_voidSetPinDirection+0x78>
    10f8:	54 c0       	rjmp	.+168    	; 0x11a2 <DIO_voidSetPinDirection+0x120>
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	87 30       	cpi	r24, 0x07	; 7
    1100:	91 05       	cpc	r25, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <DIO_voidSetPinDirection+0x84>
    1104:	5d c0       	rjmp	.+186    	; 0x11c0 <DIO_voidSetPinDirection+0x13e>
    1106:	68 c0       	rjmp	.+208    	; 0x11d8 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	e9 81       	ldd	r30, Y+1	; 0x01
    110e:	fa 81       	ldd	r31, Y+2	; 0x02
    1110:	98 2f       	mov	r25, r24
    1112:	91 70       	andi	r25, 0x01	; 1
    1114:	81 81       	ldd	r24, Z+1	; 0x01
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	89 2b       	or	r24, r25
    111a:	81 83       	std	Z+1, r24	; 0x01
    111c:	5d c0       	rjmp	.+186    	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	e9 81       	ldd	r30, Y+1	; 0x01
    1124:	fa 81       	ldd	r31, Y+2	; 0x02
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	98 2f       	mov	r25, r24
    112a:	99 0f       	add	r25, r25
    112c:	81 81       	ldd	r24, Z+1	; 0x01
    112e:	8d 7f       	andi	r24, 0xFD	; 253
    1130:	89 2b       	or	r24, r25
    1132:	81 83       	std	Z+1, r24	; 0x01
    1134:	51 c0       	rjmp	.+162    	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	e9 81       	ldd	r30, Y+1	; 0x01
    113c:	fa 81       	ldd	r31, Y+2	; 0x02
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	98 2f       	mov	r25, r24
    1142:	99 0f       	add	r25, r25
    1144:	99 0f       	add	r25, r25
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	8b 7f       	andi	r24, 0xFB	; 251
    114a:	89 2b       	or	r24, r25
    114c:	81 83       	std	Z+1, r24	; 0x01
    114e:	44 c0       	rjmp	.+136    	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	81 70       	andi	r24, 0x01	; 1
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	98 2f       	mov	r25, r24
    115c:	99 0f       	add	r25, r25
    115e:	99 0f       	add	r25, r25
    1160:	99 0f       	add	r25, r25
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	87 7f       	andi	r24, 0xF7	; 247
    1166:	89 2b       	or	r24, r25
    1168:	81 83       	std	Z+1, r24	; 0x01
    116a:	36 c0       	rjmp	.+108    	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	e9 81       	ldd	r30, Y+1	; 0x01
    1172:	fa 81       	ldd	r31, Y+2	; 0x02
    1174:	81 70       	andi	r24, 0x01	; 1
    1176:	98 2f       	mov	r25, r24
    1178:	92 95       	swap	r25
    117a:	90 7f       	andi	r25, 0xF0	; 240
    117c:	81 81       	ldd	r24, Z+1	; 0x01
    117e:	8f 7e       	andi	r24, 0xEF	; 239
    1180:	89 2b       	or	r24, r25
    1182:	81 83       	std	Z+1, r24	; 0x01
    1184:	29 c0       	rjmp	.+82     	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	98 2f       	mov	r25, r24
    1192:	92 95       	swap	r25
    1194:	99 0f       	add	r25, r25
    1196:	90 7e       	andi	r25, 0xE0	; 224
    1198:	81 81       	ldd	r24, Z+1	; 0x01
    119a:	8f 7d       	andi	r24, 0xDF	; 223
    119c:	89 2b       	or	r24, r25
    119e:	81 83       	std	Z+1, r24	; 0x01
    11a0:	1b c0       	rjmp	.+54     	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	e9 81       	ldd	r30, Y+1	; 0x01
    11a8:	fa 81       	ldd	r31, Y+2	; 0x02
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	98 2f       	mov	r25, r24
    11ae:	92 95       	swap	r25
    11b0:	99 0f       	add	r25, r25
    11b2:	99 0f       	add	r25, r25
    11b4:	90 7c       	andi	r25, 0xC0	; 192
    11b6:	81 81       	ldd	r24, Z+1	; 0x01
    11b8:	8f 7b       	andi	r24, 0xBF	; 191
    11ba:	89 2b       	or	r24, r25
    11bc:	81 83       	std	Z+1, r24	; 0x01
    11be:	0c c0       	rjmp	.+24     	; 0x11d8 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	e9 81       	ldd	r30, Y+1	; 0x01
    11c6:	fa 81       	ldd	r31, Y+2	; 0x02
    11c8:	98 2f       	mov	r25, r24
    11ca:	97 95       	ror	r25
    11cc:	99 27       	eor	r25, r25
    11ce:	97 95       	ror	r25
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	89 2b       	or	r24, r25
    11d6:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
    11d8:	26 96       	adiw	r28, 0x06	; 6
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_voidSetPinValue+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_voidSetPinValue+0x8>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_voidSetPinValue+0xa>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	6b 83       	std	Y+3, r22	; 0x03
    11fe:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3e 83       	std	Y+6, r19	; 0x06
    1208:	2d 83       	std	Y+5, r18	; 0x05
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <DIO_voidSetPinValue+0x2c>
    1214:	51 c0       	rjmp	.+162    	; 0x12b8 <DIO_voidSetPinValue+0xce>
    1216:	2d 81       	ldd	r18, Y+5	; 0x05
    1218:	3e 81       	ldd	r19, Y+6	; 0x06
    121a:	24 30       	cpi	r18, 0x04	; 4
    121c:	31 05       	cpc	r19, r1
    121e:	7c f4       	brge	.+30     	; 0x123e <DIO_voidSetPinValue+0x54>
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	71 f1       	breq	.+92     	; 0x1286 <DIO_voidSetPinValue+0x9c>
    122a:	2d 81       	ldd	r18, Y+5	; 0x05
    122c:	3e 81       	ldd	r19, Y+6	; 0x06
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	ac f5       	brge	.+106    	; 0x129e <DIO_voidSetPinValue+0xb4>
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	d1 f0       	breq	.+52     	; 0x1270 <DIO_voidSetPinValue+0x86>
    123c:	81 c0       	rjmp	.+258    	; 0x1340 <DIO_voidSetPinValue+0x156>
    123e:	2d 81       	ldd	r18, Y+5	; 0x05
    1240:	3e 81       	ldd	r19, Y+6	; 0x06
    1242:	25 30       	cpi	r18, 0x05	; 5
    1244:	31 05       	cpc	r19, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <DIO_voidSetPinValue+0x60>
    1248:	52 c0       	rjmp	.+164    	; 0x12ee <DIO_voidSetPinValue+0x104>
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	85 30       	cpi	r24, 0x05	; 5
    1250:	91 05       	cpc	r25, r1
    1252:	0c f4       	brge	.+2      	; 0x1256 <DIO_voidSetPinValue+0x6c>
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <DIO_voidSetPinValue+0xea>
    1256:	2d 81       	ldd	r18, Y+5	; 0x05
    1258:	3e 81       	ldd	r19, Y+6	; 0x06
    125a:	26 30       	cpi	r18, 0x06	; 6
    125c:	31 05       	cpc	r19, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <DIO_voidSetPinValue+0x78>
    1260:	54 c0       	rjmp	.+168    	; 0x130a <DIO_voidSetPinValue+0x120>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	87 30       	cpi	r24, 0x07	; 7
    1268:	91 05       	cpc	r25, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <DIO_voidSetPinValue+0x84>
    126c:	5d c0       	rjmp	.+186    	; 0x1328 <DIO_voidSetPinValue+0x13e>
    126e:	68 c0       	rjmp	.+208    	; 0x1340 <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	98 2f       	mov	r25, r24
    127a:	91 70       	andi	r25, 0x01	; 1
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	8e 7f       	andi	r24, 0xFE	; 254
    1280:	89 2b       	or	r24, r25
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	5d c0       	rjmp	.+186    	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	e9 81       	ldd	r30, Y+1	; 0x01
    128c:	fa 81       	ldd	r31, Y+2	; 0x02
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	98 2f       	mov	r25, r24
    1292:	99 0f       	add	r25, r25
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	8d 7f       	andi	r24, 0xFD	; 253
    1298:	89 2b       	or	r24, r25
    129a:	82 83       	std	Z+2, r24	; 0x02
    129c:	51 c0       	rjmp	.+162    	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	e9 81       	ldd	r30, Y+1	; 0x01
    12a4:	fa 81       	ldd	r31, Y+2	; 0x02
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	98 2f       	mov	r25, r24
    12aa:	99 0f       	add	r25, r25
    12ac:	99 0f       	add	r25, r25
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	8b 7f       	andi	r24, 0xFB	; 251
    12b2:	89 2b       	or	r24, r25
    12b4:	82 83       	std	Z+2, r24	; 0x02
    12b6:	44 c0       	rjmp	.+136    	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	e9 81       	ldd	r30, Y+1	; 0x01
    12be:	fa 81       	ldd	r31, Y+2	; 0x02
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	98 2f       	mov	r25, r24
    12c4:	99 0f       	add	r25, r25
    12c6:	99 0f       	add	r25, r25
    12c8:	99 0f       	add	r25, r25
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	87 7f       	andi	r24, 0xF7	; 247
    12ce:	89 2b       	or	r24, r25
    12d0:	82 83       	std	Z+2, r24	; 0x02
    12d2:	36 c0       	rjmp	.+108    	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	81 70       	andi	r24, 0x01	; 1
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	98 2f       	mov	r25, r24
    12e0:	92 95       	swap	r25
    12e2:	90 7f       	andi	r25, 0xF0	; 240
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	8f 7e       	andi	r24, 0xEF	; 239
    12e8:	89 2b       	or	r24, r25
    12ea:	82 83       	std	Z+2, r24	; 0x02
    12ec:	29 c0       	rjmp	.+82     	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	e9 81       	ldd	r30, Y+1	; 0x01
    12f4:	fa 81       	ldd	r31, Y+2	; 0x02
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	98 2f       	mov	r25, r24
    12fa:	92 95       	swap	r25
    12fc:	99 0f       	add	r25, r25
    12fe:	90 7e       	andi	r25, 0xE0	; 224
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	8f 7d       	andi	r24, 0xDF	; 223
    1304:	89 2b       	or	r24, r25
    1306:	82 83       	std	Z+2, r24	; 0x02
    1308:	1b c0       	rjmp	.+54     	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	e9 81       	ldd	r30, Y+1	; 0x01
    1310:	fa 81       	ldd	r31, Y+2	; 0x02
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	98 2f       	mov	r25, r24
    1316:	92 95       	swap	r25
    1318:	99 0f       	add	r25, r25
    131a:	99 0f       	add	r25, r25
    131c:	90 7c       	andi	r25, 0xC0	; 192
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	89 2b       	or	r24, r25
    1324:	82 83       	std	Z+2, r24	; 0x02
    1326:	0c c0       	rjmp	.+24     	; 0x1340 <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	98 2f       	mov	r25, r24
    1332:	97 95       	ror	r25
    1334:	99 27       	eor	r25, r25
    1336:	97 95       	ror	r25
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	8f 77       	andi	r24, 0x7F	; 127
    133c:	89 2b       	or	r24, r25
    133e:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
    1340:	26 96       	adiw	r28, 0x06	; 6
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <DIO_voidGetPinValue>:

uint8 DIO_voidGetPinValue(Port_Def* ptr,uint8 Copy_u8PinId)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_voidGetPinValue+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <DIO_voidGetPinValue+0x8>
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_voidGetPinValue+0xa>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9b 83       	std	Y+3, r25	; 0x03
    1362:	8a 83       	std	Y+2, r24	; 0x02
    1364:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
    1366:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3e 83       	std	Y+6, r19	; 0x06
    1370:	2d 83       	std	Y+5, r18	; 0x05
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <DIO_voidGetPinValue+0x2c>
    137c:	3e c0       	rjmp	.+124    	; 0x13fa <DIO_voidGetPinValue+0xa8>
    137e:	2d 81       	ldd	r18, Y+5	; 0x05
    1380:	3e 81       	ldd	r19, Y+6	; 0x06
    1382:	24 30       	cpi	r18, 0x04	; 4
    1384:	31 05       	cpc	r19, r1
    1386:	7c f4       	brge	.+30     	; 0x13a6 <DIO_voidGetPinValue+0x54>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	29 f1       	breq	.+74     	; 0x13dc <DIO_voidGetPinValue+0x8a>
    1392:	2d 81       	ldd	r18, Y+5	; 0x05
    1394:	3e 81       	ldd	r19, Y+6	; 0x06
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	3c f5       	brge	.+78     	; 0x13ea <DIO_voidGetPinValue+0x98>
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	b1 f0       	breq	.+44     	; 0x13d0 <DIO_voidGetPinValue+0x7e>
    13a4:	55 c0       	rjmp	.+170    	; 0x1450 <DIO_voidGetPinValue+0xfe>
    13a6:	2d 81       	ldd	r18, Y+5	; 0x05
    13a8:	3e 81       	ldd	r19, Y+6	; 0x06
    13aa:	25 30       	cpi	r18, 0x05	; 5
    13ac:	31 05       	cpc	r19, r1
    13ae:	b1 f1       	breq	.+108    	; 0x141c <DIO_voidGetPinValue+0xca>
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	85 30       	cpi	r24, 0x05	; 5
    13b6:	91 05       	cpc	r25, r1
    13b8:	4c f1       	brlt	.+82     	; 0x140c <DIO_voidGetPinValue+0xba>
    13ba:	2d 81       	ldd	r18, Y+5	; 0x05
    13bc:	3e 81       	ldd	r19, Y+6	; 0x06
    13be:	26 30       	cpi	r18, 0x06	; 6
    13c0:	31 05       	cpc	r19, r1
    13c2:	a9 f1       	breq	.+106    	; 0x142e <DIO_voidGetPinValue+0xdc>
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	87 30       	cpi	r24, 0x07	; 7
    13ca:	91 05       	cpc	r25, r1
    13cc:	d1 f1       	breq	.+116    	; 0x1442 <DIO_voidGetPinValue+0xf0>
    13ce:	40 c0       	rjmp	.+128    	; 0x1450 <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    13d0:	ea 81       	ldd	r30, Y+2	; 0x02
    13d2:	fb 81       	ldd	r31, Y+3	; 0x03
    13d4:	80 81       	ld	r24, Z
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	3a c0       	rjmp	.+116    	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    13dc:	ea 81       	ldd	r30, Y+2	; 0x02
    13de:	fb 81       	ldd	r31, Y+3	; 0x03
    13e0:	80 81       	ld	r24, Z
    13e2:	86 95       	lsr	r24
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	33 c0       	rjmp	.+102    	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    13ea:	ea 81       	ldd	r30, Y+2	; 0x02
    13ec:	fb 81       	ldd	r31, Y+3	; 0x03
    13ee:	80 81       	ld	r24, Z
    13f0:	86 95       	lsr	r24
    13f2:	86 95       	lsr	r24
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	2b c0       	rjmp	.+86     	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    13fa:	ea 81       	ldd	r30, Y+2	; 0x02
    13fc:	fb 81       	ldd	r31, Y+3	; 0x03
    13fe:	80 81       	ld	r24, Z
    1400:	86 95       	lsr	r24
    1402:	86 95       	lsr	r24
    1404:	86 95       	lsr	r24
    1406:	81 70       	andi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	22 c0       	rjmp	.+68     	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	80 81       	ld	r24, Z
    1412:	82 95       	swap	r24
    1414:	8f 70       	andi	r24, 0x0F	; 15
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	1a c0       	rjmp	.+52     	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    141c:	ea 81       	ldd	r30, Y+2	; 0x02
    141e:	fb 81       	ldd	r31, Y+3	; 0x03
    1420:	80 81       	ld	r24, Z
    1422:	82 95       	swap	r24
    1424:	86 95       	lsr	r24
    1426:	87 70       	andi	r24, 0x07	; 7
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	11 c0       	rjmp	.+34     	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    142e:	ea 81       	ldd	r30, Y+2	; 0x02
    1430:	fb 81       	ldd	r31, Y+3	; 0x03
    1432:	80 81       	ld	r24, Z
    1434:	82 95       	swap	r24
    1436:	86 95       	lsr	r24
    1438:	86 95       	lsr	r24
    143a:	83 70       	andi	r24, 0x03	; 3
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	80 81       	ld	r24, Z
    1448:	88 1f       	adc	r24, r24
    144a:	88 27       	eor	r24, r24
    144c:	88 1f       	adc	r24, r24
    144e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
}
    1452:	26 96       	adiw	r28, 0x06	; 6
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(Port_Def* ptr,uint8 Copy_u8Direction)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <DIO_voidSetPortDirection+0x6>
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	81 83       	std	Z+1, r24	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(Port_Def* ptr,uint8 Copy_u8Value)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_voidSetPortValue+0x6>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	82 83       	std	Z+2, r24	; 0x02
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <DIO_voidGetPortValue>:

uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <DIO_voidGetPortValue+0x6>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    14be:	e9 81       	ldd	r30, Y+1	; 0x01
    14c0:	fa 81       	ldd	r31, Y+2	; 0x02
    14c2:	80 81       	ld	r24, Z
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <EXTI_ENABLE>:
static ERROR_STATE status;

/****************************ENABLE THE EXTERNAL INTERRUPT MODULE****************************/

ERROR_STATE EXTI_ENABLE(EXTI_CONFIG* ptr_config)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <EXTI_ENABLE+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <EXTI_ENABLE+0x8>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01

	GIE_Disable();											//DISABLE GLOBAL INT BIT (I-BIT)
    14de:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GIE_Disable>
	SET_BIT(EXTI->GICR.Reg,ptr_config->INT_ID);				//ENABLE WHICH INT TO BE USED
    14e2:	a4 e5       	ldi	r26, 0x54	; 84
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e5       	ldi	r30, 0x54	; 84
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	87 81       	ldd	r24, Z+7	; 0x07
    14ec:	48 2f       	mov	r20, r24
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	81 81       	ldd	r24, Z+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <EXTI_ENABLE+0x36>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <EXTI_ENABLE+0x32>
    1508:	84 2b       	or	r24, r20
    150a:	17 96       	adiw	r26, 0x07	; 7
    150c:	8c 93       	st	X, r24
    150e:	17 97       	sbiw	r26, 0x07	; 7


	if(ptr_config->INT_ID != EXTI_INT0 || ptr_config->INT_ID != EXTI_INT1 || ptr_config->INT_ID != EXTI_INT2)
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	81 81       	ldd	r24, Z+1	; 0x01
    1516:	86 30       	cpi	r24, 0x06	; 6
    1518:	51 f4       	brne	.+20     	; 0x152e <EXTI_ENABLE+0x60>
    151a:	e9 81       	ldd	r30, Y+1	; 0x01
    151c:	fa 81       	ldd	r31, Y+2	; 0x02
    151e:	81 81       	ldd	r24, Z+1	; 0x01
    1520:	87 30       	cpi	r24, 0x07	; 7
    1522:	29 f4       	brne	.+10     	; 0x152e <EXTI_ENABLE+0x60>
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	81 81       	ldd	r24, Z+1	; 0x01
    152a:	85 30       	cpi	r24, 0x05	; 5
    152c:	11 f0       	breq	.+4      	; 0x1532 <EXTI_ENABLE+0x64>
	{
		status= OUT_OF_RANGE;
    152e:	10 92 8e 01 	sts	0x018E, r1
	//	else if(ptr_config=='NULL')      //ana kda bkaren address b integer 3awz akaren eza kan l pointer da byshawer 3la null wlla la
	//	{
	//		status=NULL_POINTER;
	//	}

	SET_BIT(EXTI->GICR.Reg,ptr_config->INT_ID);				//ENABLE WHICH INT TO BE USED
    1532:	a4 e5       	ldi	r26, 0x54	; 84
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e4 e5       	ldi	r30, 0x54	; 84
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	87 81       	ldd	r24, Z+7	; 0x07
    153c:	48 2f       	mov	r20, r24
    153e:	e9 81       	ldd	r30, Y+1	; 0x01
    1540:	fa 81       	ldd	r31, Y+2	; 0x02
    1542:	81 81       	ldd	r24, Z+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <EXTI_ENABLE+0x84>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	2a 95       	dec	r18
    1554:	e2 f7       	brpl	.-8      	; 0x154e <EXTI_ENABLE+0x80>
    1556:	84 2b       	or	r24, r20
    1558:	17 96       	adiw	r26, 0x07	; 7
    155a:	8c 93       	st	X, r24
    155c:	17 97       	sbiw	r26, 0x07	; 7

	switch(ptr_config->INT_ID)
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	81 81       	ldd	r24, Z+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3c 83       	std	Y+4, r19	; 0x04
    156a:	2b 83       	std	Y+3, r18	; 0x03
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	86 30       	cpi	r24, 0x06	; 6
    1572:	91 05       	cpc	r25, r1
    1574:	61 f0       	breq	.+24     	; 0x158e <EXTI_ENABLE+0xc0>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	27 30       	cpi	r18, 0x07	; 7
    157c:	31 05       	cpc	r19, r1
    157e:	39 f1       	breq	.+78     	; 0x15ce <EXTI_ENABLE+0x100>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	85 30       	cpi	r24, 0x05	; 5
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <EXTI_ENABLE+0xbe>
    158a:	48 c0       	rjmp	.+144    	; 0x161c <EXTI_ENABLE+0x14e>
    158c:	70 c0       	rjmp	.+224    	; 0x166e <EXTI_ENABLE+0x1a0>
	{
	case EXTI_INT0:
		EXTI->MCUCR.Reg &= 0b11111100;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT0
    158e:	a4 e5       	ldi	r26, 0x54	; 84
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e4 e5       	ldi	r30, 0x54	; 84
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	81 81       	ldd	r24, Z+1	; 0x01
    1598:	8c 7f       	andi	r24, 0xFC	; 252
    159a:	11 96       	adiw	r26, 0x01	; 1
    159c:	8c 93       	st	X, r24
		EXTI->MCUCR.Reg |= ptr_config->trigger_type;
    159e:	a4 e5       	ldi	r26, 0x54	; 84
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 e5       	ldi	r30, 0x54	; 84
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	80 81       	ld	r24, Z
    15ae:	89 2b       	or	r24, r25
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	8c 93       	st	X, r24
    15b4:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[0] = ptr_config->ptr_call_back;
    15b6:	e9 81       	ldd	r30, Y+1	; 0x01
    15b8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	90 93 a0 01 	sts	0x01A0, r25
    15c2:	80 93 9f 01 	sts	0x019F, r24
		status= NO_ERR;
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	80 93 8e 01 	sts	0x018E, r24
    15cc:	50 c0       	rjmp	.+160    	; 0x166e <EXTI_ENABLE+0x1a0>
		break;

	case EXTI_INT1:
		EXTI->MCUCR.Reg &= 0b11110011;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT1
    15ce:	a4 e5       	ldi	r26, 0x54	; 84
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e4 e5       	ldi	r30, 0x54	; 84
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
    15d8:	83 7f       	andi	r24, 0xF3	; 243
    15da:	11 96       	adiw	r26, 0x01	; 1
    15dc:	8c 93       	st	X, r24
		EXTI->MCUCR.Reg |=(ptr_config->trigger_type) <<2;
    15de:	a4 e5       	ldi	r26, 0x54	; 84
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e4 e5       	ldi	r30, 0x54	; 84
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	80 81       	ld	r24, Z
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	82 2b       	or	r24, r18
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	8c 93       	st	X, r24
    1602:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[1] = ptr_config->ptr_call_back;
    1604:	e9 81       	ldd	r30, Y+1	; 0x01
    1606:	fa 81       	ldd	r31, Y+2	; 0x02
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	93 81       	ldd	r25, Z+3	; 0x03
    160c:	90 93 a2 01 	sts	0x01A2, r25
    1610:	80 93 a1 01 	sts	0x01A1, r24
		status= NO_ERR;
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	80 93 8e 01 	sts	0x018E, r24
    161a:	29 c0       	rjmp	.+82     	; 0x166e <EXTI_ENABLE+0x1a0>
		break;

	case EXTI_INT2:

		EXTI->MCUCSR.Reg &=0b11011111;						//CONFIGURE THE TRIGGER TYPE AND SET CALL BACK FUNCTION FOR INT2
    161c:	a4 e5       	ldi	r26, 0x54	; 84
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e4 e5       	ldi	r30, 0x54	; 84
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8f 7d       	andi	r24, 0xDF	; 223
    1628:	8c 93       	st	X, r24
		EXTI->MCUCSR.Reg |=(ptr_config->trigger_type-2) <<PIN6_ID;
    162a:	a4 e5       	ldi	r26, 0x54	; 84
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e4 e5       	ldi	r30, 0x54	; 84
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	28 2f       	mov	r18, r24
    1636:	e9 81       	ldd	r30, Y+1	; 0x01
    1638:	fa 81       	ldd	r31, Y+2	; 0x02
    163a:	80 81       	ld	r24, Z
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 97       	sbiw	r24, 0x02	; 2
    1642:	00 24       	eor	r0, r0
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	07 94       	ror	r0
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	07 94       	ror	r0
    1650:	98 2f       	mov	r25, r24
    1652:	80 2d       	mov	r24, r0
    1654:	82 2b       	or	r24, r18
    1656:	8c 93       	st	X, r24
		EXT_INT_POINTERS[2] = ptr_config->ptr_call_back;
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	90 93 a4 01 	sts	0x01A4, r25
    1664:	80 93 a3 01 	sts	0x01A3, r24
		status= NO_ERR;
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	80 93 8e 01 	sts	0x018E, r24
		break;
	}
	GIE_Enable();											//DON'T FORGET TO ENABLE THE GLOBAL I-BIT AFTER CONFIGURING THE EXTI
    166e:	0e 94 3e 0c 	call	0x187c	; 0x187c <GIE_Enable>

	return status;
    1672:	80 91 8e 01 	lds	r24, 0x018E
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <EXTI_DISABLE>:


/********************************DISABLE THE EXTI MODULE****************************/

ERROR_STATE EXTI_DISABLE(EXTI_CONFIG* ptr_config)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <EXTI_DISABLE+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <EXTI_DISABLE+0x8>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_config->INT_ID != EXTI_INT0 || ptr_config->INT_ID != EXTI_INT1 || ptr_config->INT_ID != EXTI_INT2)
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	81 81       	ldd	r24, Z+1	; 0x01
    169a:	86 30       	cpi	r24, 0x06	; 6
    169c:	51 f4       	brne	.+20     	; 0x16b2 <EXTI_DISABLE+0x2e>
    169e:	e9 81       	ldd	r30, Y+1	; 0x01
    16a0:	fa 81       	ldd	r31, Y+2	; 0x02
    16a2:	81 81       	ldd	r24, Z+1	; 0x01
    16a4:	87 30       	cpi	r24, 0x07	; 7
    16a6:	29 f4       	brne	.+10     	; 0x16b2 <EXTI_DISABLE+0x2e>
    16a8:	e9 81       	ldd	r30, Y+1	; 0x01
    16aa:	fa 81       	ldd	r31, Y+2	; 0x02
    16ac:	81 81       	ldd	r24, Z+1	; 0x01
    16ae:	85 30       	cpi	r24, 0x05	; 5
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <EXTI_DISABLE+0x34>
	{
		status= OUT_OF_RANGE;
    16b2:	10 92 8e 01 	sts	0x018E, r1
    16b6:	3d c0       	rjmp	.+122    	; 0x1732 <EXTI_DISABLE+0xae>
//	{
//		status=NULL_POINTER;
//	}
	else
	{
		switch(ptr_config->INT_ID)
    16b8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ba:	fa 81       	ldd	r31, Y+2	; 0x02
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3c 83       	std	Y+4, r19	; 0x04
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	86 30       	cpi	r24, 0x06	; 6
    16cc:	91 05       	cpc	r25, r1
    16ce:	59 f0       	breq	.+22     	; 0x16e6 <EXTI_DISABLE+0x62>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	27 30       	cpi	r18, 0x07	; 7
    16d6:	31 05       	cpc	r19, r1
    16d8:	99 f0       	breq	.+38     	; 0x1700 <EXTI_DISABLE+0x7c>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	85 30       	cpi	r24, 0x05	; 5
    16e0:	91 05       	cpc	r25, r1
    16e2:	d9 f0       	breq	.+54     	; 0x171a <EXTI_DISABLE+0x96>
    16e4:	26 c0       	rjmp	.+76     	; 0x1732 <EXTI_DISABLE+0xae>
		{
		case EXTI_INT0:
			EXTI->GICR.Reg &= ~1<<EXTI_INT0; //disable interrupt 0
    16e6:	a4 e5       	ldi	r26, 0x54	; 84
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e4 e5       	ldi	r30, 0x54	; 84
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	87 81       	ldd	r24, Z+7	; 0x07
    16f0:	80 78       	andi	r24, 0x80	; 128
    16f2:	17 96       	adiw	r26, 0x07	; 7
    16f4:	8c 93       	st	X, r24
    16f6:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERR;
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	80 93 8e 01 	sts	0x018E, r24
    16fe:	19 c0       	rjmp	.+50     	; 0x1732 <EXTI_DISABLE+0xae>
			break;

		case EXTI_INT1:
			EXTI->GICR.Reg &= ~(1<<EXTI_INT1); //disable interrupt 1
    1700:	a4 e5       	ldi	r26, 0x54	; 84
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e4 e5       	ldi	r30, 0x54	; 84
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	87 81       	ldd	r24, Z+7	; 0x07
    170a:	8f 77       	andi	r24, 0x7F	; 127
    170c:	17 96       	adiw	r26, 0x07	; 7
    170e:	8c 93       	st	X, r24
    1710:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERR;
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	80 93 8e 01 	sts	0x018E, r24
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <EXTI_DISABLE+0xae>
			break;

		case EXTI_INT2:
			EXTI->GICR.Reg &= ~1<<EXTI_INT2; //disable interrupt 2
    171a:	a4 e5       	ldi	r26, 0x54	; 84
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e4 e5       	ldi	r30, 0x54	; 84
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	87 81       	ldd	r24, Z+7	; 0x07
    1724:	80 7c       	andi	r24, 0xC0	; 192
    1726:	17 96       	adiw	r26, 0x07	; 7
    1728:	8c 93       	st	X, r24
    172a:	17 97       	sbiw	r26, 0x07	; 7
			status=NO_ERR;
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	80 93 8e 01 	sts	0x018E, r24
			break;
		}
	}
	return status;
    1732:	80 91 8e 01 	lds	r24, 0x018E

}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <__vector_1>:

/****************************ISR FOR INT0**********************/
void __vector_1 (void)
{
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    176e:	af e5       	ldi	r26, 0x5F	; 95
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ef e5       	ldi	r30, 0x5F	; 95
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 77       	andi	r24, 0x7F	; 127
    177a:	8c 93       	st	X, r24
	EXT_INT_POINTERS[0]();
    177c:	e0 91 9f 01 	lds	r30, 0x019F
    1780:	f0 91 a0 01 	lds	r31, 0x01A0
    1784:	09 95       	icall
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_2>:

/****************************ISR FOR INT1**********************/

void __vector_2 (void){
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    17d6:	af e5       	ldi	r26, 0x5F	; 95
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ef e5       	ldi	r30, 0x5F	; 95
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8f 77       	andi	r24, 0x7F	; 127
    17e2:	8c 93       	st	X, r24
	EXT_INT_POINTERS[1]();
    17e4:	e0 91 a1 01 	lds	r30, 0x01A1
    17e8:	f0 91 a2 01 	lds	r31, 0x01A2
    17ec:	09 95       	icall

}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	0f 90       	pop	r0
    1810:	1f 90       	pop	r1
    1812:	18 95       	reti

00001814 <__vector_3>:
/****************************ISR FOR INT2**********************/

void __vector_3 (void){
    1814:	1f 92       	push	r1
    1816:	0f 92       	push	r0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	0f 92       	push	r0
    181c:	11 24       	eor	r1, r1
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    183e:	af e5       	ldi	r26, 0x5F	; 95
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ef e5       	ldi	r30, 0x5F	; 95
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8f 77       	andi	r24, 0x7F	; 127
    184a:	8c 93       	st	X, r24
	EXT_INT_POINTERS[2]();
    184c:	e0 91 a3 01 	lds	r30, 0x01A3
    1850:	f0 91 a4 01 	lds	r31, 0x01A4
    1854:	09 95       	icall

}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	0f 90       	pop	r0
    1878:	1f 90       	pop	r1
    187a:	18 95       	reti

0000187c <GIE_Enable>:
 *      Author: Ali Afifi
 */
#include "GEI.h"

void GIE_Enable()
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,PIN7_ID);
    1884:	af e5       	ldi	r26, 0x5F	; 95
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ef e5       	ldi	r30, 0x5F	; 95
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 68       	ori	r24, 0x80	; 128
    1890:	8c 93       	st	X, r24
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <GIE_Disable>:

void GIE_Disable()
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    18a0:	af e5       	ldi	r26, 0x5F	; 95
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ef e5       	ldi	r30, 0x5F	; 95
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 77       	andi	r24, 0x7F	; 127
    18ac:	8c 93       	st	X, r24
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	2f 93       	push	r18
    18c0:	3f 93       	push	r19
    18c2:	4f 93       	push	r20
    18c4:	5f 93       	push	r21
    18c6:	6f 93       	push	r22
    18c8:	7f 93       	push	r23
    18ca:	8f 93       	push	r24
    18cc:	9f 93       	push	r25
    18ce:	af 93       	push	r26
    18d0:	bf 93       	push	r27
    18d2:	ef 93       	push	r30
    18d4:	ff 93       	push	r31
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    18de:	80 91 8f 01 	lds	r24, 0x018F
    18e2:	90 91 90 01 	lds	r25, 0x0190
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <__vector_6+0x40>
	{
		// Call the Call Back function in the application after the edge is detected
		(*g_callBackPtr)();
    18ea:	e0 91 8f 01 	lds	r30, 0x018F
    18ee:	f0 91 90 01 	lds	r31, 0x0190
    18f2:	09 95       	icall
	}
}
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <ICU_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ICU_init(const Icu_ConfigType * Config_Ptr)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <ICU_init+0x6>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
	                                                           ****************/
	//DIO_voidSetPinDirection(ICU_PORT,ICP1_PIN,INPUT);    // Configure ECHO PIN/PD6 as input pin


	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1928:	ef e4       	ldi	r30, 0x4F	; 79
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	8c e0       	ldi	r24, 0x0C	; 12
    192e:	80 83       	st	Z, r24

	/* To insert the required clock value in the first 3 bits (CS10,CS11,CS12): */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr ->clock);
    1930:	ae e4       	ldi	r26, 0x4E	; 78
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e4       	ldi	r30, 0x4E	; 78
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	98 2f       	mov	r25, r24
    193c:	98 7f       	andi	r25, 0xF8	; 248
    193e:	e9 81       	ldd	r30, Y+1	; 0x01
    1940:	fa 81       	ldd	r31, Y+2	; 0x02
    1942:	80 81       	ld	r24, Z
    1944:	89 2b       	or	r24, r25
    1946:	8c 93       	st	X, r24

	/* To insert the required edge type in ICES1: */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr -> edge)>>6);
    1948:	ae e4       	ldi	r26, 0x4E	; 78
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ee e4       	ldi	r30, 0x4E	; 78
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	98 2f       	mov	r25, r24
    1954:	9f 7b       	andi	r25, 0xBF	; 191
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	81 81       	ldd	r24, Z+1	; 0x01
    195c:	82 95       	swap	r24
    195e:	86 95       	lsr	r24
    1960:	86 95       	lsr	r24
    1962:	83 70       	andi	r24, 0x03	; 3
    1964:	89 2b       	or	r24, r25
    1966:	8c 93       	st	X, r24

	TCNT1 = 0;      /* Initial value of TIMER1 */
    1968:	ec e4       	ldi	r30, 0x4C	; 76
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	11 82       	std	Z+1, r1	; 0x01
    196e:	10 82       	st	Z, r1
	ICR1 = 0;    /* Initial Value for the input capture register */
    1970:	e6 e4       	ldi	r30, 0x46	; 70
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	11 82       	std	Z+1, r1	; 0x01
    1976:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1978:	a9 e5       	ldi	r26, 0x59	; 89
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e9 e5       	ldi	r30, 0x59	; 89
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 62       	ori	r24, 0x20	; 32
    1984:	8c 93       	st	X, r24
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <ICU_setCallBack+0x6>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	90 93 90 01 	sts	0x0190, r25
    19a6:	80 93 8f 01 	sts	0x018F, r24
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    19c0:	ae e4       	ldi	r26, 0x4E	; 78
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	2f 7b       	andi	r18, 0xBF	; 191
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	00 24       	eor	r0, r0
    19d6:	96 95       	lsr	r25
    19d8:	87 95       	ror	r24
    19da:	07 94       	ror	r0
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	07 94       	ror	r0
    19e2:	98 2f       	mov	r25, r24
    19e4:	80 2d       	mov	r24, r0
    19e6:	82 2b       	or	r24, r18
    19e8:	8c 93       	st	X, r24
}
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    19fa:	e6 e4       	ldi	r30, 0x46	; 70
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1a10:	ec e4       	ldi	r30, 0x4C	; 76
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	11 82       	std	Z+1, r1	; 0x01
    1a16:	10 82       	st	Z, r1
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <ICU_DeInit>:


void ICU_DeInit(void)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1a26:	ef e4       	ldi	r30, 0x4F	; 79
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	10 82       	st	Z, r1
	TCCR1B = 0;
    1a2c:	ee e4       	ldi	r30, 0x4E	; 78
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a32:	ec e4       	ldi	r30, 0x4C	; 76
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	11 82       	std	Z+1, r1	; 0x01
    1a38:	10 82       	st	Z, r1
	ICR1 = 0;
    1a3a:	e6 e4       	ldi	r30, 0x46	; 70
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	11 82       	std	Z+1, r1	; 0x01
    1a40:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1a42:	a9 e5       	ldi	r26, 0x59	; 89
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e9 e5       	ldi	r30, 0x59	; 89
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 7d       	andi	r24, 0xDF	; 223
    1a4e:	8c 93       	st	X, r24
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>              //will remove it and use user defined registers as the rest

void TWI_init(TWI_ConfigType *config_ptr)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <TWI_init+0x6>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1a64:	e0 e2       	ldi	r30, 0x20	; 32
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	80 83       	st	Z, r24
	TWSR = (TWSR & 0xFC) | (config_ptr -> prescalar);
    1a6c:	a1 e2       	ldi	r26, 0x21	; 33
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e1 e2       	ldi	r30, 0x21	; 33
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	98 2f       	mov	r25, r24
    1a78:	9c 7f       	andi	r25, 0xFC	; 252
    1a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7e:	80 81       	ld	r24, Z
    1a80:	89 2b       	or	r24, r25
    1a82:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
   // TWAR = 0b00000010; // my address = 0x01 :)

    TWCR = (1<<TWEN); /* enable TWI */
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	80 83       	st	Z, r24
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <TWI_sendStart>:

void TWI_sendStart(void)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1a9e:	e6 e5       	ldi	r30, 0x56	; 86
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	84 ea       	ldi	r24, 0xA4	; 164
    1aa4:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1aa6:	e6 e5       	ldi	r30, 0x56	; 86
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 23       	and	r24, r24
    1aae:	dc f7       	brge	.-10     	; 0x1aa6 <TWI_sendStart+0x10>
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <TWI_sendStop>:

void TWI_sendStop(void)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1abe:	e6 e5       	ldi	r30, 0x56	; 86
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	84 e9       	ldi	r24, 0x94	; 148
    1ac4:	80 83       	st	Z, r24
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <TWI_sendByte>:

void TWI_sendByte(uint8 data)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	0f 92       	push	r0
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1ad8:	e3 e2       	ldi	r30, 0x23	; 35
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ae0:	e6 e5       	ldi	r30, 0x56	; 86
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	84 e8       	ldi	r24, 0x84	; 132
    1ae6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ae8:	e6 e5       	ldi	r30, 0x56	; 86
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	dc f7       	brge	.-10     	; 0x1ae8 <TWI_sendByte+0x1c>
}
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <TWI_receiveByte_ACK>:

uint8 TWI_receiveByte_ACK(void)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b02:	e6 e5       	ldi	r30, 0x56	; 86
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	84 ec       	ldi	r24, 0xC4	; 196
    1b08:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b0a:	e6 e5       	ldi	r30, 0x56	; 86
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	dc f7       	brge	.-10     	; 0x1b0a <TWI_receiveByte_ACK+0x10>
    /* Read Data */
    return TWDR;
    1b14:	e3 e2       	ldi	r30, 0x23	; 35
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <TWI_receiveByte_NoACK>:

uint8 TWI_receiveByte_NoACK(void)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b28:	e6 e5       	ldi	r30, 0x56	; 86
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	84 e8       	ldi	r24, 0x84	; 132
    1b2e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b30:	e6 e5       	ldi	r30, 0x56	; 86
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	88 23       	and	r24, r24
    1b38:	dc f7       	brge	.-10     	; 0x1b30 <TWI_receiveByte_NoACK+0x10>
    /* Read Data */
    return TWDR;
    1b3a:	e3 e2       	ldi	r30, 0x23	; 35
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
}
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1b50:	e1 e2       	ldi	r30, 0x21	; 33
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	88 7f       	andi	r24, 0xF8	; 248
    1b58:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <Timer_Init>:
#include "Timer0.h"

void (*ptr_callBack)(void)=NULL_PTR;

void Timer_Init(TIMER0_CONFIG *Timer_Config)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <Timer_Init+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <Timer_Init+0x8>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer_Config->TIMER0_MODES)
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	80 81       	ld	r24, Z
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3c 83       	std	Y+4, r19	; 0x04
    1b80:	2b 83       	std	Y+3, r18	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <Timer_Init+0x2a>
    1b8c:	41 c0       	rjmp	.+130    	; 0x1c10 <Timer_Init+0xac>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <Timer_Init+0x3e>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <Timer_Init+0x58>
    1ba0:	a9 c0       	rjmp	.+338    	; 0x1cf4 <Timer_Init+0x190>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <Timer_Init+0x4a>
    1bac:	56 c0       	rjmp	.+172    	; 0x1c5a <Timer_Init+0xf6>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <Timer_Init+0x56>
    1bb8:	7a c0       	rjmp	.+244    	; 0x1cae <Timer_Init+0x14a>
    1bba:	9c c0       	rjmp	.+312    	; 0x1cf4 <Timer_Init+0x190>
	{
	case NORMAL_MODE:
		Timer0_Regs->TCCR0.Bitfield.B7=1;              //FOC0 IS SET FOR NON PWM MODE
    1bbc:	e2 e5       	ldi	r30, 0x52	; 82
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	81 81       	ldd	r24, Z+1	; 0x01
    1bc2:	80 68       	ori	r24, 0x80	; 128
    1bc4:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=0;
    1bc6:	e2 e5       	ldi	r30, 0x52	; 82
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	81 81       	ldd	r24, Z+1	; 0x01
    1bcc:	87 7f       	andi	r24, 0xF7	; 247
    1bce:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=0;
    1bd0:	e2 e5       	ldi	r30, 0x52	; 82
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	81 81       	ldd	r24, Z+1	; 0x01
    1bd6:	8f 7b       	andi	r24, 0xBF	; 191
    1bd8:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Reg|=(Timer_Config->NON_PWM_MODE)<<PIN4_ID;
    1bda:	a2 e5       	ldi	r26, 0x52	; 82
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e2 e5       	ldi	r30, 0x52	; 82
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	81 81       	ldd	r24, Z+1	; 0x01
    1be4:	28 2f       	mov	r18, r24
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	82 95       	swap	r24
    1bf2:	92 95       	swap	r25
    1bf4:	90 7f       	andi	r25, 0xF0	; 240
    1bf6:	98 27       	eor	r25, r24
    1bf8:	80 7f       	andi	r24, 0xF0	; 240
    1bfa:	98 27       	eor	r25, r24
    1bfc:	82 2b       	or	r24, r18
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	8c 93       	st	X, r24

		Timer0_Regs->TCNT0.Reg=Timer_Config->VALUE;
    1c02:	a2 e5       	ldi	r26, 0x52	; 82
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e9 81       	ldd	r30, Y+1	; 0x01
    1c08:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0a:	84 81       	ldd	r24, Z+4	; 0x04
    1c0c:	8c 93       	st	X, r24
    1c0e:	72 c0       	rjmp	.+228    	; 0x1cf4 <Timer_Init+0x190>

		break;

	case PWM_MODE:
		Timer0_Regs->TCCR0.Bitfield.B7=0;              //FOC0 IS CLEARED FOR PWM MODE
    1c10:	e2 e5       	ldi	r30, 0x52	; 82
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	81 81       	ldd	r24, Z+1	; 0x01
    1c16:	8f 77       	andi	r24, 0x7F	; 127
    1c18:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=0;
    1c1a:	e2 e5       	ldi	r30, 0x52	; 82
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	81 81       	ldd	r24, Z+1	; 0x01
    1c20:	87 7f       	andi	r24, 0xF7	; 247
    1c22:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=1;
    1c24:	e2 e5       	ldi	r30, 0x52	; 82
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	81 81       	ldd	r24, Z+1	; 0x01
    1c2a:	80 64       	ori	r24, 0x40	; 64
    1c2c:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Reg|=(Timer_Config->PWM_MODE)<<PIN4_ID;
    1c2e:	a2 e5       	ldi	r26, 0x52	; 82
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e2 e5       	ldi	r30, 0x52	; 82
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	82 95       	swap	r24
    1c46:	92 95       	swap	r25
    1c48:	90 7f       	andi	r25, 0xF0	; 240
    1c4a:	98 27       	eor	r25, r24
    1c4c:	80 7f       	andi	r24, 0xF0	; 240
    1c4e:	98 27       	eor	r25, r24
    1c50:	82 2b       	or	r24, r18
    1c52:	11 96       	adiw	r26, 0x01	; 1
    1c54:	8c 93       	st	X, r24
    1c56:	11 97       	sbiw	r26, 0x01	; 1
    1c58:	4d c0       	rjmp	.+154    	; 0x1cf4 <Timer_Init+0x190>
		break;

	case CTC_MODE:
		Timer0_Regs->TCCR0.Bitfield.B7=1;				//FOC0 IS SET FOR NON PWM MODE
    1c5a:	e2 e5       	ldi	r30, 0x52	; 82
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	81 81       	ldd	r24, Z+1	; 0x01
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=1;
    1c64:	e2 e5       	ldi	r30, 0x52	; 82
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	81 81       	ldd	r24, Z+1	; 0x01
    1c6a:	88 60       	ori	r24, 0x08	; 8
    1c6c:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=0;
    1c6e:	e2 e5       	ldi	r30, 0x52	; 82
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	81 81       	ldd	r24, Z+1	; 0x01
    1c74:	8f 7b       	andi	r24, 0xBF	; 191
    1c76:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Reg|=(Timer_Config->NON_PWM_MODE)<<PIN4_ID;
    1c78:	a2 e5       	ldi	r26, 0x52	; 82
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e5       	ldi	r30, 0x52	; 82
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	81 81       	ldd	r24, Z+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	81 81       	ldd	r24, Z+1	; 0x01
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	82 95       	swap	r24
    1c90:	92 95       	swap	r25
    1c92:	90 7f       	andi	r25, 0xF0	; 240
    1c94:	98 27       	eor	r25, r24
    1c96:	80 7f       	andi	r24, 0xF0	; 240
    1c98:	98 27       	eor	r25, r24
    1c9a:	82 2b       	or	r24, r18
    1c9c:	11 96       	adiw	r26, 0x01	; 1
    1c9e:	8c 93       	st	X, r24

		Timer0_Regs->TCNT0.Reg=Timer_Config->VALUE;
    1ca0:	a2 e5       	ldi	r26, 0x52	; 82
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	84 81       	ldd	r24, Z+4	; 0x04
    1caa:	8c 93       	st	X, r24
    1cac:	23 c0       	rjmp	.+70     	; 0x1cf4 <Timer_Init+0x190>

		break;

	case FAST_PWM:
		Timer0_Regs->TCCR0.Bitfield.B7=0;               //FOC0 IS CLEARED FOR PWM MODE
    1cae:	e2 e5       	ldi	r30, 0x52	; 82
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	81 81       	ldd	r24, Z+1	; 0x01
    1cb4:	8f 77       	andi	r24, 0x7F	; 127
    1cb6:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Bitfield.B3=1;
    1cb8:	e2 e5       	ldi	r30, 0x52	; 82
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	81 81       	ldd	r24, Z+1	; 0x01
    1cbe:	88 60       	ori	r24, 0x08	; 8
    1cc0:	81 83       	std	Z+1, r24	; 0x01
		Timer0_Regs->TCCR0.Bitfield.B6=1;
    1cc2:	e2 e5       	ldi	r30, 0x52	; 82
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	80 64       	ori	r24, 0x40	; 64
    1cca:	81 83       	std	Z+1, r24	; 0x01

		Timer0_Regs->TCCR0.Reg|=(Timer_Config->PWM_MODE)<<PIN4_ID;
    1ccc:	a2 e5       	ldi	r26, 0x52	; 82
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e2 e5       	ldi	r30, 0x52	; 82
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	81 81       	ldd	r24, Z+1	; 0x01
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	82 95       	swap	r24
    1ce4:	92 95       	swap	r25
    1ce6:	90 7f       	andi	r25, 0xF0	; 240
    1ce8:	98 27       	eor	r25, r24
    1cea:	80 7f       	andi	r24, 0xF0	; 240
    1cec:	98 27       	eor	r25, r24
    1cee:	82 2b       	or	r24, r18
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	8c 93       	st	X, r24
		//DIO_voidSetPinValue(PORTA,PIN4_ID,LOGIC_HIGH);

		break;
	}
	Timer0_Regs->TCCR0.Reg=((Timer0_Regs->TCCR0.Reg)&0xF8) | ((Timer_Config->PRESCALER) & 0x07);
    1cf4:	a2 e5       	ldi	r26, 0x52	; 82
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e2 e5       	ldi	r30, 0x52	; 82
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	81 81       	ldd	r24, Z+1	; 0x01
    1cfe:	98 2f       	mov	r25, r24
    1d00:	98 7f       	andi	r25, 0xF8	; 248
    1d02:	e9 81       	ldd	r30, Y+1	; 0x01
    1d04:	fa 81       	ldd	r31, Y+2	; 0x02
    1d06:	83 81       	ldd	r24, Z+3	; 0x03
    1d08:	87 70       	andi	r24, 0x07	; 7
    1d0a:	89 2b       	or	r24, r25
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	8c 93       	st	X, r24
    1d10:	11 97       	sbiw	r26, 0x01	; 1
	//DIO_voidSetPinValue(PORTA,PIN6_ID,LOGIC_HIGH);


}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <Timer_Resume>:

void Timer_Resume(TIMER0_CONFIG *Timer_Config)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <Timer_Resume+0x6>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Regs->TCCR0.Reg=((Timer0_Regs->TCCR0.Reg)&0xF8) | ((Timer_Config->PRESCALER) & 0x07);
    1d2e:	a2 e5       	ldi	r26, 0x52	; 82
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e2 e5       	ldi	r30, 0x52	; 82
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	81 81       	ldd	r24, Z+1	; 0x01
    1d38:	98 2f       	mov	r25, r24
    1d3a:	98 7f       	andi	r25, 0xF8	; 248
    1d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d40:	83 81       	ldd	r24, Z+3	; 0x03
    1d42:	87 70       	andi	r24, 0x07	; 7
    1d44:	89 2b       	or	r24, r25
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	8c 93       	st	X, r24
    1d4a:	11 97       	sbiw	r26, 0x01	; 1

}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <Timer_Stop>:

void Timer_Stop(TIMER0_CONFIG *Timer_Config)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <Timer_Stop+0x6>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Regs->TCCR0.Reg &= 0xF8;
    1d64:	a2 e5       	ldi	r26, 0x52	; 82
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e2 e5       	ldi	r30, 0x52	; 82
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	81 81       	ldd	r24, Z+1	; 0x01
    1d6e:	88 7f       	andi	r24, 0xF8	; 248
    1d70:	11 96       	adiw	r26, 0x01	; 1
    1d72:	8c 93       	st	X, r24
    1d74:	11 97       	sbiw	r26, 0x01	; 1

}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <Timer_GetCounts>:

RELOAD_VALUES Timer_GetCounts(TIMER0_CONFIG *Timer_Config)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <Timer_GetCounts+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	Timer_Config->VALUE=Timer0_Regs->TCNT0.Reg;
    1d8e:	e2 e5       	ldi	r30, 0x52	; 82
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	84 83       	std	Z+4, r24	; 0x04
	return Timer_Config->VALUE;
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	84 81       	ldd	r24, Z+4	; 0x04
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <Timer_setDelayTimeMilliSec>:

void Timer_setDelayTimeMilliSec(uint32 time)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <Timer_setDelayTimeMilliSec+0x6>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <Timer_setDelayTimeMilliSec+0x8>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	69 83       	std	Y+1, r22	; 0x01
    1db8:	7a 83       	std	Y+2, r23	; 0x02
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	9c 83       	std	Y+4, r25	; 0x04


}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <EnableInt>:

void EnableInt(TIMER0_CONFIG *Timer_Config,void *ptrfn_timer(void))
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <EnableInt+0x6>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <EnableInt+0x8>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <EnableInt+0xa>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	7c 83       	std	Y+4, r23	; 0x04
    1de0:	6b 83       	std	Y+3, r22	; 0x03
	switch (Timer_Config->TIMER0_MODES)
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3e 83       	std	Y+6, r19	; 0x06
    1dee:	2d 83       	std	Y+5, r18	; 0x05
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	a1 f0       	breq	.+40     	; 0x1e20 <EnableInt+0x54>
    1df8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfc:	22 30       	cpi	r18, 0x02	; 2
    1dfe:	31 05       	cpc	r19, r1
    1e00:	e9 f4       	brne	.+58     	; 0x1e3c <EnableInt+0x70>
	{
	case CTC_MODE:
		Timer0_Regs->TIMSK.Bitfield.B1=1;
    1e02:	e2 e5       	ldi	r30, 0x52	; 82
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	87 81       	ldd	r24, Z+7	; 0x07
    1e08:	82 60       	ori	r24, 0x02	; 2
    1e0a:	87 83       	std	Z+7, r24	; 0x07
		Timer0_Regs->TIFR.Bitfield.B1=1;
    1e0c:	e2 e5       	ldi	r30, 0x52	; 82
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	86 81       	ldd	r24, Z+6	; 0x06
    1e12:	82 60       	ori	r24, 0x02	; 2
    1e14:	86 83       	std	Z+6, r24	; 0x06
		setCallBack(ptrfn_timer);
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <setCallBack>
    1e1e:	0e c0       	rjmp	.+28     	; 0x1e3c <EnableInt+0x70>
		break;
	case NORMAL_MODE:
		Timer0_Regs->TIMSK.Bitfield.B0=1;
    1e20:	e2 e5       	ldi	r30, 0x52	; 82
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	87 81       	ldd	r24, Z+7	; 0x07
    1e26:	81 60       	ori	r24, 0x01	; 1
    1e28:	87 83       	std	Z+7, r24	; 0x07
		Timer0_Regs->TIFR.Bitfield.B0=1;
    1e2a:	e2 e5       	ldi	r30, 0x52	; 82
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	86 81       	ldd	r24, Z+6	; 0x06
    1e30:	81 60       	ori	r24, 0x01	; 1
    1e32:	86 83       	std	Z+6, r24	; 0x06
		setCallBack(ptrfn_timer);
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <setCallBack>

		break;
	}


}
    1e3c:	26 96       	adiw	r28, 0x06	; 6
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <DisableInt>:

void DisableInt(TIMER0_CONFIG *Timer_Config)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <DisableInt+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <DisableInt+0x8>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
	switch (Timer_Config->TIMER0_MODES)
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	80 81       	ld	r24, Z
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	3c 83       	std	Y+4, r19	; 0x04
    1e6a:	2b 83       	std	Y+3, r18	; 0x03
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	59 f0       	breq	.+22     	; 0x1e8a <DisableInt+0x3c>
    1e74:	2b 81       	ldd	r18, Y+3	; 0x03
    1e76:	3c 81       	ldd	r19, Y+4	; 0x04
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	59 f4       	brne	.+22     	; 0x1e94 <DisableInt+0x46>
	{
	case CTC_MODE:
		Timer0_Regs->TIMSK.Bitfield.B1=0;
    1e7e:	e2 e5       	ldi	r30, 0x52	; 82
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	87 81       	ldd	r24, Z+7	; 0x07
    1e84:	8d 7f       	andi	r24, 0xFD	; 253
    1e86:	87 83       	std	Z+7, r24	; 0x07
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <DisableInt+0x46>
		break;
	case NORMAL_MODE:
		Timer0_Regs->TIMSK.Bitfield.B0=0;
    1e8a:	e2 e5       	ldi	r30, 0x52	; 82
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	87 81       	ldd	r24, Z+7	; 0x07
    1e90:	8e 7f       	andi	r24, 0xFE	; 254
    1e92:	87 83       	std	Z+7, r24	; 0x07
		break;
	}
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <setCallBack>:

void setCallBack(void *ptrfn_timer(void))
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <setCallBack+0x6>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01

	ptr_callBack=ptrfn_timer;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	90 93 92 01 	sts	0x0192, r25
    1eb8:	80 93 91 01 	sts	0x0191, r24
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <setFastPWM>:

void setFastPWM(uint8 duty,PWM_MODE_0 TYPE)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	2a 97       	sbiw	r28, 0x0a	; 10
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	6a 83       	std	Y+2, r22	; 0x02
	//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_HIGH);

	/*DONT FORGERT TO SET PIN AS OUTPUT IN APPLICATION */
	if(TYPE==INVERTING_MODE)
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	89 f5       	brne	.+98     	; 0x1f46 <setFastPWM+0x80>
	{
		Timer0_Regs->OCR0.Reg= abs(255-((duty*255)/100));
    1ee4:	82 e5       	ldi	r24, 0x52	; 82
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a 87       	std	Y+10, r25	; 0x0a
    1eea:	89 87       	std	Y+9, r24	; 0x09
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	48 2f       	mov	r20, r24
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	9c 01       	movw	r18, r24
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	c9 01       	movw	r24, r18
    1efc:	96 95       	lsr	r25
    1efe:	98 2f       	mov	r25, r24
    1f00:	88 27       	eor	r24, r24
    1f02:	97 95       	ror	r25
    1f04:	87 95       	ror	r24
    1f06:	82 1b       	sub	r24, r18
    1f08:	93 0b       	sbc	r25, r19
    1f0a:	84 0f       	add	r24, r20
    1f0c:	95 1f       	adc	r25, r21
    1f0e:	24 e6       	ldi	r18, 0x64	; 100
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	b9 01       	movw	r22, r18
    1f14:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__divmodhi4>
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	82 1b       	sub	r24, r18
    1f22:	93 0b       	sbc	r25, r19
    1f24:	98 87       	std	Y+8, r25	; 0x08
    1f26:	8f 83       	std	Y+7, r24	; 0x07
    1f28:	ef 81       	ldd	r30, Y+7	; 0x07
    1f2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f2c:	ff 23       	and	r31, r31
    1f2e:	3c f4       	brge	.+14     	; 0x1f3e <setFastPWM+0x78>
    1f30:	8f 81       	ldd	r24, Y+7	; 0x07
    1f32:	98 85       	ldd	r25, Y+8	; 0x08
    1f34:	90 95       	com	r25
    1f36:	81 95       	neg	r24
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	8f 83       	std	Y+7, r24	; 0x07
    1f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f40:	e9 85       	ldd	r30, Y+9	; 0x09
    1f42:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f44:	82 87       	std	Z+10, r24	; 0x0a
		//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_HIGH);


	}
	 if(TYPE==NON_INVERTING_MODE)
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	69 f5       	brne	.+90     	; 0x1fa6 <setFastPWM+0xe0>
	{
		Timer0_Regs->OCR0.Reg= abs(((duty*255)/100)-1);
    1f4c:	82 e5       	ldi	r24, 0x52	; 82
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	48 2f       	mov	r20, r24
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	c9 01       	movw	r24, r18
    1f64:	96 95       	lsr	r25
    1f66:	98 2f       	mov	r25, r24
    1f68:	88 27       	eor	r24, r24
    1f6a:	97 95       	ror	r25
    1f6c:	87 95       	ror	r24
    1f6e:	82 1b       	sub	r24, r18
    1f70:	93 0b       	sbc	r25, r19
    1f72:	84 0f       	add	r24, r20
    1f74:	95 1f       	adc	r25, r21
    1f76:	24 e6       	ldi	r18, 0x64	; 100
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	b9 01       	movw	r22, r18
    1f7c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__divmodhi4>
    1f80:	cb 01       	movw	r24, r22
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8c:	ff 23       	and	r31, r31
    1f8e:	3c f4       	brge	.+14     	; 0x1f9e <setFastPWM+0xd8>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	90 95       	com	r25
    1f96:	81 95       	neg	r24
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	ed 81       	ldd	r30, Y+5	; 0x05
    1fa2:	fe 81       	ldd	r31, Y+6	; 0x06
    1fa4:	82 87       	std	Z+10, r24	; 0x0a
		//DIO_voidSetPinValue(PORTA,PIN5_ID,LOGIC_HIGH);

	}
}
    1fa6:	2a 96       	adiw	r28, 0x0a	; 10
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <setphaseCorrectPWM>:

void setphaseCorrectPWM(uint8 duty)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <setphaseCorrectPWM+0x6>
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <setphaseCorrectPWM+0x8>
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	/*DONT FORGERT TO SET PIN AS OUTPUT IN APPLICATION */
	Timer0_Regs->OCR0.Reg= abs(((duty*256)/100));
    1fc8:	82 e5       	ldi	r24, 0x52	; 82
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9d 83       	std	Y+5, r25	; 0x05
    1fce:	8c 83       	std	Y+4, r24	; 0x04
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	88 27       	eor	r24, r24
    1fda:	24 e6       	ldi	r18, 0x64	; 100
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	b9 01       	movw	r22, r18
    1fe0:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__divmodhi4>
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9b 83       	std	Y+3, r25	; 0x03
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
    1fea:	ea 81       	ldd	r30, Y+2	; 0x02
    1fec:	fb 81       	ldd	r31, Y+3	; 0x03
    1fee:	ff 23       	and	r31, r31
    1ff0:	3c f4       	brge	.+14     	; 0x2000 <setphaseCorrectPWM+0x48>
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	90 95       	com	r25
    1ff8:	81 95       	neg	r24
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	9b 83       	std	Y+3, r25	; 0x03
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	ec 81       	ldd	r30, Y+4	; 0x04
    2004:	fd 81       	ldd	r31, Y+5	; 0x05
    2006:	82 87       	std	Z+10, r24	; 0x0a
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <__vector_11>:

//ISR(TIMER0_OVF_vect)
void __vector_11 (void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN7_ID);
    2020:	af e5       	ldi	r26, 0x5F	; 95
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	ef e5       	ldi	r30, 0x5F	; 95
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8f 77       	andi	r24, 0x7F	; 127
    202c:	8c 93       	st	X, r24
	Timer0_Regs->TIFR.Bitfield.B0=1;    //clear flag
    202e:	e2 e5       	ldi	r30, 0x52	; 82
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	86 81       	ldd	r24, Z+6	; 0x06
    2034:	81 60       	ori	r24, 0x01	; 1
    2036:	86 83       	std	Z+6, r24	; 0x06
//	if(ptr_callBack != NULL_PTR)
//	{
//
//	}
	(*ptr_callBack)();
    2038:	e0 91 91 01 	lds	r30, 0x0191
    203c:	f0 91 92 01 	lds	r31, 0x0192
    2040:	09 95       	icall

	SET_BIT(SREG,PIN7_ID);
    2042:	af e5       	ldi	r26, 0x5F	; 95
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ef e5       	ldi	r30, 0x5F	; 95
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 68       	ori	r24, 0x80	; 128
    204e:	8c 93       	st	X, r24
}
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <USART_RXC_ISR>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void USART_RXC_ISR(void) __attribute__((signal, used, externally_visible));

void USART_RXC_ISR(void)
{
    2056:	1f 92       	push	r1
    2058:	0f 92       	push	r0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	0f 92       	push	r0
    205e:	11 24       	eor	r1, r1
    2060:	2f 93       	push	r18
    2062:	3f 93       	push	r19
    2064:	4f 93       	push	r20
    2066:	5f 93       	push	r21
    2068:	6f 93       	push	r22
    206a:	7f 93       	push	r23
    206c:	8f 93       	push	r24
    206e:	9f 93       	push	r25
    2070:	af 93       	push	r26
    2072:	bf 93       	push	r27
    2074:	ef 93       	push	r30
    2076:	ff 93       	push	r31
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(UART_regs->UCSRA.Reg,PIN7_ID);
    2080:	a9 e2       	ldi	r26, 0x29	; 41
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e9 e2       	ldi	r30, 0x29	; 41
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	12 96       	adiw	r26, 0x02	; 2
    208e:	8c 93       	st	X, r24

	Uart_CallBack(UART_regs->UDR.Reg);
    2090:	20 91 93 01 	lds	r18, 0x0193
    2094:	30 91 94 01 	lds	r19, 0x0194
    2098:	e9 e2       	ldi	r30, 0x29	; 41
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	83 81       	ldd	r24, Z+3	; 0x03
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	f9 01       	movw	r30, r18
    20a4:	09 95       	icall
}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	ff 91       	pop	r31
    20ac:	ef 91       	pop	r30
    20ae:	bf 91       	pop	r27
    20b0:	af 91       	pop	r26
    20b2:	9f 91       	pop	r25
    20b4:	8f 91       	pop	r24
    20b6:	7f 91       	pop	r23
    20b8:	6f 91       	pop	r22
    20ba:	5f 91       	pop	r21
    20bc:	4f 91       	pop	r20
    20be:	3f 91       	pop	r19
    20c0:	2f 91       	pop	r18
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	0f 90       	pop	r0
    20c8:	1f 90       	pop	r1
    20ca:	18 95       	reti

000020cc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,UART_configType *Config_ptr)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	28 97       	sbiw	r28, 0x08	; 8
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	6b 83       	std	Y+3, r22	; 0x03
    20e2:	7c 83       	std	Y+4, r23	; 0x04
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	58 87       	std	Y+8, r21	; 0x08
    20ea:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    20ec:	1a 82       	std	Y+2, r1	; 0x02
    20ee:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UART_regs->UCSRA.Reg = (1<<PIN1_ID);
    20f0:	e9 e2       	ldi	r30, 0x29	; 41
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	82 83       	std	Z+2, r24	; 0x02
	 * RXEN  = 1 Receiver Enable
	 * XEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UART_regs->UCSRB.Reg = (1<<PIN3_ID) | (1<<PIN4_ID)  ;
    20f8:	e9 e2       	ldi	r30, 0x29	; 41
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	88 e1       	ldi	r24, 0x18	; 24
    20fe:	81 83       	std	Z+1, r24	; 0x01
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_t = (1<<PIN7_ID);
    2100:	e0 e4       	ldi	r30, 0x40	; 64
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 e8       	ldi	r24, 0x80	; 128
    2106:	80 83       	st	Z, r24
	UCSRC_t = (UCSRC_t & 0xCF) | ((Config_ptr -> parity)<<4);
    2108:	a0 e4       	ldi	r26, 0x40	; 64
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e0 e4       	ldi	r30, 0x40	; 64
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	28 2f       	mov	r18, r24
    2114:	2f 7c       	andi	r18, 0xCF	; 207
    2116:	ef 81       	ldd	r30, Y+7	; 0x07
    2118:	f8 85       	ldd	r31, Y+8	; 0x08
    211a:	80 81       	ld	r24, Z
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	82 95       	swap	r24
    2122:	92 95       	swap	r25
    2124:	90 7f       	andi	r25, 0xF0	; 240
    2126:	98 27       	eor	r25, r24
    2128:	80 7f       	andi	r24, 0xF0	; 240
    212a:	98 27       	eor	r25, r24
    212c:	82 2b       	or	r24, r18
    212e:	8c 93       	st	X, r24
	UCSRC_t = (UCSRC_t & 0xF7) | ((Config_ptr -> stop)<<3);
    2130:	a0 e4       	ldi	r26, 0x40	; 64
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e0 e4       	ldi	r30, 0x40	; 64
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	28 2f       	mov	r18, r24
    213c:	27 7f       	andi	r18, 0xF7	; 247
    213e:	ef 81       	ldd	r30, Y+7	; 0x07
    2140:	f8 85       	ldd	r31, Y+8	; 0x08
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	82 2b       	or	r24, r18
    2156:	8c 93       	st	X, r24
	UCSRC_t = (UCSRC_t & 0xF9) | ((Config_ptr -> size)<<1);
    2158:	a0 e4       	ldi	r26, 0x40	; 64
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e0 e4       	ldi	r30, 0x40	; 64
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	28 2f       	mov	r18, r24
    2164:	29 7f       	andi	r18, 0xF9	; 249
    2166:	ef 81       	ldd	r30, Y+7	; 0x07
    2168:	f8 85       	ldd	r31, Y+8	; 0x08
    216a:	81 81       	ldd	r24, Z+1	; 0x01
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	82 2b       	or	r24, r18
    2176:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((8000000 / (baud_rate * 8UL))) - 1);
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	ad 81       	ldd	r26, Y+5	; 0x05
    217e:	be 81       	ldd	r27, Y+6	; 0x06
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	aa 1f       	adc	r26, r26
    2186:	bb 1f       	adc	r27, r27
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	aa 1f       	adc	r26, r26
    218e:	bb 1f       	adc	r27, r27
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	aa 1f       	adc	r26, r26
    2196:	bb 1f       	adc	r27, r27
    2198:	9c 01       	movw	r18, r24
    219a:	ad 01       	movw	r20, r26
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	92 e1       	ldi	r25, 0x12	; 18
    21a0:	aa e7       	ldi	r26, 0x7A	; 122
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 8f 21 	call	0x431e	; 0x431e <__udivmodsi4>
    21ac:	da 01       	movw	r26, r20
    21ae:	c9 01       	movw	r24, r18
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_t = ubrr_value>>8;
    21b6:	e0 e4       	ldi	r30, 0x40	; 64
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	89 2f       	mov	r24, r25
    21c0:	99 27       	eor	r25, r25
    21c2:	80 83       	st	Z, r24
	UART_regs->UBRRL.Reg = ubrr_value;
    21c4:	e9 e2       	ldi	r30, 0x29	; 41
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	80 83       	st	Z, r24
}
    21cc:	28 96       	adiw	r28, 0x08	; 8
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte( uint8 data)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	0f 92       	push	r0
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	89 83       	std	Y+1, r24	; 0x01
//	 * the UDR register is not empty now
//	 */
//	UART_regs->UDR.Reg = data;

	/************************* Another Method *************************/
	UART_regs->UDR.Reg = data;
    21ea:	e9 e2       	ldi	r30, 0x29	; 41
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	83 83       	std	Z+3, r24	; 0x03
	while(BIT_IS_CLEAR(UART_regs->UCSRA.Reg,PIN6_ID)){} // Wait until the transmission is complete TXC = 1
    21f2:	e9 e2       	ldi	r30, 0x29	; 41
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	80 74       	andi	r24, 0x40	; 64
    21fe:	90 70       	andi	r25, 0x00	; 0
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	b9 f3       	breq	.-18     	; 0x21f2 <UART_sendByte+0x14>
	SET_BIT(UART_regs->UCSRA.Reg,PIN6_ID); // Clear the TXC flag
    2204:	a9 e2       	ldi	r26, 0x29	; 41
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e9 e2       	ldi	r30, 0x29	; 41
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	80 64       	ori	r24, 0x40	; 64
    2210:	12 96       	adiw	r26, 0x02	; 2
    2212:	8c 93       	st	X, r24
    2214:	12 97       	sbiw	r26, 0x02	; 2
	/*******************************************************************/
}
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <UART_recieveByte_Polling>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte_Polling(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UART_regs->UCSRA.Reg,PIN7_ID)){}
    2226:	e9 e2       	ldi	r30, 0x29	; 41
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	88 23       	and	r24, r24
    222e:	dc f7       	brge	.-10     	; 0x2226 <UART_recieveByte_Polling+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UART_regs->UDR.Reg;
    2230:	e9 e2       	ldi	r30, 0x29	; 41
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	83 81       	ldd	r24, Z+3	; 0x03
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <UART_recieveByte_NON_BLOCK>:
uint8 UART_recieveByte_NON_BLOCK()
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	0f 92       	push	r0
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62

	if(UART_regs->UCSRA.Bitfield.B7)
    2246:	e9 e2       	ldi	r30, 0x29	; 41
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	80 78       	andi	r24, 0x80	; 128
    224e:	88 23       	and	r24, r24
    2250:	71 f0       	breq	.+28     	; 0x226e <UART_recieveByte_NON_BLOCK+0x32>
	{
		SET_BIT(UART_regs->UCSRA.Reg,PIN7_ID);
    2252:	a9 e2       	ldi	r26, 0x29	; 41
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e9 e2       	ldi	r30, 0x29	; 41
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	80 68       	ori	r24, 0x80	; 128
    225e:	12 96       	adiw	r26, 0x02	; 2
    2260:	8c 93       	st	X, r24
    2262:	12 97       	sbiw	r26, 0x02	; 2
		return UART_regs->UDR.Reg;   /*Read the received data from the Rx buffer (UDR)*/
    2264:	e9 e2       	ldi	r30, 0x29	; 41
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	83 81       	ldd	r24, Z+3	; 0x03
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <UART_recieveByte_NON_BLOCK+0x34>

	}
	else
	{
		return 0;
    226e:	19 82       	std	Y+1, r1	; 0x01
    2270:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <UART_sendString+0x6>
    2280:	0f 92       	push	r0
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	9b 83       	std	Y+3, r25	; 0x03
    2288:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    228a:	19 82       	std	Y+1, r1	; 0x01
    228c:	0e c0       	rjmp	.+28     	; 0x22aa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	fc 01       	movw	r30, r24
    229a:	e2 0f       	add	r30, r18
    229c:	f3 1f       	adc	r31, r19
    229e:	80 81       	ld	r24, Z
    22a0:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_sendByte>
		i++;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	fc 01       	movw	r30, r24
    22b6:	e2 0f       	add	r30, r18
    22b8:	f3 1f       	adc	r31, r19
    22ba:	80 81       	ld	r24, Z
    22bc:	88 23       	and	r24, r24
    22be:	39 f7       	brne	.-50     	; 0x228e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <UART_receiveString_Polling>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString_Polling(uint8 *Str)
{
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <UART_receiveString_Polling+0xa>
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	9b 83       	std	Y+3, r25	; 0x03
    22de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22e0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte_Polling();
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	8c 01       	movw	r16, r24
    22ee:	02 0f       	add	r16, r18
    22f0:	13 1f       	adc	r17, r19
    22f2:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_recieveByte_Polling>
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 83       	st	Z, r24
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <UART_receiveString_Polling+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte_Polling();
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	8c 01       	movw	r16, r24
    230e:	02 0f       	add	r16, r18
    2310:	13 1f       	adc	r17, r19
    2312:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_recieveByte_Polling>
    2316:	f8 01       	movw	r30, r16
    2318:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte_Polling();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	80 81       	ld	r24, Z
    232c:	83 32       	cpi	r24, 0x23	; 35
    232e:	31 f7       	brne	.-52     	; 0x22fc <UART_receiveString_Polling+0x30>
		i++;
		Str[i] = UART_recieveByte_Polling();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	10 82       	st	Z, r1
}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <Set_CallBack>:


void Set_CallBack(void(*fnptr)(void))
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <Set_CallBack+0x6>
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
	Uart_CallBack = fnptr;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	90 93 94 01 	sts	0x0194, r25
    2368:	80 93 93 01 	sts	0x0193, r24

}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <UART_receiveByteAsynchCallBack>:


void UART_receiveByteAsynchCallBack(void)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_regs->UCSRB.Reg,PIN7_ID);
    237e:	a9 e2       	ldi	r26, 0x29	; 41
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e9 e2       	ldi	r30, 0x29	; 41
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	81 81       	ldd	r24, Z+1	; 0x01
    2388:	80 68       	ori	r24, 0x80	; 128
    238a:	11 96       	adiw	r26, 0x01	; 1
    238c:	8c 93       	st	X, r24
    238e:	11 97       	sbiw	r26, 0x01	; 1

}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <Button_Init>:

#include "Button.h"
#include <util/delay.h>

void Button_Init(Port_Def* GPIO,pins pin)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <Button_Init+0x6>
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(GPIO, pin, INPUT);
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	6b 81       	ldd	r22, Y+3	; 0x03
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <Single_press>:



Key_status Single_press(Port_Def* GPIO, pins pin)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	62 97       	sbiw	r28, 0x12	; 18
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	98 8b       	std	Y+16, r25	; 0x10
    23d6:	8f 87       	std	Y+15, r24	; 0x0f
    23d8:	69 8b       	std	Y+17, r22	; 0x11
	DIO_voidSetPinDirection(GPIO, pin, INPUT);
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	98 89       	ldd	r25, Y+16	; 0x10
    23de:	69 89       	ldd	r22, Y+17	; 0x11
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	static uint8 flag=0 ;
	if(!DIO_voidGetPinValue(GPIO, pin))
    23e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e8:	98 89       	ldd	r25, Y+16	; 0x10
    23ea:	69 89       	ldd	r22, Y+17	; 0x11
    23ec:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_voidGetPinValue>
    23f0:	88 23       	and	r24, r24
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <Single_press+0x36>
    23f4:	83 c0       	rjmp	.+262    	; 0x24fc <Single_press+0x13c>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	a8 e4       	ldi	r26, 0x48	; 72
    23fc:	b2 e4       	ldi	r27, 0x42	; 66
    23fe:	8b 87       	std	Y+11, r24	; 0x0b
    2400:	9c 87       	std	Y+12, r25	; 0x0c
    2402:	ad 87       	std	Y+13, r26	; 0x0d
    2404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a e7       	ldi	r20, 0x7A	; 122
    2414:	55 e4       	ldi	r21, 0x45	; 69
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8f 83       	std	Y+7, r24	; 0x07
    2420:	98 87       	std	Y+8, r25	; 0x08
    2422:	a9 87       	std	Y+9, r26	; 0x09
    2424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <Single_press+0x88>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <Single_press+0x106>
	else if (__tmp > 65535)
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <Single_press+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	6b 85       	ldd	r22, Y+11	; 0x0b
    2462:	7c 85       	ldd	r23, Y+12	; 0x0c
    2464:	8d 85       	ldd	r24, Y+13	; 0x0d
    2466:	9e 85       	ldd	r25, Y+14	; 0x0e
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <Single_press+0xe8>
    248a:	80 e9       	ldi	r24, 0x90	; 144
    248c:	91 e0       	ldi	r25, 0x01	; 1
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <Single_press+0xd6>
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <Single_press+0xca>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <Single_press+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <Single_press+0x112>
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(50);
		if(!DIO_voidGetPinValue(GPIO, pin))
    24da:	8f 85       	ldd	r24, Y+15	; 0x0f
    24dc:	98 89       	ldd	r25, Y+16	; 0x10
    24de:	69 89       	ldd	r22, Y+17	; 0x11
    24e0:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_voidGetPinValue>
    24e4:	88 23       	and	r24, r24
    24e6:	61 f4       	brne	.+24     	; 0x2500 <Single_press+0x140>
		{
			if(flag == 0)
    24e8:	80 91 95 01 	lds	r24, 0x0195
    24ec:	88 23       	and	r24, r24
    24ee:	41 f4       	brne	.+16     	; 0x2500 <Single_press+0x140>
			{
				flag =1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 95 01 	sts	0x0195, r24
				return pressed;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	8a 8b       	std	Y+18, r24	; 0x12
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <Single_press+0x142>
		}

	}
	else
	{
		flag = 0;
    24fc:	10 92 95 01 	sts	0x0195, r1
	}

	return released;
    2500:	1a 8a       	std	Y+18, r1	; 0x12
    2502:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2504:	62 96       	adiw	r28, 0x12	; 18
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <EEPROM_readByte>:
 */
#include "EEPROM.h"
#include "TWI.h"

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	00 d0       	rcall	.+0      	; 0x251c <EEPROM_readByte+0x6>
    251c:	00 d0       	rcall	.+0      	; 0x251e <EEPROM_readByte+0x8>
    251e:	00 d0       	rcall	.+0      	; 0x2520 <EEPROM_readByte+0xa>
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	9b 83       	std	Y+3, r25	; 0x03
    2526:	8a 83       	std	Y+2, r24	; 0x02
    2528:	7d 83       	std	Y+5, r23	; 0x05
    252a:	6c 83       	std	Y+4, r22	; 0x04
	TWI_ConfigType obj;
	obj.prescalar=F_CPU64;
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	89 83       	std	Y+1, r24	; 0x01
	/* Send the Start Bit */
	TWI_init(&obj);
    2530:	ce 01       	movw	r24, r28
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TWI_init>
    if (TWI_getStatus() != TWI_START)
    2538:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    253c:	88 30       	cpi	r24, 0x08	; 8
    253e:	11 f0       	breq	.+4      	; 0x2544 <EEPROM_readByte+0x2e>
        return ERROR;
    2540:	1e 82       	std	Y+6, r1	; 0x06
    2542:	44 c0       	rjmp	.+136    	; 0x25cc <EEPROM_readByte+0xb6>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_sendByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	80 70       	andi	r24, 0x00	; 0
    254a:	97 70       	andi	r25, 0x07	; 7
    254c:	88 0f       	add	r24, r24
    254e:	89 2f       	mov	r24, r25
    2550:	88 1f       	adc	r24, r24
    2552:	99 0b       	sbc	r25, r25
    2554:	91 95       	neg	r25
    2556:	80 6a       	ori	r24, 0xA0	; 160
    2558:	0e 94 66 0d 	call	0x1acc	; 0x1acc <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    255c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    2560:	88 31       	cpi	r24, 0x18	; 24
    2562:	11 f0       	breq	.+4      	; 0x2568 <EEPROM_readByte+0x52>
        return ERROR;
    2564:	1e 82       	std	Y+6, r1	; 0x06
    2566:	32 c0       	rjmp	.+100    	; 0x25cc <EEPROM_readByte+0xb6>

    /* Send the required memory location address */
    TWI_sendByte((uint8)(u16addr));
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    256e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    2572:	88 32       	cpi	r24, 0x28	; 40
    2574:	11 f0       	breq	.+4      	; 0x257a <EEPROM_readByte+0x64>
        return ERROR;
    2576:	1e 82       	std	Y+6, r1	; 0x06
    2578:	29 c0       	rjmp	.+82     	; 0x25cc <EEPROM_readByte+0xb6>

    /* Send the Repeated Start Bit */
    TWI_sendStart();
    257a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <TWI_sendStart>
    if (TWI_getStatus() != TWI_REP_START)
    257e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    2582:	80 31       	cpi	r24, 0x10	; 16
    2584:	11 f0       	breq	.+4      	; 0x258a <EEPROM_readByte+0x74>
        return ERROR;
    2586:	1e 82       	std	Y+6, r1	; 0x06
    2588:	21 c0       	rjmp	.+66     	; 0x25cc <EEPROM_readByte+0xb6>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_sendByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	80 70       	andi	r24, 0x00	; 0
    2590:	97 70       	andi	r25, 0x07	; 7
    2592:	88 0f       	add	r24, r24
    2594:	89 2f       	mov	r24, r25
    2596:	88 1f       	adc	r24, r24
    2598:	99 0b       	sbc	r25, r25
    259a:	91 95       	neg	r25
    259c:	81 6a       	ori	r24, 0xA1	; 161
    259e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    25a2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    25a6:	80 34       	cpi	r24, 0x40	; 64
    25a8:	11 f0       	breq	.+4      	; 0x25ae <EEPROM_readByte+0x98>
        return ERROR;
    25aa:	1e 82       	std	Y+6, r1	; 0x06
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <EEPROM_readByte+0xb6>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_receiveByte_NoACK();
    25ae:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TWI_receiveByte_NoACK>
    25b2:	ec 81       	ldd	r30, Y+4	; 0x04
    25b4:	fd 81       	ldd	r31, Y+5	; 0x05
    25b6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NoACK)
    25b8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    25bc:	88 35       	cpi	r24, 0x58	; 88
    25be:	11 f0       	breq	.+4      	; 0x25c4 <EEPROM_readByte+0xae>
        return ERROR;
    25c0:	1e 82       	std	Y+6, r1	; 0x06
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <EEPROM_readByte+0xb6>

    /* Send the Stop Bit */
    TWI_sendStop();
    25c4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <TWI_sendStop>

    return SUCCESS;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	8e 83       	std	Y+6, r24	; 0x06
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25ce:	26 96       	adiw	r28, 0x06	; 6
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <EEPROM_writeByte+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <EEPROM_writeByte+0x8>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_sendStart();
    25f2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <TWI_sendStart>
    if (TWI_getStatus() != TWI_START)
    25f6:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    25fa:	88 30       	cpi	r24, 0x08	; 8
    25fc:	11 f0       	breq	.+4      	; 0x2602 <EEPROM_writeByte+0x22>
        return ERROR;
    25fe:	1c 82       	std	Y+4, r1	; 0x04
    2600:	28 c0       	rjmp	.+80     	; 0x2652 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_sendByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	80 70       	andi	r24, 0x00	; 0
    2608:	97 70       	andi	r25, 0x07	; 7
    260a:	88 0f       	add	r24, r24
    260c:	89 2f       	mov	r24, r25
    260e:	88 1f       	adc	r24, r24
    2610:	99 0b       	sbc	r25, r25
    2612:	91 95       	neg	r25
    2614:	80 6a       	ori	r24, 0xA0	; 160
    2616:	0e 94 66 0d 	call	0x1acc	; 0x1acc <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    261a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    261e:	88 31       	cpi	r24, 0x18	; 24
    2620:	11 f0       	breq	.+4      	; 0x2626 <EEPROM_writeByte+0x46>
        return ERROR;
    2622:	1c 82       	std	Y+4, r1	; 0x04
    2624:	16 c0       	rjmp	.+44     	; 0x2652 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_sendByte((uint8)(u16addr));
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	0e 94 66 0d 	call	0x1acc	; 0x1acc <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    262c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    2630:	88 32       	cpi	r24, 0x28	; 40
    2632:	11 f0       	breq	.+4      	; 0x2638 <EEPROM_writeByte+0x58>
        return ERROR;
    2634:	1c 82       	std	Y+4, r1	; 0x04
    2636:	0d c0       	rjmp	.+26     	; 0x2652 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_sendByte(u8data);
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <TWI_sendByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    263e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TWI_getStatus>
    2642:	88 32       	cpi	r24, 0x28	; 40
    2644:	11 f0       	breq	.+4      	; 0x264a <EEPROM_writeByte+0x6a>
        return ERROR;
    2646:	1c 82       	std	Y+4, r1	; 0x04
    2648:	04 c0       	rjmp	.+8      	; 0x2652 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_sendStop();
    264a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <TWI_sendStop>

    return SUCCESS;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	8c 83       	std	Y+4, r24	; 0x04
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <KEYPAD_INIT>:
		{{'1','2','3','+'},	//keypad layout design for calculator app
		{'4','5','6','-'},
		{'7','8','9','*'},
		{'0','=','c','/' } };
void KEYPAD_INIT()
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
	/* do nothing */
	DIO_voidSetPinDirection(COL_PORT, C1_PIN, INPUT);
    266a:	80 e3       	ldi	r24, 0x30	; 48
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	67 e0       	ldi	r22, 0x07	; 7
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C2_PIN, INPUT);
    2676:	80 e3       	ldi	r24, 0x30	; 48
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	66 e0       	ldi	r22, 0x06	; 6
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C3_PIN, INPUT);
    2682:	80 e3       	ldi	r24, 0x30	; 48
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	65 e0       	ldi	r22, 0x05	; 5
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(COL_PORT, C4_PIN, INPUT);
    268e:	80 e3       	ldi	r24, 0x30	; 48
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	63 e0       	ldi	r22, 0x03	; 3
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>


	DIO_voidSetPinDirection(ROW_PORT, R4_PIN, OUTPUT);
    269a:	83 e3       	ldi	r24, 0x33	; 51
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	62 e0       	ldi	r22, 0x02	; 2
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R3_PIN, OUTPUT);
    26a6:	83 e3       	ldi	r24, 0x33	; 51
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	63 e0       	ldi	r22, 0x03	; 3
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R2_PIN, OUTPUT);
    26b2:	83 e3       	ldi	r24, 0x33	; 51
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	64 e0       	ldi	r22, 0x04	; 4
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ROW_PORT, R1_PIN, OUTPUT);
    26be:	83 e3       	ldi	r24, 0x33	; 51
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	65 e0       	ldi	r22, 0x05	; 5
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>




}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <KEYPAD_Get_Pressed_Key>:


uint8_t KEYPAD_Get_Pressed_Key(void)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	af 97       	sbiw	r28, 0x2f	; 47
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t  i,j;
	uint8_t rows[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    26e4:	85 e0       	ldi	r24, 0x05	; 5
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
    26e8:	84 e0       	ldi	r24, 0x04	; 4
    26ea:	8c 8b       	std	Y+20, r24	; 0x14
    26ec:	83 e0       	ldi	r24, 0x03	; 3
    26ee:	8d 8b       	std	Y+21, r24	; 0x15
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	8e 8b       	std	Y+22, r24	; 0x16
	uint8_t cols[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    26f4:	87 e0       	ldi	r24, 0x07	; 7
    26f6:	8f 8b       	std	Y+23, r24	; 0x17
    26f8:	86 e0       	ldi	r24, 0x06	; 6
    26fa:	88 8f       	std	Y+24, r24	; 0x18
    26fc:	85 e0       	ldi	r24, 0x05	; 5
    26fe:	89 8f       	std	Y+25, r24	; 0x19
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t KEYPAD_ARR[4][4] = KEYPAD;
    2704:	ce 01       	movw	r24, r28
    2706:	4b 96       	adiw	r24, 0x1b	; 27
    2708:	9c a7       	std	Y+44, r25	; 0x2c
    270a:	8b a7       	std	Y+43, r24	; 0x2b
    270c:	ee e7       	ldi	r30, 0x7E	; 126
    270e:	f1 e0       	ldi	r31, 0x01	; 1
    2710:	fe a7       	std	Y+46, r31	; 0x2e
    2712:	ed a7       	std	Y+45, r30	; 0x2d
    2714:	f0 e1       	ldi	r31, 0x10	; 16
    2716:	ff a7       	std	Y+47, r31	; 0x2f
    2718:	ed a5       	ldd	r30, Y+45	; 0x2d
    271a:	fe a5       	ldd	r31, Y+46	; 0x2e
    271c:	00 80       	ld	r0, Z
    271e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2720:	9e a5       	ldd	r25, Y+46	; 0x2e
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	9e a7       	std	Y+46, r25	; 0x2e
    2726:	8d a7       	std	Y+45, r24	; 0x2d
    2728:	eb a5       	ldd	r30, Y+43	; 0x2b
    272a:	fc a5       	ldd	r31, Y+44	; 0x2c
    272c:	00 82       	st	Z, r0
    272e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2730:	9c a5       	ldd	r25, Y+44	; 0x2c
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	9c a7       	std	Y+44, r25	; 0x2c
    2736:	8b a7       	std	Y+43, r24	; 0x2b
    2738:	9f a5       	ldd	r25, Y+47	; 0x2f
    273a:	91 50       	subi	r25, 0x01	; 1
    273c:	9f a7       	std	Y+47, r25	; 0x2f
    273e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2740:	ee 23       	and	r30, r30
    2742:	51 f7       	brne	.-44     	; 0x2718 <KEYPAD_Get_Pressed_Key+0x48>
	uint8_t key ;

	uint8_t flag;
	while(1)
	{
		for(i = 0; i<=4; i++)
    2744:	1a 8a       	std	Y+18, r1	; 0x12
    2746:	cb c0       	rjmp	.+406    	; 0x28de <KEYPAD_Get_Pressed_Key+0x20e>
		{
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_LOW);
    2748:	8a 89       	ldd	r24, Y+18	; 0x12
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	ce 01       	movw	r24, r28
    2750:	43 96       	adiw	r24, 0x13	; 19
    2752:	fc 01       	movw	r30, r24
    2754:	e2 0f       	add	r30, r18
    2756:	f3 1f       	adc	r31, r19
    2758:	20 81       	ld	r18, Z
    275a:	83 e3       	ldi	r24, 0x33	; 51
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	62 2f       	mov	r22, r18
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>

			for(j = 0; j<=4; j++)
    2766:	19 8a       	std	Y+17, r1	; 0x11
    2768:	33 c0       	rjmp	.+102    	; 0x27d0 <KEYPAD_Get_Pressed_Key+0x100>
			{
				flag = Single_press(COL_PORT, cols[j]);
    276a:	89 89       	ldd	r24, Y+17	; 0x11
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	ce 01       	movw	r24, r28
    2772:	47 96       	adiw	r24, 0x17	; 23
    2774:	fc 01       	movw	r30, r24
    2776:	e2 0f       	add	r30, r18
    2778:	f3 1f       	adc	r31, r19
    277a:	20 81       	ld	r18, Z
    277c:	80 e3       	ldi	r24, 0x30	; 48
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	62 2f       	mov	r22, r18
    2782:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <Single_press>
    2786:	8f 87       	std	Y+15, r24	; 0x0f
				if(flag == pressed)
    2788:	8f 85       	ldd	r24, Y+15	; 0x0f
    278a:	81 30       	cpi	r24, 0x01	; 1
    278c:	f1 f4       	brne	.+60     	; 0x27ca <KEYPAD_Get_Pressed_Key+0xfa>
				{
					key = KEYPAD_ARR[i][j];
    278e:	8a 89       	ldd	r24, Y+18	; 0x12
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	89 89       	ldd	r24, Y+17	; 0x11
    2796:	48 2f       	mov	r20, r24
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	ce 01       	movw	r24, r28
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	84 0f       	add	r24, r20
    27ac:	95 1f       	adc	r25, r21
    27ae:	fc 01       	movw	r30, r24
    27b0:	7a 96       	adiw	r30, 0x1a	; 26
    27b2:	80 81       	ld	r24, Z
    27b4:	88 8b       	std	Y+16, r24	; 0x10
					return key;
    27b6:	88 89       	ldd	r24, Y+16	; 0x10
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_HIGH);
			_delay_ms(10);

		}
	}
}
    27b8:	af 96       	adiw	r28, 0x2f	; 47
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret
	{
		for(i = 0; i<=4; i++)
		{
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_LOW);

			for(j = 0; j<=4; j++)
    27ca:	89 89       	ldd	r24, Y+17	; 0x11
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	89 8b       	std	Y+17, r24	; 0x11
    27d0:	89 89       	ldd	r24, Y+17	; 0x11
    27d2:	85 30       	cpi	r24, 0x05	; 5
    27d4:	50 f2       	brcs	.-108    	; 0x276a <KEYPAD_Get_Pressed_Key+0x9a>
					return key;

				}

			}
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOGIC_HIGH);
    27d6:	8a 89       	ldd	r24, Y+18	; 0x12
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	ce 01       	movw	r24, r28
    27de:	43 96       	adiw	r24, 0x13	; 19
    27e0:	fc 01       	movw	r30, r24
    27e2:	e2 0f       	add	r30, r18
    27e4:	f3 1f       	adc	r31, r19
    27e6:	20 81       	ld	r18, Z
    27e8:	83 e3       	ldi	r24, 0x33	; 51
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	62 2f       	mov	r22, r18
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e2       	ldi	r26, 0x20	; 32
    27fa:	b1 e4       	ldi	r27, 0x41	; 65
    27fc:	8b 87       	std	Y+11, r24	; 0x0b
    27fe:	9c 87       	std	Y+12, r25	; 0x0c
    2800:	ad 87       	std	Y+13, r26	; 0x0d
    2802:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	55 e4       	ldi	r21, 0x45	; 69
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8f 83       	std	Y+7, r24	; 0x07
    281e:	98 87       	std	Y+8, r25	; 0x08
    2820:	a9 87       	std	Y+9, r26	; 0x09
    2822:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <KEYPAD_Get_Pressed_Key+0x176>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <KEYPAD_Get_Pressed_Key+0x1f4>
	else if (__tmp > 65535)
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	4c f5       	brge	.+82     	; 0x28b0 <KEYPAD_Get_Pressed_Key+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2860:	7c 85       	ldd	r23, Y+12	; 0x0c
    2862:	8d 85       	ldd	r24, Y+13	; 0x0d
    2864:	9e 85       	ldd	r25, Y+14	; 0x0e
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	0f c0       	rjmp	.+30     	; 0x28a6 <KEYPAD_Get_Pressed_Key+0x1d6>
    2888:	80 e9       	ldi	r24, 0x90	; 144
    288a:	91 e0       	ldi	r25, 0x01	; 1
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <KEYPAD_Get_Pressed_Key+0x1c4>
    2898:	9c 83       	std	Y+4, r25	; 0x04
    289a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	8d 81       	ldd	r24, Y+5	; 0x05
    289e:	9e 81       	ldd	r25, Y+6	; 0x06
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	69 f7       	brne	.-38     	; 0x2888 <KEYPAD_Get_Pressed_Key+0x1b8>
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <KEYPAD_Get_Pressed_Key+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <KEYPAD_Get_Pressed_Key+0x200>
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t key ;

	uint8_t flag;
	while(1)
	{
		for(i = 0; i<=4; i++)
    28d8:	8a 89       	ldd	r24, Y+18	; 0x12
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	8a 8b       	std	Y+18, r24	; 0x12
    28de:	8a 89       	ldd	r24, Y+18	; 0x12
    28e0:	85 30       	cpi	r24, 0x05	; 5
    28e2:	08 f4       	brcc	.+2      	; 0x28e6 <KEYPAD_Get_Pressed_Key+0x216>
    28e4:	31 cf       	rjmp	.-414    	; 0x2748 <KEYPAD_Get_Pressed_Key+0x78>
    28e6:	2e cf       	rjmp	.-420    	; 0x2744 <KEYPAD_Get_Pressed_Key+0x74>

000028e8 <H_LCD_void_Init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void H_LCD_void_Init(void)
{
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	ce 55       	subi	r28, 0x5E	; 94
    28f6:	d0 40       	sbci	r29, 0x00	; 0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS, and E pins as output pins */
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT);
    2902:	89 e3       	ldi	r24, 0x39	; 57
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	63 e0       	ldi	r22, 0x03	; 3
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>

	//DIO_voidSetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT);
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT);
    290e:	89 e3       	ldi	r24, 0x39	; 57
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	62 e0       	ldi	r22, 0x02	; 2
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>

	/* Configure 4 pins in the data port as output pins */
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D4_PIN,OUTPUT);
    291a:	86 e3       	ldi	r24, 0x36	; 54
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D5_PIN,OUTPUT);
    2926:	86 e3       	ldi	r24, 0x36	; 54
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D6_PIN,OUTPUT);
    2932:	86 e3       	ldi	r24, 0x36	; 54
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	62 e0       	ldi	r22, 0x02	; 2
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,LCD_D7_PIN,OUTPUT);
    293e:	86 e3       	ldi	r24, 0x36	; 54
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	64 e0       	ldi	r22, 0x04	; 4
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
    294a:	fe 01       	movw	r30, r28
    294c:	e5 5a       	subi	r30, 0xA5	; 165
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a8 e4       	ldi	r26, 0x48	; 72
    2956:	b2 e4       	ldi	r27, 0x42	; 66
    2958:	80 83       	st	Z, r24
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	a2 83       	std	Z+2, r26	; 0x02
    295e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	8e 01       	movw	r16, r28
    2962:	09 5a       	subi	r16, 0xA9	; 169
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e5 5a       	subi	r30, 0xA5	; 165
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	55 e4       	ldi	r21, 0x45	; 69
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	f8 01       	movw	r30, r16
    2986:	80 83       	st	Z, r24
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	a2 83       	std	Z+2, r26	; 0x02
    298c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    298e:	fe 01       	movw	r30, r28
    2990:	e9 5a       	subi	r30, 0xA9	; 169
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	44 f4       	brge	.+16     	; 0x29bc <H_LCD_void_Init+0xd4>
		__ticks = 1;
    29ac:	fe 01       	movw	r30, r28
    29ae:	eb 5a       	subi	r30, 0xAB	; 171
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	64 c0       	rjmp	.+200    	; 0x2a84 <H_LCD_void_Init+0x19c>
	else if (__tmp > 65535)
    29bc:	fe 01       	movw	r30, r28
    29be:	e9 5a       	subi	r30, 0xA9	; 169
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	0c f0       	brlt	.+2      	; 0x29dc <H_LCD_void_Init+0xf4>
    29da:	43 c0       	rjmp	.+134    	; 0x2a62 <H_LCD_void_Init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29dc:	fe 01       	movw	r30, r28
    29de:	e5 5a       	subi	r30, 0xA5	; 165
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8e 01       	movw	r16, r28
    29fc:	0b 5a       	subi	r16, 0xAB	; 171
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	1f c0       	rjmp	.+62     	; 0x2a52 <H_LCD_void_Init+0x16a>
    2a14:	fe 01       	movw	r30, r28
    2a16:	ed 5a       	subi	r30, 0xAD	; 173
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 e9       	ldi	r24, 0x90	; 144
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	ed 5a       	subi	r30, 0xAD	; 173
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <H_LCD_void_Init+0x144>
    2a30:	fe 01       	movw	r30, r28
    2a32:	ed 5a       	subi	r30, 0xAD	; 173
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	de 01       	movw	r26, r28
    2a3c:	ab 5a       	subi	r26, 0xAB	; 171
    2a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a40:	fe 01       	movw	r30, r28
    2a42:	eb 5a       	subi	r30, 0xAB	; 171
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	9c 93       	st	X, r25
    2a50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a52:	fe 01       	movw	r30, r28
    2a54:	eb 5a       	subi	r30, 0xAB	; 171
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	d1 f6       	brne	.-76     	; 0x2a14 <H_LCD_void_Init+0x12c>
    2a60:	27 c0       	rjmp	.+78     	; 0x2ab0 <H_LCD_void_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	8e 01       	movw	r16, r28
    2a64:	0b 5a       	subi	r16, 0xAB	; 171
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e9 5a       	subi	r30, 0xA9	; 169
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	f8 01       	movw	r30, r16
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
    2a84:	de 01       	movw	r26, r28
    2a86:	af 5a       	subi	r26, 0xAF	; 175
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	eb 5a       	subi	r30, 0xAB	; 171
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	8d 93       	st	X+, r24
    2a96:	9c 93       	st	X, r25
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ef 5a       	subi	r30, 0xAF	; 175
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	91 81       	ldd	r25, Z+1	; 0x01
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <H_LCD_void_Init+0x1ba>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ef 5a       	subi	r30, 0xAF	; 175
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	91 83       	std	Z+1, r25	; 0x01
    2aae:	80 83       	st	Z, r24

#if (LCD_DATA_BITS_MODE == 4)
	_delay_ms(50);

	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2ab0:	89 e3       	ldi	r24, 0x39	; 57
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	63 e0       	ldi	r22, 0x03	; 3
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN0_ID,LOGIC_LOW);
    2abc:	86 e3       	ldi	r24, 0x36	; 54
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN1_ID,LOGIC_HIGH);
    2ac8:	86 e3       	ldi	r24, 0x36	; 54
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN2_ID,LOGIC_LOW);
    2ad4:	86 e3       	ldi	r24, 0x36	; 54
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	62 e0       	ldi	r22, 0x02	; 2
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN4_ID,LOGIC_LOW);
    2ae0:	86 e3       	ldi	r24, 0x36	; 54
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	64 e0       	ldi	r22, 0x04	; 4
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    2aec:	fe 01       	movw	r30, r28
    2aee:	e3 5b       	subi	r30, 0xB3	; 179
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a0 e8       	ldi	r26, 0x80	; 128
    2af8:	bf e3       	ldi	r27, 0x3F	; 63
    2afa:	80 83       	st	Z, r24
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	a2 83       	std	Z+2, r26	; 0x02
    2b00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b02:	8e 01       	movw	r16, r28
    2b04:	07 5b       	subi	r16, 0xB7	; 183
    2b06:	1f 4f       	sbci	r17, 0xFF	; 255
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e3 5b       	subi	r30, 0xB3	; 179
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4a e7       	ldi	r20, 0x7A	; 122
    2b1c:	55 e4       	ldi	r21, 0x45	; 69
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	80 83       	st	Z, r24
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	a2 83       	std	Z+2, r26	; 0x02
    2b2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b30:	fe 01       	movw	r30, r28
    2b32:	e7 5b       	subi	r30, 0xB7	; 183
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	44 f4       	brge	.+16     	; 0x2b5e <H_LCD_void_Init+0x276>
		__ticks = 1;
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e9 5b       	subi	r30, 0xB9	; 185
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	64 c0       	rjmp	.+200    	; 0x2c26 <H_LCD_void_Init+0x33e>
	else if (__tmp > 65535)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e7 5b       	subi	r30, 0xB7	; 183
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	0c f0       	brlt	.+2      	; 0x2b7e <H_LCD_void_Init+0x296>
    2b7c:	43 c0       	rjmp	.+134    	; 0x2c04 <H_LCD_void_Init+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e3 5b       	subi	r30, 0xB3	; 179
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e2       	ldi	r20, 0x20	; 32
    2b92:	51 e4       	ldi	r21, 0x41	; 65
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8e 01       	movw	r16, r28
    2b9e:	09 5b       	subi	r16, 0xB9	; 185
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	f8 01       	movw	r30, r16
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	1f c0       	rjmp	.+62     	; 0x2bf4 <H_LCD_void_Init+0x30c>
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	eb 5b       	subi	r30, 0xBB	; 187
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	80 e9       	ldi	r24, 0x90	; 144
    2bbe:	91 e0       	ldi	r25, 0x01	; 1
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	eb 5b       	subi	r30, 0xBB	; 187
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <H_LCD_void_Init+0x2e6>
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	eb 5b       	subi	r30, 0xBB	; 187
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bdc:	de 01       	movw	r26, r28
    2bde:	a9 5b       	subi	r26, 0xB9	; 185
    2be0:	bf 4f       	sbci	r27, 0xFF	; 255
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 5b       	subi	r30, 0xB9	; 185
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	9c 93       	st	X, r25
    2bf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e9 5b       	subi	r30, 0xB9	; 185
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	d1 f6       	brne	.-76     	; 0x2bb6 <H_LCD_void_Init+0x2ce>
    2c02:	27 c0       	rjmp	.+78     	; 0x2c52 <H_LCD_void_Init+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	8e 01       	movw	r16, r28
    2c06:	09 5b       	subi	r16, 0xB9	; 185
    2c08:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e7 5b       	subi	r30, 0xB7	; 183
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f8 01       	movw	r30, r16
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
    2c26:	de 01       	movw	r26, r28
    2c28:	ad 5b       	subi	r26, 0xBD	; 189
    2c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e9 5b       	subi	r30, 0xB9	; 185
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	8d 93       	st	X+, r24
    2c38:	9c 93       	st	X, r25
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ed 5b       	subi	r30, 0xBD	; 189
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <H_LCD_void_Init+0x35c>
    2c48:	fe 01       	movw	r30, r28
    2c4a:	ed 5b       	subi	r30, 0xBD	; 189
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
	_delay_ms(1);


	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2c52:	88 e2       	ldi	r24, 0x28	; 40
    2c54:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendCommand>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ff 96       	adiw	r30, 0x3f	; 63
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	a0 ea       	ldi	r26, 0xA0	; 160
    2c62:	b0 e4       	ldi	r27, 0x40	; 64
    2c64:	80 83       	st	Z, r24
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	a2 83       	std	Z+2, r26	; 0x02
    2c6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ff 96       	adiw	r30, 0x3f	; 63
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	2b ea       	ldi	r18, 0xAB	; 171
    2c7a:	3a ea       	ldi	r19, 0xAA	; 170
    2c7c:	4a ea       	ldi	r20, 0xAA	; 170
    2c7e:	50 e4       	ldi	r21, 0x40	; 64
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8b af       	std	Y+59, r24	; 0x3b
    2c8a:	9c af       	std	Y+60, r25	; 0x3c
    2c8c:	ad af       	std	Y+61, r26	; 0x3d
    2c8e:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    2c90:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c92:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c94:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c96:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	1c f4       	brge	.+6      	; 0x2cae <H_LCD_void_Init+0x3c6>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	8a af       	std	Y+58, r24	; 0x3a
    2cac:	93 c0       	rjmp	.+294    	; 0x2dd4 <H_LCD_void_Init+0x4ec>
	else if (__tmp > 255)
    2cae:	6b ad       	ldd	r22, Y+59	; 0x3b
    2cb0:	7c ad       	ldd	r23, Y+60	; 0x3c
    2cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4f e7       	ldi	r20, 0x7F	; 127
    2cbc:	53 e4       	ldi	r21, 0x43	; 67
    2cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc2:	18 16       	cp	r1, r24
    2cc4:	0c f0       	brlt	.+2      	; 0x2cc8 <H_LCD_void_Init+0x3e0>
    2cc6:	7d c0       	rjmp	.+250    	; 0x2dc2 <H_LCD_void_Init+0x4da>
	{
		_delay_ms(__us / 1000.0);
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ff 96       	adiw	r30, 0x3f	; 63
    2ccc:	60 81       	ld	r22, Z
    2cce:	71 81       	ldd	r23, Z+1	; 0x01
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a e7       	ldi	r20, 0x7A	; 122
    2cda:	54 e4       	ldi	r21, 0x44	; 68
    2cdc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8e ab       	std	Y+54, r24	; 0x36
    2ce6:	9f ab       	std	Y+55, r25	; 0x37
    2ce8:	a8 af       	std	Y+56, r26	; 0x38
    2cea:	b9 af       	std	Y+57, r27	; 0x39
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6e a9       	ldd	r22, Y+54	; 0x36
    2cee:	7f a9       	ldd	r23, Y+55	; 0x37
    2cf0:	88 ad       	ldd	r24, Y+56	; 0x38
    2cf2:	99 ad       	ldd	r25, Y+57	; 0x39
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a e7       	ldi	r20, 0x7A	; 122
    2cfa:	55 e4       	ldi	r21, 0x45	; 69
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8a ab       	std	Y+50, r24	; 0x32
    2d06:	9b ab       	std	Y+51, r25	; 0x33
    2d08:	ac ab       	std	Y+52, r26	; 0x34
    2d0a:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    2d0c:	6a a9       	ldd	r22, Y+50	; 0x32
    2d0e:	7b a9       	ldd	r23, Y+51	; 0x33
    2d10:	8c a9       	ldd	r24, Y+52	; 0x34
    2d12:	9d a9       	ldd	r25, Y+53	; 0x35
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <H_LCD_void_Init+0x446>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	99 ab       	std	Y+49, r25	; 0x31
    2d2a:	88 ab       	std	Y+48, r24	; 0x30
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <H_LCD_void_Init+0x4c4>
	else if (__tmp > 65535)
    2d2e:	6a a9       	ldd	r22, Y+50	; 0x32
    2d30:	7b a9       	ldd	r23, Y+51	; 0x33
    2d32:	8c a9       	ldd	r24, Y+52	; 0x34
    2d34:	9d a9       	ldd	r25, Y+53	; 0x35
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <H_LCD_void_Init+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6e a9       	ldd	r22, Y+54	; 0x36
    2d48:	7f a9       	ldd	r23, Y+55	; 0x37
    2d4a:	88 ad       	ldd	r24, Y+56	; 0x38
    2d4c:	99 ad       	ldd	r25, Y+57	; 0x39
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	99 ab       	std	Y+49, r25	; 0x31
    2d6c:	88 ab       	std	Y+48, r24	; 0x30
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <H_LCD_void_Init+0x4a6>
    2d70:	80 e9       	ldi	r24, 0x90	; 144
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	9f a7       	std	Y+47, r25	; 0x2f
    2d76:	8e a7       	std	Y+46, r24	; 0x2e
    2d78:	8e a5       	ldd	r24, Y+46	; 0x2e
    2d7a:	9f a5       	ldd	r25, Y+47	; 0x2f
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <H_LCD_void_Init+0x494>
    2d80:	9f a7       	std	Y+47, r25	; 0x2f
    2d82:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	88 a9       	ldd	r24, Y+48	; 0x30
    2d86:	99 a9       	ldd	r25, Y+49	; 0x31
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	99 ab       	std	Y+49, r25	; 0x31
    2d8c:	88 ab       	std	Y+48, r24	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	88 a9       	ldd	r24, Y+48	; 0x30
    2d90:	99 a9       	ldd	r25, Y+49	; 0x31
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <H_LCD_void_Init+0x488>
    2d96:	24 c0       	rjmp	.+72     	; 0x2de0 <H_LCD_void_Init+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6a a9       	ldd	r22, Y+50	; 0x32
    2d9a:	7b a9       	ldd	r23, Y+51	; 0x33
    2d9c:	8c a9       	ldd	r24, Y+52	; 0x34
    2d9e:	9d a9       	ldd	r25, Y+53	; 0x35
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	99 ab       	std	Y+49, r25	; 0x31
    2daa:	88 ab       	std	Y+48, r24	; 0x30
    2dac:	88 a9       	ldd	r24, Y+48	; 0x30
    2dae:	99 a9       	ldd	r25, Y+49	; 0x31
    2db0:	9d a7       	std	Y+45, r25	; 0x2d
    2db2:	8c a7       	std	Y+44, r24	; 0x2c
    2db4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2db6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <H_LCD_void_Init+0x4d0>
    2dbc:	9d a7       	std	Y+45, r25	; 0x2d
    2dbe:	8c a7       	std	Y+44, r24	; 0x2c
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <H_LCD_void_Init+0x4f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc2:	6b ad       	ldd	r22, Y+59	; 0x3b
    2dc4:	7c ad       	ldd	r23, Y+60	; 0x3c
    2dc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8a af       	std	Y+58, r24	; 0x3a
    2dd4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dd6:	8b a7       	std	Y+43, r24	; 0x2b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dda:	8a 95       	dec	r24
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <H_LCD_void_Init+0x4f2>
    2dde:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_us(5);
	H_LCD_void_sendCommand(LCD_CURSOR_OFF);
    2de0:	8c e0       	ldi	r24, 0x0C	; 12
    2de2:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendCommand>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 e8       	ldi	r26, 0x80	; 128
    2dec:	bf e3       	ldi	r27, 0x3F	; 63
    2dee:	8f a3       	std	Y+39, r24	; 0x27
    2df0:	98 a7       	std	Y+40, r25	; 0x28
    2df2:	a9 a7       	std	Y+41, r26	; 0x29
    2df4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6f a1       	ldd	r22, Y+39	; 0x27
    2df8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	4a e7       	ldi	r20, 0x7A	; 122
    2e04:	55 e4       	ldi	r21, 0x45	; 69
    2e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8b a3       	std	Y+35, r24	; 0x23
    2e10:	9c a3       	std	Y+36, r25	; 0x24
    2e12:	ad a3       	std	Y+37, r26	; 0x25
    2e14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e16:	6b a1       	ldd	r22, Y+35	; 0x23
    2e18:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	2c f4       	brge	.+10     	; 0x2e38 <H_LCD_void_Init+0x550>
		__ticks = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9a a3       	std	Y+34, r25	; 0x22
    2e34:	89 a3       	std	Y+33, r24	; 0x21
    2e36:	3f c0       	rjmp	.+126    	; 0x2eb6 <H_LCD_void_Init+0x5ce>
	else if (__tmp > 65535)
    2e38:	6b a1       	ldd	r22, Y+35	; 0x23
    2e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	3f ef       	ldi	r19, 0xFF	; 255
    2e44:	4f e7       	ldi	r20, 0x7F	; 127
    2e46:	57 e4       	ldi	r21, 0x47	; 71
    2e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e4c:	18 16       	cp	r1, r24
    2e4e:	4c f5       	brge	.+82     	; 0x2ea2 <H_LCD_void_Init+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e50:	6f a1       	ldd	r22, Y+39	; 0x27
    2e52:	78 a5       	ldd	r23, Y+40	; 0x28
    2e54:	89 a5       	ldd	r24, Y+41	; 0x29
    2e56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9a a3       	std	Y+34, r25	; 0x22
    2e76:	89 a3       	std	Y+33, r24	; 0x21
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <H_LCD_void_Init+0x5b0>
    2e7a:	80 e9       	ldi	r24, 0x90	; 144
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	98 a3       	std	Y+32, r25	; 0x20
    2e80:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e84:	98 a1       	ldd	r25, Y+32	; 0x20
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <H_LCD_void_Init+0x59e>
    2e8a:	98 a3       	std	Y+32, r25	; 0x20
    2e8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e90:	9a a1       	ldd	r25, Y+34	; 0x22
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9a a3       	std	Y+34, r25	; 0x22
    2e96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <H_LCD_void_Init+0x592>
    2ea0:	14 c0       	rjmp	.+40     	; 0x2eca <H_LCD_void_Init+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9a a3       	std	Y+34, r25	; 0x22
    2eb4:	89 a3       	std	Y+33, r24	; 0x21
    2eb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eba:	9e 8f       	std	Y+30, r25	; 0x1e
    2ebc:	8d 8f       	std	Y+29, r24	; 0x1d
    2ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <H_LCD_void_Init+0x5da>
    2ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendCommand>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ed6:	b0 e4       	ldi	r27, 0x40	; 64
    2ed8:	89 8f       	std	Y+25, r24	; 0x19
    2eda:	9a 8f       	std	Y+26, r25	; 0x1a
    2edc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ede:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ee2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ee4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ee6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a e7       	ldi	r20, 0x7A	; 122
    2eee:	55 e4       	ldi	r21, 0x45	; 69
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8d 8b       	std	Y+21, r24	; 0x15
    2efa:	9e 8b       	std	Y+22, r25	; 0x16
    2efc:	af 8b       	std	Y+23, r26	; 0x17
    2efe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f00:	6d 89       	ldd	r22, Y+21	; 0x15
    2f02:	7e 89       	ldd	r23, Y+22	; 0x16
    2f04:	8f 89       	ldd	r24, Y+23	; 0x17
    2f06:	98 8d       	ldd	r25, Y+24	; 0x18
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <H_LCD_void_Init+0x63a>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9c 8b       	std	Y+20, r25	; 0x14
    2f1e:	8b 8b       	std	Y+19, r24	; 0x13
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <H_LCD_void_Init+0x6b8>
	else if (__tmp > 65535)
    2f22:	6d 89       	ldd	r22, Y+21	; 0x15
    2f24:	7e 89       	ldd	r23, Y+22	; 0x16
    2f26:	8f 89       	ldd	r24, Y+23	; 0x17
    2f28:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	4c f5       	brge	.+82     	; 0x2f8c <H_LCD_void_Init+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9c 8b       	std	Y+20, r25	; 0x14
    2f60:	8b 8b       	std	Y+19, r24	; 0x13
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <H_LCD_void_Init+0x69a>
    2f64:	80 e9       	ldi	r24, 0x90	; 144
    2f66:	91 e0       	ldi	r25, 0x01	; 1
    2f68:	9a 8b       	std	Y+18, r25	; 0x12
    2f6a:	89 8b       	std	Y+17, r24	; 0x11
    2f6c:	89 89       	ldd	r24, Y+17	; 0x11
    2f6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <H_LCD_void_Init+0x688>
    2f74:	9a 8b       	std	Y+18, r25	; 0x12
    2f76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9c 8b       	std	Y+20, r25	; 0x14
    2f80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	8b 89       	ldd	r24, Y+19	; 0x13
    2f84:	9c 89       	ldd	r25, Y+20	; 0x14
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <H_LCD_void_Init+0x67c>
    2f8a:	14 c0       	rjmp	.+40     	; 0x2fb4 <H_LCD_void_Init+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f90:	8f 89       	ldd	r24, Y+23	; 0x17
    2f92:	98 8d       	ldd	r25, Y+24	; 0x18
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9c 8b       	std	Y+20, r25	; 0x14
    2f9e:	8b 8b       	std	Y+19, r24	; 0x13
    2fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa4:	98 8b       	std	Y+16, r25	; 0x10
    2fa6:	8f 87       	std	Y+15, r24	; 0x0f
    2fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2faa:	98 89       	ldd	r25, Y+16	; 0x10
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <H_LCD_void_Init+0x6c4>
    2fb0:	98 8b       	std	Y+16, r25	; 0x10
    2fb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
    2fb4:	82 e0       	ldi	r24, 0x02	; 2
    2fb6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendCommand>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	a0 e8       	ldi	r26, 0x80	; 128
    2fc0:	bf e3       	ldi	r27, 0x3F	; 63
    2fc2:	8b 87       	std	Y+11, r24	; 0x0b
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	ad 87       	std	Y+13, r26	; 0x0d
    2fc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	4a e7       	ldi	r20, 0x7A	; 122
    2fd8:	55 e4       	ldi	r21, 0x45	; 69
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	8f 83       	std	Y+7, r24	; 0x07
    2fe4:	98 87       	std	Y+8, r25	; 0x08
    2fe6:	a9 87       	std	Y+9, r26	; 0x09
    2fe8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	5f e3       	ldi	r21, 0x3F	; 63
    2ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffe:	88 23       	and	r24, r24
    3000:	2c f4       	brge	.+10     	; 0x300c <H_LCD_void_Init+0x724>
		__ticks = 1;
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	8d 83       	std	Y+5, r24	; 0x05
    300a:	3f c0       	rjmp	.+126    	; 0x308a <H_LCD_void_Init+0x7a2>
	else if (__tmp > 65535)
    300c:	6f 81       	ldd	r22, Y+7	; 0x07
    300e:	78 85       	ldd	r23, Y+8	; 0x08
    3010:	89 85       	ldd	r24, Y+9	; 0x09
    3012:	9a 85       	ldd	r25, Y+10	; 0x0a
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	3f ef       	ldi	r19, 0xFF	; 255
    3018:	4f e7       	ldi	r20, 0x7F	; 127
    301a:	57 e4       	ldi	r21, 0x47	; 71
    301c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3020:	18 16       	cp	r1, r24
    3022:	4c f5       	brge	.+82     	; 0x3076 <H_LCD_void_Init+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3024:	6b 85       	ldd	r22, Y+11	; 0x0b
    3026:	7c 85       	ldd	r23, Y+12	; 0x0c
    3028:	8d 85       	ldd	r24, Y+13	; 0x0d
    302a:	9e 85       	ldd	r25, Y+14	; 0x0e
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	40 e2       	ldi	r20, 0x20	; 32
    3032:	51 e4       	ldi	r21, 0x41	; 65
    3034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
    304c:	0f c0       	rjmp	.+30     	; 0x306c <H_LCD_void_Init+0x784>
    304e:	80 e9       	ldi	r24, 0x90	; 144
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	9c 83       	std	Y+4, r25	; 0x04
    3054:	8b 83       	std	Y+3, r24	; 0x03
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	9c 81       	ldd	r25, Y+4	; 0x04
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <H_LCD_void_Init+0x772>
    305e:	9c 83       	std	Y+4, r25	; 0x04
    3060:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	69 f7       	brne	.-38     	; 0x304e <H_LCD_void_Init+0x766>
    3074:	14 c0       	rjmp	.+40     	; 0x309e <H_LCD_void_Init+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3076:	6f 81       	ldd	r22, Y+7	; 0x07
    3078:	78 85       	ldd	r23, Y+8	; 0x08
    307a:	89 85       	ldd	r24, Y+9	; 0x09
    307c:	9a 85       	ldd	r25, Y+10	; 0x0a
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	9e 83       	std	Y+6, r25	; 0x06
    3088:	8d 83       	std	Y+5, r24	; 0x05
    308a:	8d 81       	ldd	r24, Y+5	; 0x05
    308c:	9e 81       	ldd	r25, Y+6	; 0x06
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <H_LCD_void_Init+0x7ae>
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_sendCommand(LCD_Entery_mode_set);

#endif


}
    309e:	c2 5a       	subi	r28, 0xA2	; 162
    30a0:	df 4f       	sbci	r29, 0xFF	; 255
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	08 95       	ret

000030b6 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(uint8 Byte)
{
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	c7 54       	subi	r28, 0x47	; 71
    30c4:	d0 40       	sbci	r29, 0x00	; 0
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	fe 01       	movw	r30, r28
    30d2:	e9 5b       	subi	r30, 0xB9	; 185
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 83       	st	Z, r24

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    30d8:	89 e3       	ldi	r24, 0x39	; 57
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	62 e0       	ldi	r22, 0x02	; 2
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    30e4:	fe 01       	movw	r30, r28
    30e6:	ed 5b       	subi	r30, 0xBD	; 189
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e8       	ldi	r26, 0x80	; 128
    30f0:	bf e3       	ldi	r27, 0x3F	; 63
    30f2:	80 83       	st	Z, r24
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	a2 83       	std	Z+2, r26	; 0x02
    30f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fa:	8e 01       	movw	r16, r28
    30fc:	01 5c       	subi	r16, 0xC1	; 193
    30fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3100:	fe 01       	movw	r30, r28
    3102:	ed 5b       	subi	r30, 0xBD	; 189
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	60 81       	ld	r22, Z
    3108:	71 81       	ldd	r23, Z+1	; 0x01
    310a:	82 81       	ldd	r24, Z+2	; 0x02
    310c:	93 81       	ldd	r25, Z+3	; 0x03
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	4a e7       	ldi	r20, 0x7A	; 122
    3114:	55 e4       	ldi	r21, 0x45	; 69
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	f8 01       	movw	r30, r16
    3120:	80 83       	st	Z, r24
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	a2 83       	std	Z+2, r26	; 0x02
    3126:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3128:	fe 01       	movw	r30, r28
    312a:	ff 96       	adiw	r30, 0x3f	; 63
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	5f e3       	ldi	r21, 0x3F	; 63
    313c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3140:	88 23       	and	r24, r24
    3142:	2c f4       	brge	.+10     	; 0x314e <H_LCD_void_latchByte+0x98>
		__ticks = 1;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9e af       	std	Y+62, r25	; 0x3e
    314a:	8d af       	std	Y+61, r24	; 0x3d
    314c:	46 c0       	rjmp	.+140    	; 0x31da <H_LCD_void_latchByte+0x124>
	else if (__tmp > 65535)
    314e:	fe 01       	movw	r30, r28
    3150:	ff 96       	adiw	r30, 0x3f	; 63
    3152:	60 81       	ld	r22, Z
    3154:	71 81       	ldd	r23, Z+1	; 0x01
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	3f ef       	ldi	r19, 0xFF	; 255
    315e:	4f e7       	ldi	r20, 0x7F	; 127
    3160:	57 e4       	ldi	r21, 0x47	; 71
    3162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3166:	18 16       	cp	r1, r24
    3168:	64 f5       	brge	.+88     	; 0x31c2 <H_LCD_void_latchByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316a:	fe 01       	movw	r30, r28
    316c:	ed 5b       	subi	r30, 0xBD	; 189
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e2       	ldi	r20, 0x20	; 32
    317e:	51 e4       	ldi	r21, 0x41	; 65
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9e af       	std	Y+62, r25	; 0x3e
    3196:	8d af       	std	Y+61, r24	; 0x3d
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <H_LCD_void_latchByte+0x102>
    319a:	80 e9       	ldi	r24, 0x90	; 144
    319c:	91 e0       	ldi	r25, 0x01	; 1
    319e:	9c af       	std	Y+60, r25	; 0x3c
    31a0:	8b af       	std	Y+59, r24	; 0x3b
    31a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    31a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <H_LCD_void_latchByte+0xf0>
    31aa:	9c af       	std	Y+60, r25	; 0x3c
    31ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	9e af       	std	Y+62, r25	; 0x3e
    31b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	69 f7       	brne	.-38     	; 0x319a <H_LCD_void_latchByte+0xe4>
    31c0:	16 c0       	rjmp	.+44     	; 0x31ee <H_LCD_void_latchByte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c2:	fe 01       	movw	r30, r28
    31c4:	ff 96       	adiw	r30, 0x3f	; 63
    31c6:	60 81       	ld	r22, Z
    31c8:	71 81       	ldd	r23, Z+1	; 0x01
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	9e af       	std	Y+62, r25	; 0x3e
    31d8:	8d af       	std	Y+61, r24	; 0x3d
    31da:	8d ad       	ldd	r24, Y+61	; 0x3d
    31dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    31de:	9a af       	std	Y+58, r25	; 0x3a
    31e0:	89 af       	std	Y+57, r24	; 0x39
    31e2:	89 ad       	ldd	r24, Y+57	; 0x39
    31e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <H_LCD_void_latchByte+0x130>
    31ea:	9a af       	std	Y+58, r25	; 0x3a
    31ec:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D4_PIN, GET_BIT(Byte,4));
    31ee:	fe 01       	movw	r30, r28
    31f0:	e9 5b       	subi	r30, 0xB9	; 185
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	80 71       	andi	r24, 0x10	; 16
    31fc:	90 70       	andi	r25, 0x00	; 0
    31fe:	95 95       	asr	r25
    3200:	87 95       	ror	r24
    3202:	95 95       	asr	r25
    3204:	87 95       	ror	r24
    3206:	95 95       	asr	r25
    3208:	87 95       	ror	r24
    320a:	95 95       	asr	r25
    320c:	87 95       	ror	r24
    320e:	28 2f       	mov	r18, r24
    3210:	86 e3       	ldi	r24, 0x36	; 54
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	42 2f       	mov	r20, r18
    3218:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D5_PIN, GET_BIT(Byte,5));
    321c:	fe 01       	movw	r30, r28
    321e:	e9 5b       	subi	r30, 0xB9	; 185
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	88 2f       	mov	r24, r24
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	80 72       	andi	r24, 0x20	; 32
    322a:	90 70       	andi	r25, 0x00	; 0
    322c:	95 95       	asr	r25
    322e:	87 95       	ror	r24
    3230:	95 95       	asr	r25
    3232:	87 95       	ror	r24
    3234:	95 95       	asr	r25
    3236:	87 95       	ror	r24
    3238:	95 95       	asr	r25
    323a:	87 95       	ror	r24
    323c:	95 95       	asr	r25
    323e:	87 95       	ror	r24
    3240:	28 2f       	mov	r18, r24
    3242:	86 e3       	ldi	r24, 0x36	; 54
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	61 e0       	ldi	r22, 0x01	; 1
    3248:	42 2f       	mov	r20, r18
    324a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D6_PIN, GET_BIT(Byte,6));
    324e:	fe 01       	movw	r30, r28
    3250:	e9 5b       	subi	r30, 0xB9	; 185
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	88 2f       	mov	r24, r24
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	80 74       	andi	r24, 0x40	; 64
    325c:	90 70       	andi	r25, 0x00	; 0
    325e:	08 2e       	mov	r0, r24
    3260:	89 2f       	mov	r24, r25
    3262:	00 0c       	add	r0, r0
    3264:	88 1f       	adc	r24, r24
    3266:	99 0b       	sbc	r25, r25
    3268:	00 0c       	add	r0, r0
    326a:	88 1f       	adc	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	28 2f       	mov	r18, r24
    3270:	86 e3       	ldi	r24, 0x36	; 54
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	62 e0       	ldi	r22, 0x02	; 2
    3276:	42 2f       	mov	r20, r18
    3278:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D7_PIN, GET_BIT(Byte,7));
    327c:	fe 01       	movw	r30, r28
    327e:	e9 5b       	subi	r30, 0xB9	; 185
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	28 2f       	mov	r18, r24
    3286:	22 1f       	adc	r18, r18
    3288:	22 27       	eor	r18, r18
    328a:	22 1f       	adc	r18, r18
    328c:	86 e3       	ldi	r24, 0x36	; 54
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	64 e0       	ldi	r22, 0x04	; 4
    3292:	42 2f       	mov	r20, r18
    3294:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3298:	89 e3       	ldi	r24, 0x39	; 57
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	62 e0       	ldi	r22, 0x02	; 2
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e8       	ldi	r26, 0x80	; 128
    32aa:	bf e3       	ldi	r27, 0x3F	; 63
    32ac:	8d ab       	std	Y+53, r24	; 0x35
    32ae:	9e ab       	std	Y+54, r25	; 0x36
    32b0:	af ab       	std	Y+55, r26	; 0x37
    32b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6d a9       	ldd	r22, Y+53	; 0x35
    32b6:	7e a9       	ldd	r23, Y+54	; 0x36
    32b8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ba:	98 ad       	ldd	r25, Y+56	; 0x38
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a e7       	ldi	r20, 0x7A	; 122
    32c2:	55 e4       	ldi	r21, 0x45	; 69
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	89 ab       	std	Y+49, r24	; 0x31
    32ce:	9a ab       	std	Y+50, r25	; 0x32
    32d0:	ab ab       	std	Y+51, r26	; 0x33
    32d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32d4:	69 a9       	ldd	r22, Y+49	; 0x31
    32d6:	7a a9       	ldd	r23, Y+50	; 0x32
    32d8:	8b a9       	ldd	r24, Y+51	; 0x33
    32da:	9c a9       	ldd	r25, Y+52	; 0x34
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <H_LCD_void_latchByte+0x240>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <H_LCD_void_latchByte+0x2be>
	else if (__tmp > 65535)
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <H_LCD_void_latchByte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6d a9       	ldd	r22, Y+53	; 0x35
    3310:	7e a9       	ldd	r23, Y+54	; 0x36
    3312:	8f a9       	ldd	r24, Y+55	; 0x37
    3314:	98 ad       	ldd	r25, Y+56	; 0x38
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	98 ab       	std	Y+48, r25	; 0x30
    3334:	8f a7       	std	Y+47, r24	; 0x2f
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <H_LCD_void_latchByte+0x2a0>
    3338:	80 e9       	ldi	r24, 0x90	; 144
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	9e a7       	std	Y+46, r25	; 0x2e
    333e:	8d a7       	std	Y+45, r24	; 0x2d
    3340:	8d a5       	ldd	r24, Y+45	; 0x2d
    3342:	9e a5       	ldd	r25, Y+46	; 0x2e
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <H_LCD_void_latchByte+0x28e>
    3348:	9e a7       	std	Y+46, r25	; 0x2e
    334a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8f a5       	ldd	r24, Y+47	; 0x2f
    334e:	98 a9       	ldd	r25, Y+48	; 0x30
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	98 ab       	std	Y+48, r25	; 0x30
    3354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8f a5       	ldd	r24, Y+47	; 0x2f
    3358:	98 a9       	ldd	r25, Y+48	; 0x30
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <H_LCD_void_latchByte+0x282>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <H_LCD_void_latchByte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	69 a9       	ldd	r22, Y+49	; 0x31
    3362:	7a a9       	ldd	r23, Y+50	; 0x32
    3364:	8b a9       	ldd	r24, Y+51	; 0x33
    3366:	9c a9       	ldd	r25, Y+52	; 0x34
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	98 ab       	std	Y+48, r25	; 0x30
    3372:	8f a7       	std	Y+47, r24	; 0x2f
    3374:	8f a5       	ldd	r24, Y+47	; 0x2f
    3376:	98 a9       	ldd	r25, Y+48	; 0x30
    3378:	9c a7       	std	Y+44, r25	; 0x2c
    337a:	8b a7       	std	Y+43, r24	; 0x2b
    337c:	8b a5       	ldd	r24, Y+43	; 0x2b
    337e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <H_LCD_void_latchByte+0x2ca>
    3384:	9c a7       	std	Y+44, r25	; 0x2c
    3386:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3388:	89 e3       	ldi	r24, 0x39	; 57
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	62 e0       	ldi	r22, 0x02	; 2
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	a0 e8       	ldi	r26, 0x80	; 128
    339a:	bf e3       	ldi	r27, 0x3F	; 63
    339c:	8f a3       	std	Y+39, r24	; 0x27
    339e:	98 a7       	std	Y+40, r25	; 0x28
    33a0:	a9 a7       	std	Y+41, r26	; 0x29
    33a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a4:	6f a1       	ldd	r22, Y+39	; 0x27
    33a6:	78 a5       	ldd	r23, Y+40	; 0x28
    33a8:	89 a5       	ldd	r24, Y+41	; 0x29
    33aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	4a e7       	ldi	r20, 0x7A	; 122
    33b2:	55 e4       	ldi	r21, 0x45	; 69
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	8b a3       	std	Y+35, r24	; 0x23
    33be:	9c a3       	std	Y+36, r25	; 0x24
    33c0:	ad a3       	std	Y+37, r26	; 0x25
    33c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33c4:	6b a1       	ldd	r22, Y+35	; 0x23
    33c6:	7c a1       	ldd	r23, Y+36	; 0x24
    33c8:	8d a1       	ldd	r24, Y+37	; 0x25
    33ca:	9e a1       	ldd	r25, Y+38	; 0x26
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e8       	ldi	r20, 0x80	; 128
    33d2:	5f e3       	ldi	r21, 0x3F	; 63
    33d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d8:	88 23       	and	r24, r24
    33da:	2c f4       	brge	.+10     	; 0x33e6 <H_LCD_void_latchByte+0x330>
		__ticks = 1;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	9a a3       	std	Y+34, r25	; 0x22
    33e2:	89 a3       	std	Y+33, r24	; 0x21
    33e4:	3f c0       	rjmp	.+126    	; 0x3464 <H_LCD_void_latchByte+0x3ae>
	else if (__tmp > 65535)
    33e6:	6b a1       	ldd	r22, Y+35	; 0x23
    33e8:	7c a1       	ldd	r23, Y+36	; 0x24
    33ea:	8d a1       	ldd	r24, Y+37	; 0x25
    33ec:	9e a1       	ldd	r25, Y+38	; 0x26
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	3f ef       	ldi	r19, 0xFF	; 255
    33f2:	4f e7       	ldi	r20, 0x7F	; 127
    33f4:	57 e4       	ldi	r21, 0x47	; 71
    33f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33fa:	18 16       	cp	r1, r24
    33fc:	4c f5       	brge	.+82     	; 0x3450 <H_LCD_void_latchByte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3400:	78 a5       	ldd	r23, Y+40	; 0x28
    3402:	89 a5       	ldd	r24, Y+41	; 0x29
    3404:	9a a5       	ldd	r25, Y+42	; 0x2a
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e2       	ldi	r20, 0x20	; 32
    340c:	51 e4       	ldi	r21, 0x41	; 65
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9a a3       	std	Y+34, r25	; 0x22
    3424:	89 a3       	std	Y+33, r24	; 0x21
    3426:	0f c0       	rjmp	.+30     	; 0x3446 <H_LCD_void_latchByte+0x390>
    3428:	80 e9       	ldi	r24, 0x90	; 144
    342a:	91 e0       	ldi	r25, 0x01	; 1
    342c:	98 a3       	std	Y+32, r25	; 0x20
    342e:	8f 8f       	std	Y+31, r24	; 0x1f
    3430:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3432:	98 a1       	ldd	r25, Y+32	; 0x20
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <H_LCD_void_latchByte+0x37e>
    3438:	98 a3       	std	Y+32, r25	; 0x20
    343a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343c:	89 a1       	ldd	r24, Y+33	; 0x21
    343e:	9a a1       	ldd	r25, Y+34	; 0x22
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	9a a3       	std	Y+34, r25	; 0x22
    3444:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3446:	89 a1       	ldd	r24, Y+33	; 0x21
    3448:	9a a1       	ldd	r25, Y+34	; 0x22
    344a:	00 97       	sbiw	r24, 0x00	; 0
    344c:	69 f7       	brne	.-38     	; 0x3428 <H_LCD_void_latchByte+0x372>
    344e:	14 c0       	rjmp	.+40     	; 0x3478 <H_LCD_void_latchByte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3450:	6b a1       	ldd	r22, Y+35	; 0x23
    3452:	7c a1       	ldd	r23, Y+36	; 0x24
    3454:	8d a1       	ldd	r24, Y+37	; 0x25
    3456:	9e a1       	ldd	r25, Y+38	; 0x26
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	9a a3       	std	Y+34, r25	; 0x22
    3462:	89 a3       	std	Y+33, r24	; 0x21
    3464:	89 a1       	ldd	r24, Y+33	; 0x21
    3466:	9a a1       	ldd	r25, Y+34	; 0x22
    3468:	9e 8f       	std	Y+30, r25	; 0x1e
    346a:	8d 8f       	std	Y+29, r24	; 0x1d
    346c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    346e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <H_LCD_void_latchByte+0x3ba>
    3474:	9e 8f       	std	Y+30, r25	; 0x1e
    3476:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D4_PIN, GET_BIT(Byte,0));
    3478:	fe 01       	movw	r30, r28
    347a:	e9 5b       	subi	r30, 0xB9	; 185
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	28 2f       	mov	r18, r24
    3482:	21 70       	andi	r18, 0x01	; 1
    3484:	86 e3       	ldi	r24, 0x36	; 54
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	42 2f       	mov	r20, r18
    348c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D5_PIN, GET_BIT(Byte,1));
    3490:	fe 01       	movw	r30, r28
    3492:	e9 5b       	subi	r30, 0xB9	; 185
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 81       	ld	r24, Z
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	82 70       	andi	r24, 0x02	; 2
    349e:	90 70       	andi	r25, 0x00	; 0
    34a0:	95 95       	asr	r25
    34a2:	87 95       	ror	r24
    34a4:	28 2f       	mov	r18, r24
    34a6:	86 e3       	ldi	r24, 0x36	; 54
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	42 2f       	mov	r20, r18
    34ae:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D6_PIN, GET_BIT(Byte,2));
    34b2:	fe 01       	movw	r30, r28
    34b4:	e9 5b       	subi	r30, 0xB9	; 185
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	84 70       	andi	r24, 0x04	; 4
    34c0:	90 70       	andi	r25, 0x00	; 0
    34c2:	95 95       	asr	r25
    34c4:	87 95       	ror	r24
    34c6:	95 95       	asr	r25
    34c8:	87 95       	ror	r24
    34ca:	28 2f       	mov	r18, r24
    34cc:	86 e3       	ldi	r24, 0x36	; 54
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	62 e0       	ldi	r22, 0x02	; 2
    34d2:	42 2f       	mov	r20, r18
    34d4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_D7_PIN, GET_BIT(Byte,3));
    34d8:	fe 01       	movw	r30, r28
    34da:	e9 5b       	subi	r30, 0xB9	; 185
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 81       	ld	r24, Z
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	88 70       	andi	r24, 0x08	; 8
    34e6:	90 70       	andi	r25, 0x00	; 0
    34e8:	95 95       	asr	r25
    34ea:	87 95       	ror	r24
    34ec:	95 95       	asr	r25
    34ee:	87 95       	ror	r24
    34f0:	95 95       	asr	r25
    34f2:	87 95       	ror	r24
    34f4:	28 2f       	mov	r18, r24
    34f6:	86 e3       	ldi	r24, 0x36	; 54
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	64 e0       	ldi	r22, 0x04	; 4
    34fc:	42 2f       	mov	r20, r18
    34fe:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3502:	89 e3       	ldi	r24, 0x39	; 57
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	62 e0       	ldi	r22, 0x02	; 2
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	a0 e8       	ldi	r26, 0x80	; 128
    3514:	bf e3       	ldi	r27, 0x3F	; 63
    3516:	89 8f       	std	Y+25, r24	; 0x19
    3518:	9a 8f       	std	Y+26, r25	; 0x1a
    351a:	ab 8f       	std	Y+27, r26	; 0x1b
    351c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351e:	69 8d       	ldd	r22, Y+25	; 0x19
    3520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	4a e7       	ldi	r20, 0x7A	; 122
    352c:	55 e4       	ldi	r21, 0x45	; 69
    352e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	8d 8b       	std	Y+21, r24	; 0x15
    3538:	9e 8b       	std	Y+22, r25	; 0x16
    353a:	af 8b       	std	Y+23, r26	; 0x17
    353c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    353e:	6d 89       	ldd	r22, Y+21	; 0x15
    3540:	7e 89       	ldd	r23, Y+22	; 0x16
    3542:	8f 89       	ldd	r24, Y+23	; 0x17
    3544:	98 8d       	ldd	r25, Y+24	; 0x18
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3552:	88 23       	and	r24, r24
    3554:	2c f4       	brge	.+10     	; 0x3560 <H_LCD_void_latchByte+0x4aa>
		__ticks = 1;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9c 8b       	std	Y+20, r25	; 0x14
    355c:	8b 8b       	std	Y+19, r24	; 0x13
    355e:	3f c0       	rjmp	.+126    	; 0x35de <H_LCD_void_latchByte+0x528>
	else if (__tmp > 65535)
    3560:	6d 89       	ldd	r22, Y+21	; 0x15
    3562:	7e 89       	ldd	r23, Y+22	; 0x16
    3564:	8f 89       	ldd	r24, Y+23	; 0x17
    3566:	98 8d       	ldd	r25, Y+24	; 0x18
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	3f ef       	ldi	r19, 0xFF	; 255
    356c:	4f e7       	ldi	r20, 0x7F	; 127
    356e:	57 e4       	ldi	r21, 0x47	; 71
    3570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3574:	18 16       	cp	r1, r24
    3576:	4c f5       	brge	.+82     	; 0x35ca <H_LCD_void_latchByte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3578:	69 8d       	ldd	r22, Y+25	; 0x19
    357a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    357c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    357e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e2       	ldi	r20, 0x20	; 32
    3586:	51 e4       	ldi	r21, 0x41	; 65
    3588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	bc 01       	movw	r22, r24
    3592:	cd 01       	movw	r24, r26
    3594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	9c 8b       	std	Y+20, r25	; 0x14
    359e:	8b 8b       	std	Y+19, r24	; 0x13
    35a0:	0f c0       	rjmp	.+30     	; 0x35c0 <H_LCD_void_latchByte+0x50a>
    35a2:	80 e9       	ldi	r24, 0x90	; 144
    35a4:	91 e0       	ldi	r25, 0x01	; 1
    35a6:	9a 8b       	std	Y+18, r25	; 0x12
    35a8:	89 8b       	std	Y+17, r24	; 0x11
    35aa:	89 89       	ldd	r24, Y+17	; 0x11
    35ac:	9a 89       	ldd	r25, Y+18	; 0x12
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <H_LCD_void_latchByte+0x4f8>
    35b2:	9a 8b       	std	Y+18, r25	; 0x12
    35b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b6:	8b 89       	ldd	r24, Y+19	; 0x13
    35b8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	9c 8b       	std	Y+20, r25	; 0x14
    35be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c0:	8b 89       	ldd	r24, Y+19	; 0x13
    35c2:	9c 89       	ldd	r25, Y+20	; 0x14
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	69 f7       	brne	.-38     	; 0x35a2 <H_LCD_void_latchByte+0x4ec>
    35c8:	14 c0       	rjmp	.+40     	; 0x35f2 <H_LCD_void_latchByte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ca:	6d 89       	ldd	r22, Y+21	; 0x15
    35cc:	7e 89       	ldd	r23, Y+22	; 0x16
    35ce:	8f 89       	ldd	r24, Y+23	; 0x17
    35d0:	98 8d       	ldd	r25, Y+24	; 0x18
    35d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	9c 8b       	std	Y+20, r25	; 0x14
    35dc:	8b 8b       	std	Y+19, r24	; 0x13
    35de:	8b 89       	ldd	r24, Y+19	; 0x13
    35e0:	9c 89       	ldd	r25, Y+20	; 0x14
    35e2:	98 8b       	std	Y+16, r25	; 0x10
    35e4:	8f 87       	std	Y+15, r24	; 0x0f
    35e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e8:	98 89       	ldd	r25, Y+16	; 0x10
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	f1 f7       	brne	.-4      	; 0x35ea <H_LCD_void_latchByte+0x534>
    35ee:	98 8b       	std	Y+16, r25	; 0x10
    35f0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    35f2:	89 e3       	ldi	r24, 0x39	; 57
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	62 e0       	ldi	r22, 0x02	; 2
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	a0 ea       	ldi	r26, 0xA0	; 160
    3604:	b0 e4       	ldi	r27, 0x40	; 64
    3606:	8b 87       	std	Y+11, r24	; 0x0b
    3608:	9c 87       	std	Y+12, r25	; 0x0c
    360a:	ad 87       	std	Y+13, r26	; 0x0d
    360c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3610:	7c 85       	ldd	r23, Y+12	; 0x0c
    3612:	8d 85       	ldd	r24, Y+13	; 0x0d
    3614:	9e 85       	ldd	r25, Y+14	; 0x0e
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a e7       	ldi	r20, 0x7A	; 122
    361c:	55 e4       	ldi	r21, 0x45	; 69
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8f 83       	std	Y+7, r24	; 0x07
    3628:	98 87       	std	Y+8, r25	; 0x08
    362a:	a9 87       	std	Y+9, r26	; 0x09
    362c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	2c f4       	brge	.+10     	; 0x3650 <H_LCD_void_latchByte+0x59a>
		__ticks = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
    364e:	3f c0       	rjmp	.+126    	; 0x36ce <H_LCD_void_latchByte+0x618>
	else if (__tmp > 65535)
    3650:	6f 81       	ldd	r22, Y+7	; 0x07
    3652:	78 85       	ldd	r23, Y+8	; 0x08
    3654:	89 85       	ldd	r24, Y+9	; 0x09
    3656:	9a 85       	ldd	r25, Y+10	; 0x0a
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	4c f5       	brge	.+82     	; 0x36ba <H_LCD_void_latchByte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	6b 85       	ldd	r22, Y+11	; 0x0b
    366a:	7c 85       	ldd	r23, Y+12	; 0x0c
    366c:	8d 85       	ldd	r24, Y+13	; 0x0d
    366e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9e 83       	std	Y+6, r25	; 0x06
    368e:	8d 83       	std	Y+5, r24	; 0x05
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <H_LCD_void_latchByte+0x5fa>
    3692:	80 e9       	ldi	r24, 0x90	; 144
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	9c 83       	std	Y+4, r25	; 0x04
    3698:	8b 83       	std	Y+3, r24	; 0x03
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	9c 81       	ldd	r25, Y+4	; 0x04
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <H_LCD_void_latchByte+0x5e8>
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	8d 81       	ldd	r24, Y+5	; 0x05
    36a8:	9e 81       	ldd	r25, Y+6	; 0x06
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	9e 83       	std	Y+6, r25	; 0x06
    36ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	69 f7       	brne	.-38     	; 0x3692 <H_LCD_void_latchByte+0x5dc>
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <H_LCD_void_latchByte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ba:	6f 81       	ldd	r22, Y+7	; 0x07
    36bc:	78 85       	ldd	r23, Y+8	; 0x08
    36be:	89 85       	ldd	r24, Y+9	; 0x09
    36c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9e 83       	std	Y+6, r25	; 0x06
    36cc:	8d 83       	std	Y+5, r24	; 0x05
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	9a 83       	std	Y+2, r25	; 0x02
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <H_LCD_void_latchByte+0x624>
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    36e2:	c9 5b       	subi	r28, 0xB9	; 185
    36e4:	df 4f       	sbci	r29, 0xFF	; 255
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	1f 91       	pop	r17
    36f6:	0f 91       	pop	r16
    36f8:	08 95       	ret

000036fa <H_LCD_void_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void H_LCD_void_sendCommand(uint8 command)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	2f 97       	sbiw	r28, 0x0f	; 15
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3710:	89 e3       	ldi	r24, 0x39	; 57
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	63 e0       	ldi	r22, 0x03	; 3
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e8       	ldi	r26, 0x80	; 128
    3722:	bf e3       	ldi	r27, 0x3F	; 63
    3724:	8b 87       	std	Y+11, r24	; 0x0b
    3726:	9c 87       	std	Y+12, r25	; 0x0c
    3728:	ad 87       	std	Y+13, r26	; 0x0d
    372a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	6b 85       	ldd	r22, Y+11	; 0x0b
    372e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3730:	8d 85       	ldd	r24, Y+13	; 0x0d
    3732:	9e 85       	ldd	r25, Y+14	; 0x0e
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	55 e4       	ldi	r21, 0x45	; 69
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8f 83       	std	Y+7, r24	; 0x07
    3746:	98 87       	std	Y+8, r25	; 0x08
    3748:	a9 87       	std	Y+9, r26	; 0x09
    374a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <H_LCD_void_sendCommand+0x74>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <H_LCD_void_sendCommand+0xf2>
	else if (__tmp > 65535)
    376e:	6f 81       	ldd	r22, Y+7	; 0x07
    3770:	78 85       	ldd	r23, Y+8	; 0x08
    3772:	89 85       	ldd	r24, Y+9	; 0x09
    3774:	9a 85       	ldd	r25, Y+10	; 0x0a
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <H_LCD_void_sendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	6b 85       	ldd	r22, Y+11	; 0x0b
    3788:	7c 85       	ldd	r23, Y+12	; 0x0c
    378a:	8d 85       	ldd	r24, Y+13	; 0x0d
    378c:	9e 85       	ldd	r25, Y+14	; 0x0e
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e 83       	std	Y+6, r25	; 0x06
    37ac:	8d 83       	std	Y+5, r24	; 0x05
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <H_LCD_void_sendCommand+0xd4>
    37b0:	80 e9       	ldi	r24, 0x90	; 144
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	9c 83       	std	Y+4, r25	; 0x04
    37b6:	8b 83       	std	Y+3, r24	; 0x03
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	9c 81       	ldd	r25, Y+4	; 0x04
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <H_LCD_void_sendCommand+0xc2>
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <H_LCD_void_sendCommand+0xb6>
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <H_LCD_void_sendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	6f 81       	ldd	r22, Y+7	; 0x07
    37da:	78 85       	ldd	r23, Y+8	; 0x08
    37dc:	89 85       	ldd	r24, Y+9	; 0x09
    37de:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <H_LCD_void_sendCommand+0xfe>
    37fc:	9a 83       	std	Y+2, r25	; 0x02
    37fe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1); /* delay for processing Tas = 50ns */
	H_LCD_void_latchByte(command);
    3800:	8f 85       	ldd	r24, Y+15	; 0x0f
    3802:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <H_LCD_void_latchByte>

}
    3806:	2f 96       	adiw	r28, 0x0f	; 15
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <H_LCD_void_sendData>:

void H_LCD_void_sendData(uint8 data )
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	2f 97       	sbiw	r28, 0x0f	; 15
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Instruction Mode RS=0 */
    382e:	89 e3       	ldi	r24, 0x39	; 57
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	63 e0       	ldi	r22, 0x03	; 3
    3834:	41 e0       	ldi	r20, 0x01	; 1
    3836:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	a0 e8       	ldi	r26, 0x80	; 128
    3840:	bf e3       	ldi	r27, 0x3F	; 63
    3842:	8b 87       	std	Y+11, r24	; 0x0b
    3844:	9c 87       	std	Y+12, r25	; 0x0c
    3846:	ad 87       	std	Y+13, r26	; 0x0d
    3848:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384a:	6b 85       	ldd	r22, Y+11	; 0x0b
    384c:	7c 85       	ldd	r23, Y+12	; 0x0c
    384e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3850:	9e 85       	ldd	r25, Y+14	; 0x0e
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	4a e7       	ldi	r20, 0x7A	; 122
    3858:	55 e4       	ldi	r21, 0x45	; 69
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	8f 83       	std	Y+7, r24	; 0x07
    3864:	98 87       	std	Y+8, r25	; 0x08
    3866:	a9 87       	std	Y+9, r26	; 0x09
    3868:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    386a:	6f 81       	ldd	r22, Y+7	; 0x07
    386c:	78 85       	ldd	r23, Y+8	; 0x08
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	9a 85       	ldd	r25, Y+10	; 0x0a
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	2c f4       	brge	.+10     	; 0x388c <H_LCD_void_sendData+0x74>
		__ticks = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	9e 83       	std	Y+6, r25	; 0x06
    3888:	8d 83       	std	Y+5, r24	; 0x05
    388a:	3f c0       	rjmp	.+126    	; 0x390a <H_LCD_void_sendData+0xf2>
	else if (__tmp > 65535)
    388c:	6f 81       	ldd	r22, Y+7	; 0x07
    388e:	78 85       	ldd	r23, Y+8	; 0x08
    3890:	89 85       	ldd	r24, Y+9	; 0x09
    3892:	9a 85       	ldd	r25, Y+10	; 0x0a
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	3f ef       	ldi	r19, 0xFF	; 255
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	57 e4       	ldi	r21, 0x47	; 71
    389c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a0:	18 16       	cp	r1, r24
    38a2:	4c f5       	brge	.+82     	; 0x38f6 <H_LCD_void_sendData+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e2       	ldi	r20, 0x20	; 32
    38b2:	51 e4       	ldi	r21, 0x41	; 65
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	8d 83       	std	Y+5, r24	; 0x05
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <H_LCD_void_sendData+0xd4>
    38ce:	80 e9       	ldi	r24, 0x90	; 144
    38d0:	91 e0       	ldi	r25, 0x01	; 1
    38d2:	9c 83       	std	Y+4, r25	; 0x04
    38d4:	8b 83       	std	Y+3, r24	; 0x03
    38d6:	8b 81       	ldd	r24, Y+3	; 0x03
    38d8:	9c 81       	ldd	r25, Y+4	; 0x04
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <H_LCD_void_sendData+0xc2>
    38de:	9c 83       	std	Y+4, r25	; 0x04
    38e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	8d 81       	ldd	r24, Y+5	; 0x05
    38e4:	9e 81       	ldd	r25, Y+6	; 0x06
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	69 f7       	brne	.-38     	; 0x38ce <H_LCD_void_sendData+0xb6>
    38f4:	14 c0       	rjmp	.+40     	; 0x391e <H_LCD_void_sendData+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	6f 81       	ldd	r22, Y+7	; 0x07
    38f8:	78 85       	ldd	r23, Y+8	; 0x08
    38fa:	89 85       	ldd	r24, Y+9	; 0x09
    38fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	9e 83       	std	Y+6, r25	; 0x06
    3908:	8d 83       	std	Y+5, r24	; 0x05
    390a:	8d 81       	ldd	r24, Y+5	; 0x05
    390c:	9e 81       	ldd	r25, Y+6	; 0x06
    390e:	9a 83       	std	Y+2, r25	; 0x02
    3910:	89 83       	std	Y+1, r24	; 0x01
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	9a 81       	ldd	r25, Y+2	; 0x02
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <H_LCD_void_sendData+0xfe>
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tas = 50ns */
	H_LCD_void_latchByte(data);
    391e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3920:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <H_LCD_void_latchByte>

}
    3924:	2f 96       	adiw	r28, 0x0f	; 15
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	08 95       	ret

00003936 <H_LCD_void_sendString>:
/*
 * Description :
 * Display the required string on the screen
 */
void H_LCD_void_sendString(const char *Str)
{
    3936:	df 93       	push	r29
    3938:	cf 93       	push	r28
    393a:	00 d0       	rcall	.+0      	; 0x393c <H_LCD_void_sendString+0x6>
    393c:	0f 92       	push	r0
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	9b 83       	std	Y+3, r25	; 0x03
    3944:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3946:	19 82       	std	Y+1, r1	; 0x01
    3948:	0e c0       	rjmp	.+28     	; 0x3966 <H_LCD_void_sendString+0x30>
	while(Str[i] != '\0')
	{
		H_LCD_void_sendData(Str[i]);
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	28 2f       	mov	r18, r24
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	fc 01       	movw	r30, r24
    3956:	e2 0f       	add	r30, r18
    3958:	f3 1f       	adc	r31, r19
    395a:	80 81       	ld	r24, Z
    395c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <H_LCD_void_sendData>
		i++;
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	8f 5f       	subi	r24, 0xFF	; 255
    3964:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void H_LCD_void_sendString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	28 2f       	mov	r18, r24
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	8a 81       	ldd	r24, Y+2	; 0x02
    396e:	9b 81       	ldd	r25, Y+3	; 0x03
    3970:	fc 01       	movw	r30, r24
    3972:	e2 0f       	add	r30, r18
    3974:	f3 1f       	adc	r31, r19
    3976:	80 81       	ld	r24, Z
    3978:	88 23       	and	r24, r24
    397a:	39 f7       	brne	.-50     	; 0x394a <H_LCD_void_sendString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	 *********************************************************/
}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <H_LCD_void_gotoXY>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void H_LCD_void_gotoXY(uint8 row,uint8 col)
{
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	00 d0       	rcall	.+0      	; 0x398e <H_LCD_void_gotoXY+0x6>
    398e:	00 d0       	rcall	.+0      	; 0x3990 <H_LCD_void_gotoXY+0x8>
    3990:	0f 92       	push	r0
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	8a 83       	std	Y+2, r24	; 0x02
    3998:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    399a:	8a 81       	ldd	r24, Y+2	; 0x02
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	3d 83       	std	Y+5, r19	; 0x05
    39a2:	2c 83       	std	Y+4, r18	; 0x04
    39a4:	8c 81       	ldd	r24, Y+4	; 0x04
    39a6:	9d 81       	ldd	r25, Y+5	; 0x05
    39a8:	81 30       	cpi	r24, 0x01	; 1
    39aa:	91 05       	cpc	r25, r1
    39ac:	c1 f0       	breq	.+48     	; 0x39de <H_LCD_void_gotoXY+0x56>
    39ae:	2c 81       	ldd	r18, Y+4	; 0x04
    39b0:	3d 81       	ldd	r19, Y+5	; 0x05
    39b2:	22 30       	cpi	r18, 0x02	; 2
    39b4:	31 05       	cpc	r19, r1
    39b6:	2c f4       	brge	.+10     	; 0x39c2 <H_LCD_void_gotoXY+0x3a>
    39b8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ba:	9d 81       	ldd	r25, Y+5	; 0x05
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	61 f0       	breq	.+24     	; 0x39d8 <H_LCD_void_gotoXY+0x50>
    39c0:	19 c0       	rjmp	.+50     	; 0x39f4 <H_LCD_void_gotoXY+0x6c>
    39c2:	2c 81       	ldd	r18, Y+4	; 0x04
    39c4:	3d 81       	ldd	r19, Y+5	; 0x05
    39c6:	22 30       	cpi	r18, 0x02	; 2
    39c8:	31 05       	cpc	r19, r1
    39ca:	69 f0       	breq	.+26     	; 0x39e6 <H_LCD_void_gotoXY+0x5e>
    39cc:	8c 81       	ldd	r24, Y+4	; 0x04
    39ce:	9d 81       	ldd	r25, Y+5	; 0x05
    39d0:	83 30       	cpi	r24, 0x03	; 3
    39d2:	91 05       	cpc	r25, r1
    39d4:	61 f0       	breq	.+24     	; 0x39ee <H_LCD_void_gotoXY+0x66>
    39d6:	0e c0       	rjmp	.+28     	; 0x39f4 <H_LCD_void_gotoXY+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	89 83       	std	Y+1, r24	; 0x01
    39dc:	0b c0       	rjmp	.+22     	; 0x39f4 <H_LCD_void_gotoXY+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	80 5c       	subi	r24, 0xC0	; 192
    39e2:	89 83       	std	Y+1, r24	; 0x01
    39e4:	07 c0       	rjmp	.+14     	; 0x39f4 <H_LCD_void_gotoXY+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    39e6:	8b 81       	ldd	r24, Y+3	; 0x03
    39e8:	80 5f       	subi	r24, 0xF0	; 240
    39ea:	89 83       	std	Y+1, r24	; 0x01
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <H_LCD_void_gotoXY+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	80 5b       	subi	r24, 0xB0	; 176
    39f2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	H_LCD_void_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	80 68       	ori	r24, 0x80	; 128
    39f8:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendCommand>
}
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	00 d0       	rcall	.+0      	; 0x3a12 <LCD_displayStringRowColumn+0x6>
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <LCD_displayStringRowColumn+0x8>
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	6a 83       	std	Y+2, r22	; 0x02
    3a1c:	5c 83       	std	Y+4, r21	; 0x04
    3a1e:	4b 83       	std	Y+3, r20	; 0x03
	H_LCD_void_gotoXY(row,col); /* go to to the required LCD position */
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	6a 81       	ldd	r22, Y+2	; 0x02
    3a24:	0e 94 c4 1c 	call	0x3988	; 0x3988 <H_LCD_void_gotoXY>
	H_LCD_void_sendString(Str); /* display the string */
    3a28:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <H_LCD_void_sendString>
}
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	cf 91       	pop	r28
    3a3a:	df 91       	pop	r29
    3a3c:	08 95       	ret

00003a3e <H_LCD_void_sendIntNum>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void H_LCD_void_sendIntNum(uint32 data)
{
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	64 97       	sbiw	r28, 0x14	; 20
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	69 8b       	std	Y+17, r22	; 0x11
    3a54:	7a 8b       	std	Y+18, r23	; 0x12
    3a56:	8b 8b       	std	Y+19, r24	; 0x13
    3a58:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3a5a:	89 89       	ldd	r24, Y+17	; 0x11
    3a5c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a5e:	9e 01       	movw	r18, r28
    3a60:	2f 5f       	subi	r18, 0xFF	; 255
    3a62:	3f 4f       	sbci	r19, 0xFF	; 255
    3a64:	b9 01       	movw	r22, r18
    3a66:	4a e0       	ldi	r20, 0x0A	; 10
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <itoa>
	H_LCD_void_sendString(buff); /* Display the string */
    3a6e:	ce 01       	movw	r24, r28
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	0e 94 9b 1c 	call	0x3936	; 0x3936 <H_LCD_void_sendString>
}
    3a76:	64 96       	adiw	r28, 0x14	; 20
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	de bf       	out	0x3e, r29	; 62
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	cd bf       	out	0x3d, r28	; 61
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	08 95       	ret

00003a88 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendCommand>
}
    3a96:	cf 91       	pop	r28
    3a98:	df 91       	pop	r29
    3a9a:	08 95       	ret

00003a9c <Ultrasonic_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Ultrasonic_init(void)
{
    3a9c:	df 93       	push	r29
    3a9e:	cf 93       	push	r28
    3aa0:	00 d0       	rcall	.+0      	; 0x3aa2 <Ultrasonic_init+0x6>
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
	// Create configuration structure for ICU driver
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	89 83       	std	Y+1, r24	; 0x01
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	8a 83       	std	Y+2, r24	; 0x02

	// Initialize the ICU driver
	DIO_voidSetPinDirection(ICU_PORT,ICP1_PIN,INPUT);    // Configure ECHO PIN/PD6 as input pin
    3aae:	80 e3       	ldi	r24, 0x30	; 48
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	66 e0       	ldi	r22, 0x06	; 6
    3ab4:	40 e0       	ldi	r20, 0x00	; 0
    3ab6:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>

	ICU_init(&Icu_Config);
    3aba:	ce 01       	movw	r24, r28
    3abc:	01 96       	adiw	r24, 0x01	; 1
    3abe:	0e 94 8d 0c 	call	0x191a	; 0x191a <ICU_init>

	// Setup the ICU call back function
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    3ac2:	8d e0       	ldi	r24, 0x0D	; 13
    3ac4:	9f e1       	ldi	r25, 0x1F	; 31
    3ac6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <ICU_setCallBack>

	// Setup the direction for the trigger pin as output pin
	DIO_voidSetPinDirection(TRIGGER_PORT , TRIGGER_PIN , OUTPUT );
    3aca:	86 e3       	ldi	r24, 0x36	; 54
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	65 e0       	ldi	r22, 0x05	; 5
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
}
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	cf 91       	pop	r28
    3adc:	df 91       	pop	r29
    3ade:	08 95       	ret

00003ae0 <Ultrasonic_readDistance>:



uint16 Ultrasonic_readDistance(void)
{
    3ae0:	df 93       	push	r29
    3ae2:	cf 93       	push	r28
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();    // Send the trigger pulse
    3ae8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <Ultrasonic_Trigger>

	if(edgeCount == 2)
    3aec:	80 91 96 01 	lds	r24, 0x0196
    3af0:	82 30       	cpi	r24, 0x02	; 2
    3af2:	09 f0       	breq	.+2      	; 0x3af6 <Ultrasonic_readDistance+0x16>
    3af4:	aa c0       	rjmp	.+340    	; 0x3c4a <Ultrasonic_readDistance+0x16a>
	{
		edgeCount = 0;
    3af6:	10 92 96 01 	sts	0x0196, r1
		// Calculate the measured distance in cm
		distance=(timeHigh/57.5);
    3afa:	80 91 97 01 	lds	r24, 0x0197
    3afe:	90 91 98 01 	lds	r25, 0x0198
    3b02:	cc 01       	movw	r24, r24
    3b04:	a0 e0       	ldi	r26, 0x00	; 0
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	46 e6       	ldi	r20, 0x66	; 102
    3b1e:	52 e4       	ldi	r21, 0x42	; 66
    3b20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	80 93 99 01 	sts	0x0199, r24
    3b38:	90 93 9a 01 	sts	0x019A, r25
    3b3c:	a0 93 9b 01 	sts	0x019B, r26
    3b40:	b0 93 9c 01 	sts	0x019C, r27

		// To prevent ultrasonic reading to be different from the LCD reading:
		if (distance < 22)
    3b44:	80 91 99 01 	lds	r24, 0x0199
    3b48:	90 91 9a 01 	lds	r25, 0x019A
    3b4c:	a0 91 9b 01 	lds	r26, 0x019B
    3b50:	b0 91 9c 01 	lds	r27, 0x019C
    3b54:	86 31       	cpi	r24, 0x16	; 22
    3b56:	91 05       	cpc	r25, r1
    3b58:	a1 05       	cpc	r26, r1
    3b5a:	b1 05       	cpc	r27, r1
    3b5c:	98 f4       	brcc	.+38     	; 0x3b84 <Ultrasonic_readDistance+0xa4>
		{
			distance++;
    3b5e:	80 91 99 01 	lds	r24, 0x0199
    3b62:	90 91 9a 01 	lds	r25, 0x019A
    3b66:	a0 91 9b 01 	lds	r26, 0x019B
    3b6a:	b0 91 9c 01 	lds	r27, 0x019C
    3b6e:	01 96       	adiw	r24, 0x01	; 1
    3b70:	a1 1d       	adc	r26, r1
    3b72:	b1 1d       	adc	r27, r1
    3b74:	80 93 99 01 	sts	0x0199, r24
    3b78:	90 93 9a 01 	sts	0x019A, r25
    3b7c:	a0 93 9b 01 	sts	0x019B, r26
    3b80:	b0 93 9c 01 	sts	0x019C, r27
		}
		if (distance >= 137)
    3b84:	80 91 99 01 	lds	r24, 0x0199
    3b88:	90 91 9a 01 	lds	r25, 0x019A
    3b8c:	a0 91 9b 01 	lds	r26, 0x019B
    3b90:	b0 91 9c 01 	lds	r27, 0x019C
    3b94:	89 38       	cpi	r24, 0x89	; 137
    3b96:	91 05       	cpc	r25, r1
    3b98:	a1 05       	cpc	r26, r1
    3b9a:	b1 05       	cpc	r27, r1
    3b9c:	98 f0       	brcs	.+38     	; 0x3bc4 <Ultrasonic_readDistance+0xe4>
		{
			distance--;
    3b9e:	80 91 99 01 	lds	r24, 0x0199
    3ba2:	90 91 9a 01 	lds	r25, 0x019A
    3ba6:	a0 91 9b 01 	lds	r26, 0x019B
    3baa:	b0 91 9c 01 	lds	r27, 0x019C
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	a1 09       	sbc	r26, r1
    3bb2:	b1 09       	sbc	r27, r1
    3bb4:	80 93 99 01 	sts	0x0199, r24
    3bb8:	90 93 9a 01 	sts	0x019A, r25
    3bbc:	a0 93 9b 01 	sts	0x019B, r26
    3bc0:	b0 93 9c 01 	sts	0x019C, r27
		}
	    if (distance >= 254)
    3bc4:	80 91 99 01 	lds	r24, 0x0199
    3bc8:	90 91 9a 01 	lds	r25, 0x019A
    3bcc:	a0 91 9b 01 	lds	r26, 0x019B
    3bd0:	b0 91 9c 01 	lds	r27, 0x019C
    3bd4:	8e 3f       	cpi	r24, 0xFE	; 254
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	a1 05       	cpc	r26, r1
    3bda:	b1 05       	cpc	r27, r1
    3bdc:	98 f0       	brcs	.+38     	; 0x3c04 <Ultrasonic_readDistance+0x124>
	    {
			distance--;
    3bde:	80 91 99 01 	lds	r24, 0x0199
    3be2:	90 91 9a 01 	lds	r25, 0x019A
    3be6:	a0 91 9b 01 	lds	r26, 0x019B
    3bea:	b0 91 9c 01 	lds	r27, 0x019C
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	a1 09       	sbc	r26, r1
    3bf2:	b1 09       	sbc	r27, r1
    3bf4:	80 93 99 01 	sts	0x0199, r24
    3bf8:	90 93 9a 01 	sts	0x019A, r25
    3bfc:	a0 93 9b 01 	sts	0x019B, r26
    3c00:	b0 93 9c 01 	sts	0x019C, r27
	    }
	    if (distance >= 367)
    3c04:	80 91 99 01 	lds	r24, 0x0199
    3c08:	90 91 9a 01 	lds	r25, 0x019A
    3c0c:	a0 91 9b 01 	lds	r26, 0x019B
    3c10:	b0 91 9c 01 	lds	r27, 0x019C
    3c14:	8f 36       	cpi	r24, 0x6F	; 111
    3c16:	21 e0       	ldi	r18, 0x01	; 1
    3c18:	92 07       	cpc	r25, r18
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	a2 07       	cpc	r26, r18
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	b2 07       	cpc	r27, r18
    3c22:	98 f0       	brcs	.+38     	; 0x3c4a <Ultrasonic_readDistance+0x16a>
	    {
	    	distance--;
    3c24:	80 91 99 01 	lds	r24, 0x0199
    3c28:	90 91 9a 01 	lds	r25, 0x019A
    3c2c:	a0 91 9b 01 	lds	r26, 0x019B
    3c30:	b0 91 9c 01 	lds	r27, 0x019C
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	a1 09       	sbc	r26, r1
    3c38:	b1 09       	sbc	r27, r1
    3c3a:	80 93 99 01 	sts	0x0199, r24
    3c3e:	90 93 9a 01 	sts	0x019A, r25
    3c42:	a0 93 9b 01 	sts	0x019B, r26
    3c46:	b0 93 9c 01 	sts	0x019C, r27
	    }
	}

	return distance;
    3c4a:	80 91 99 01 	lds	r24, 0x0199
    3c4e:	90 91 9a 01 	lds	r25, 0x019A
    3c52:	a0 91 9b 01 	lds	r26, 0x019B
    3c56:	b0 91 9c 01 	lds	r27, 0x019C
}
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	68 97       	sbiw	r28, 0x18	; 24
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
	// Send the trigger pulse to the ultrasonic
	DIO_voidSetPinValue(TRIGGER_PORT, TRIGGER_PIN,LOGIC_HIGH );
    3c74:	86 e3       	ldi	r24, 0x36	; 54
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	65 e0       	ldi	r22, 0x05	; 5
    3c7a:	41 e0       	ldi	r20, 0x01	; 1
    3c7c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	a0 e2       	ldi	r26, 0x20	; 32
    3c86:	b1 e4       	ldi	r27, 0x41	; 65
    3c88:	8d 8b       	std	Y+21, r24	; 0x15
    3c8a:	9e 8b       	std	Y+22, r25	; 0x16
    3c8c:	af 8b       	std	Y+23, r26	; 0x17
    3c8e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c90:	6d 89       	ldd	r22, Y+21	; 0x15
    3c92:	7e 89       	ldd	r23, Y+22	; 0x16
    3c94:	8f 89       	ldd	r24, Y+23	; 0x17
    3c96:	98 8d       	ldd	r25, Y+24	; 0x18
    3c98:	2b ea       	ldi	r18, 0xAB	; 171
    3c9a:	3a ea       	ldi	r19, 0xAA	; 170
    3c9c:	4a ea       	ldi	r20, 0xAA	; 170
    3c9e:	50 e4       	ldi	r21, 0x40	; 64
    3ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	89 8b       	std	Y+17, r24	; 0x11
    3caa:	9a 8b       	std	Y+18, r25	; 0x12
    3cac:	ab 8b       	std	Y+19, r26	; 0x13
    3cae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3cb0:	69 89       	ldd	r22, Y+17	; 0x11
    3cb2:	7a 89       	ldd	r23, Y+18	; 0x12
    3cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e8       	ldi	r20, 0x80	; 128
    3cbe:	5f e3       	ldi	r21, 0x3F	; 63
    3cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc4:	88 23       	and	r24, r24
    3cc6:	1c f4       	brge	.+6      	; 0x3cce <Ultrasonic_Trigger+0x6e>
		__ticks = 1;
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	88 8b       	std	Y+16, r24	; 0x10
    3ccc:	91 c0       	rjmp	.+290    	; 0x3df0 <Ultrasonic_Trigger+0x190>
	else if (__tmp > 255)
    3cce:	69 89       	ldd	r22, Y+17	; 0x11
    3cd0:	7a 89       	ldd	r23, Y+18	; 0x12
    3cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	4f e7       	ldi	r20, 0x7F	; 127
    3cdc:	53 e4       	ldi	r21, 0x43	; 67
    3cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ce2:	18 16       	cp	r1, r24
    3ce4:	0c f0       	brlt	.+2      	; 0x3ce8 <Ultrasonic_Trigger+0x88>
    3ce6:	7b c0       	rjmp	.+246    	; 0x3dde <Ultrasonic_Trigger+0x17e>
	{
		_delay_ms(__us / 1000.0);
    3ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cea:	7e 89       	ldd	r23, Y+22	; 0x16
    3cec:	8f 89       	ldd	r24, Y+23	; 0x17
    3cee:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	4a e7       	ldi	r20, 0x7A	; 122
    3cf6:	54 e4       	ldi	r21, 0x44	; 68
    3cf8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8c 87       	std	Y+12, r24	; 0x0c
    3d02:	9d 87       	std	Y+13, r25	; 0x0d
    3d04:	ae 87       	std	Y+14, r26	; 0x0e
    3d06:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d08:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	4a e7       	ldi	r20, 0x7A	; 122
    3d16:	55 e4       	ldi	r21, 0x45	; 69
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	88 87       	std	Y+8, r24	; 0x08
    3d22:	99 87       	std	Y+9, r25	; 0x09
    3d24:	aa 87       	std	Y+10, r26	; 0x0a
    3d26:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d28:	68 85       	ldd	r22, Y+8	; 0x08
    3d2a:	79 85       	ldd	r23, Y+9	; 0x09
    3d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	40 e8       	ldi	r20, 0x80	; 128
    3d36:	5f e3       	ldi	r21, 0x3F	; 63
    3d38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d3c:	88 23       	and	r24, r24
    3d3e:	2c f4       	brge	.+10     	; 0x3d4a <Ultrasonic_Trigger+0xea>
		__ticks = 1;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	9f 83       	std	Y+7, r25	; 0x07
    3d46:	8e 83       	std	Y+6, r24	; 0x06
    3d48:	3f c0       	rjmp	.+126    	; 0x3dc8 <Ultrasonic_Trigger+0x168>
	else if (__tmp > 65535)
    3d4a:	68 85       	ldd	r22, Y+8	; 0x08
    3d4c:	79 85       	ldd	r23, Y+9	; 0x09
    3d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	3f ef       	ldi	r19, 0xFF	; 255
    3d56:	4f e7       	ldi	r20, 0x7F	; 127
    3d58:	57 e4       	ldi	r21, 0x47	; 71
    3d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d5e:	18 16       	cp	r1, r24
    3d60:	4c f5       	brge	.+82     	; 0x3db4 <Ultrasonic_Trigger+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d62:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d64:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d66:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d68:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e2       	ldi	r20, 0x20	; 32
    3d70:	51 e4       	ldi	r21, 0x41	; 65
    3d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	9f 83       	std	Y+7, r25	; 0x07
    3d88:	8e 83       	std	Y+6, r24	; 0x06
    3d8a:	0f c0       	rjmp	.+30     	; 0x3daa <Ultrasonic_Trigger+0x14a>
    3d8c:	80 e9       	ldi	r24, 0x90	; 144
    3d8e:	91 e0       	ldi	r25, 0x01	; 1
    3d90:	9d 83       	std	Y+5, r25	; 0x05
    3d92:	8c 83       	std	Y+4, r24	; 0x04
    3d94:	8c 81       	ldd	r24, Y+4	; 0x04
    3d96:	9d 81       	ldd	r25, Y+5	; 0x05
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <Ultrasonic_Trigger+0x138>
    3d9c:	9d 83       	std	Y+5, r25	; 0x05
    3d9e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da0:	8e 81       	ldd	r24, Y+6	; 0x06
    3da2:	9f 81       	ldd	r25, Y+7	; 0x07
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	9f 83       	std	Y+7, r25	; 0x07
    3da8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3daa:	8e 81       	ldd	r24, Y+6	; 0x06
    3dac:	9f 81       	ldd	r25, Y+7	; 0x07
    3dae:	00 97       	sbiw	r24, 0x00	; 0
    3db0:	69 f7       	brne	.-38     	; 0x3d8c <Ultrasonic_Trigger+0x12c>
    3db2:	24 c0       	rjmp	.+72     	; 0x3dfc <Ultrasonic_Trigger+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db4:	68 85       	ldd	r22, Y+8	; 0x08
    3db6:	79 85       	ldd	r23, Y+9	; 0x09
    3db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dba:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	9f 83       	std	Y+7, r25	; 0x07
    3dc6:	8e 83       	std	Y+6, r24	; 0x06
    3dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    3dca:	9f 81       	ldd	r25, Y+7	; 0x07
    3dcc:	9b 83       	std	Y+3, r25	; 0x03
    3dce:	8a 83       	std	Y+2, r24	; 0x02
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <Ultrasonic_Trigger+0x174>
    3dd8:	9b 83       	std	Y+3, r25	; 0x03
    3dda:	8a 83       	std	Y+2, r24	; 0x02
    3ddc:	0f c0       	rjmp	.+30     	; 0x3dfc <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dde:	69 89       	ldd	r22, Y+17	; 0x11
    3de0:	7a 89       	ldd	r23, Y+18	; 0x12
    3de2:	8b 89       	ldd	r24, Y+19	; 0x13
    3de4:	9c 89       	ldd	r25, Y+20	; 0x14
    3de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	88 8b       	std	Y+16, r24	; 0x10
    3df0:	88 89       	ldd	r24, Y+16	; 0x10
    3df2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	8a 95       	dec	r24
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <Ultrasonic_Trigger+0x196>
    3dfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIGGER_PORT, TRIGGER_PIN, LOGIC_LOW);
    3dfc:	86 e3       	ldi	r24, 0x36	; 54
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	65 e0       	ldi	r22, 0x05	; 5
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>

}
    3e08:	68 96       	adiw	r28, 0x18	; 24
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	cf 91       	pop	r28
    3e16:	df 91       	pop	r29
    3e18:	08 95       	ret

00003e1a <Ultrasonic_edgeProcessing>:


void Ultrasonic_edgeProcessing(void)
{
    3e1a:	df 93       	push	r29
    3e1c:	cf 93       	push	r28
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
	edgeCount++;
    3e22:	80 91 96 01 	lds	r24, 0x0196
    3e26:	8f 5f       	subi	r24, 0xFF	; 255
    3e28:	80 93 96 01 	sts	0x0196, r24
	if(edgeCount == 1)
    3e2c:	80 91 96 01 	lds	r24, 0x0196
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	31 f4       	brne	.+12     	; 0x3e40 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * reset the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    3e34:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <ICU_clearTimerValue>
		// Detect falling edge
		ICU_setEdgeDetectionType(FALLING);
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <ICU_setEdgeDetectionType>
    3e3e:	0d c0       	rjmp	.+26     	; 0x3e5a <Ultrasonic_edgeProcessing+0x40>
	}
	else if(edgeCount == 2)
    3e40:	80 91 96 01 	lds	r24, 0x0196
    3e44:	82 30       	cpi	r24, 0x02	; 2
    3e46:	49 f4       	brne	.+18     	; 0x3e5a <Ultrasonic_edgeProcessing+0x40>
	{
		// Store the High time value
		timeHigh = ICU_getInputCaptureValue();
    3e48:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <ICU_getInputCaptureValue>
    3e4c:	90 93 98 01 	sts	0x0198, r25
    3e50:	80 93 97 01 	sts	0x0197, r24
		// Detect rising edge
		ICU_setEdgeDetectionType(RISING);
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <ICU_setEdgeDetectionType>
	}
}
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	08 95       	ret

00003e60 <segment_init>:
#include "driver_7segment.h"



void segment_init(channel_number ch_num)
{
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	00 d0       	rcall	.+0      	; 0x3e66 <segment_init+0x6>
    3e66:	0f 92       	push	r0
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	89 83       	std	Y+1, r24	; 0x01
                      	  	  /***********************SET THE DIRECTION AS OUTPUT FOR ALL CHANNELS*********************/
	DIO_voidSetPinDirection(PORTB,PIN0_ID,OUTPUT);
    3e6e:	86 e3       	ldi	r24, 0x36	; 54
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN1_ID,OUTPUT);
    3e7a:	86 e3       	ldi	r24, 0x36	; 54
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	61 e0       	ldi	r22, 0x01	; 1
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN2_ID,OUTPUT);
    3e86:	86 e3       	ldi	r24, 0x36	; 54
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	62 e0       	ldi	r22, 0x02	; 2
    3e8c:	41 e0       	ldi	r20, 0x01	; 1
    3e8e:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN4_ID,OUTPUT);
    3e92:	86 e3       	ldi	r24, 0x36	; 54
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	64 e0       	ldi	r22, 0x04	; 4
    3e98:	41 e0       	ldi	r20, 0x01	; 1
    3e9a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PORTA,PIN3_ID,OUTPUT);
    3e9e:	89 e3       	ldi	r24, 0x39	; 57
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	63 e0       	ldi	r22, 0x03	; 3
    3ea4:	41 e0       	ldi	r20, 0x01	; 1
    3ea6:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN2_ID,OUTPUT);
    3eaa:	89 e3       	ldi	r24, 0x39	; 57
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	62 e0       	ldi	r22, 0x02	; 2
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN5_ID,OUTPUT);
    3eb6:	86 e3       	ldi	r24, 0x36	; 54
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	65 e0       	ldi	r22, 0x05	; 5
    3ebc:	41 e0       	ldi	r20, 0x01	; 1
    3ebe:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN6_ID,OUTPUT);
    3ec2:	86 e3       	ldi	r24, 0x36	; 54
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	66 e0       	ldi	r22, 0x06	; 6
    3ec8:	41 e0       	ldi	r20, 0x01	; 1
    3eca:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_voidSetPinDirection>


							/********************INITIALIZE ALL CHHANNELS TO DISPLAY ZERO*****************************/
	DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    3ece:	86 e3       	ldi	r24, 0x36	; 54
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	40 e0       	ldi	r20, 0x00	; 0
    3ed6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    3eda:	86 e3       	ldi	r24, 0x36	; 54
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	61 e0       	ldi	r22, 0x01	; 1
    3ee0:	40 e0       	ldi	r20, 0x00	; 0
    3ee2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    3ee6:	86 e3       	ldi	r24, 0x36	; 54
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	62 e0       	ldi	r22, 0x02	; 2
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    3ef2:	86 e3       	ldi	r24, 0x36	; 54
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	64 e0       	ldi	r22, 0x04	; 4
    3ef8:	40 e0       	ldi	r20, 0x00	; 0
    3efa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>


	switch(ch_num)
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	28 2f       	mov	r18, r24
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	3b 83       	std	Y+3, r19	; 0x03
    3f06:	2a 83       	std	Y+2, r18	; 0x02
    3f08:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f0c:	81 30       	cpi	r24, 0x01	; 1
    3f0e:	91 05       	cpc	r25, r1
    3f10:	79 f1       	breq	.+94     	; 0x3f70 <segment_init+0x110>
    3f12:	2a 81       	ldd	r18, Y+2	; 0x02
    3f14:	3b 81       	ldd	r19, Y+3	; 0x03
    3f16:	22 30       	cpi	r18, 0x02	; 2
    3f18:	31 05       	cpc	r19, r1
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <segment_init+0xc6>
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f20:	00 97       	sbiw	r24, 0x00	; 0
    3f22:	69 f0       	breq	.+26     	; 0x3f3e <segment_init+0xde>
    3f24:	6f c0       	rjmp	.+222    	; 0x4004 <segment_init+0x1a4>
    3f26:	2a 81       	ldd	r18, Y+2	; 0x02
    3f28:	3b 81       	ldd	r19, Y+3	; 0x03
    3f2a:	22 30       	cpi	r18, 0x02	; 2
    3f2c:	31 05       	cpc	r19, r1
    3f2e:	c9 f1       	breq	.+114    	; 0x3fa2 <segment_init+0x142>
    3f30:	8a 81       	ldd	r24, Y+2	; 0x02
    3f32:	9b 81       	ldd	r25, Y+3	; 0x03
    3f34:	83 30       	cpi	r24, 0x03	; 3
    3f36:	91 05       	cpc	r25, r1
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <segment_init+0xdc>
    3f3a:	4c c0       	rjmp	.+152    	; 0x3fd4 <segment_init+0x174>
    3f3c:	63 c0       	rjmp	.+198    	; 0x4004 <segment_init+0x1a4>
	{
												/***************SELECT THE FIRST CHANNEL AND DISABLE THE OTHERS*****************/

	case _1_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3f3e:	89 e3       	ldi	r24, 0x39	; 57
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	63 e0       	ldi	r22, 0x03	; 3
    3f44:	40 e0       	ldi	r20, 0x00	; 0
    3f46:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_HIGH);
    3f4a:	89 e3       	ldi	r24, 0x39	; 57
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	62 e0       	ldi	r22, 0x02	; 2
    3f50:	41 e0       	ldi	r20, 0x01	; 1
    3f52:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_HIGH);
    3f56:	86 e3       	ldi	r24, 0x36	; 54
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	65 e0       	ldi	r22, 0x05	; 5
    3f5c:	41 e0       	ldi	r20, 0x01	; 1
    3f5e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    3f62:	86 e3       	ldi	r24, 0x36	; 54
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	66 e0       	ldi	r22, 0x06	; 6
    3f68:	41 e0       	ldi	r20, 0x01	; 1
    3f6a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    3f6e:	4a c0       	rjmp	.+148    	; 0x4004 <segment_init+0x1a4>
		break;

												/***************SELECT THE FIRST & SECOND CHANNELS AND DISABLE THE OTHERS*****************/

	case _2_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3f70:	89 e3       	ldi	r24, 0x39	; 57
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	63 e0       	ldi	r22, 0x03	; 3
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    3f7c:	89 e3       	ldi	r24, 0x39	; 57
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	62 e0       	ldi	r22, 0x02	; 2
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_HIGH);
    3f88:	86 e3       	ldi	r24, 0x36	; 54
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	65 e0       	ldi	r22, 0x05	; 5
    3f8e:	41 e0       	ldi	r20, 0x01	; 1
    3f90:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    3f94:	86 e3       	ldi	r24, 0x36	; 54
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	66 e0       	ldi	r22, 0x06	; 6
    3f9a:	41 e0       	ldi	r20, 0x01	; 1
    3f9c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    3fa0:	31 c0       	rjmp	.+98     	; 0x4004 <segment_init+0x1a4>
		break;

												/***************SELECT THE FIRST,SECOND & THIRD CHANNEL AND DISABLE THE OTHER*****************/

	case _3_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3fa2:	89 e3       	ldi	r24, 0x39	; 57
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	63 e0       	ldi	r22, 0x03	; 3
    3fa8:	40 e0       	ldi	r20, 0x00	; 0
    3faa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    3fae:	89 e3       	ldi	r24, 0x39	; 57
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	62 e0       	ldi	r22, 0x02	; 2
    3fb4:	40 e0       	ldi	r20, 0x00	; 0
    3fb6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_LOW);
    3fba:	86 e3       	ldi	r24, 0x36	; 54
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	65 e0       	ldi	r22, 0x05	; 5
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_HIGH);
    3fc6:	86 e3       	ldi	r24, 0x36	; 54
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	66 e0       	ldi	r22, 0x06	; 6
    3fcc:	41 e0       	ldi	r20, 0x01	; 1
    3fce:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    3fd2:	18 c0       	rjmp	.+48     	; 0x4004 <segment_init+0x1a4>
		break;

												/***************SELECT ALL CHANNELS*****************/

	case _4_channels:
		DIO_voidSetPinValue(PORTA,PIN3_ID,LOGIC_LOW);
    3fd4:	89 e3       	ldi	r24, 0x39	; 57
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	63 e0       	ldi	r22, 0x03	; 3
    3fda:	40 e0       	ldi	r20, 0x00	; 0
    3fdc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA,PIN2_ID,LOGIC_LOW);
    3fe0:	89 e3       	ldi	r24, 0x39	; 57
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	62 e0       	ldi	r22, 0x02	; 2
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5_ID,LOGIC_LOW);
    3fec:	86 e3       	ldi	r24, 0x36	; 54
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	65 e0       	ldi	r22, 0x05	; 5
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6_ID,LOGIC_LOW);
    3ff8:	86 e3       	ldi	r24, 0x36	; 54
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	66 e0       	ldi	r22, 0x06	; 6
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		break;

	}


};
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	08 95       	ret

00004010 <segment_num>:


void segment_num(number num)
{
    4010:	df 93       	push	r29
    4012:	cf 93       	push	r28
    4014:	00 d0       	rcall	.+0      	; 0x4016 <segment_num+0x6>
    4016:	0f 92       	push	r0
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	28 2f       	mov	r18, r24
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	3b 83       	std	Y+3, r19	; 0x03
    4026:	2a 83       	std	Y+2, r18	; 0x02
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	9b 81       	ldd	r25, Y+3	; 0x03
    402c:	84 30       	cpi	r24, 0x04	; 4
    402e:	91 05       	cpc	r25, r1
    4030:	09 f4       	brne	.+2      	; 0x4034 <segment_num+0x24>
    4032:	ab c0       	rjmp	.+342    	; 0x418a <segment_num+0x17a>
    4034:	2a 81       	ldd	r18, Y+2	; 0x02
    4036:	3b 81       	ldd	r19, Y+3	; 0x03
    4038:	25 30       	cpi	r18, 0x05	; 5
    403a:	31 05       	cpc	r19, r1
    403c:	ec f4       	brge	.+58     	; 0x4078 <segment_num+0x68>
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	9b 81       	ldd	r25, Y+3	; 0x03
    4042:	81 30       	cpi	r24, 0x01	; 1
    4044:	91 05       	cpc	r25, r1
    4046:	09 f4       	brne	.+2      	; 0x404a <segment_num+0x3a>
    4048:	55 c0       	rjmp	.+170    	; 0x40f4 <segment_num+0xe4>
    404a:	2a 81       	ldd	r18, Y+2	; 0x02
    404c:	3b 81       	ldd	r19, Y+3	; 0x03
    404e:	22 30       	cpi	r18, 0x02	; 2
    4050:	31 05       	cpc	r19, r1
    4052:	2c f4       	brge	.+10     	; 0x405e <segment_num+0x4e>
    4054:	8a 81       	ldd	r24, Y+2	; 0x02
    4056:	9b 81       	ldd	r25, Y+3	; 0x03
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	99 f1       	breq	.+102    	; 0x40c2 <segment_num+0xb2>
    405c:	2b c1       	rjmp	.+598    	; 0x42b4 <segment_num+0x2a4>
    405e:	2a 81       	ldd	r18, Y+2	; 0x02
    4060:	3b 81       	ldd	r19, Y+3	; 0x03
    4062:	22 30       	cpi	r18, 0x02	; 2
    4064:	31 05       	cpc	r19, r1
    4066:	09 f4       	brne	.+2      	; 0x406a <segment_num+0x5a>
    4068:	5e c0       	rjmp	.+188    	; 0x4126 <segment_num+0x116>
    406a:	8a 81       	ldd	r24, Y+2	; 0x02
    406c:	9b 81       	ldd	r25, Y+3	; 0x03
    406e:	83 30       	cpi	r24, 0x03	; 3
    4070:	91 05       	cpc	r25, r1
    4072:	09 f4       	brne	.+2      	; 0x4076 <segment_num+0x66>
    4074:	71 c0       	rjmp	.+226    	; 0x4158 <segment_num+0x148>
    4076:	1e c1       	rjmp	.+572    	; 0x42b4 <segment_num+0x2a4>
    4078:	2a 81       	ldd	r18, Y+2	; 0x02
    407a:	3b 81       	ldd	r19, Y+3	; 0x03
    407c:	27 30       	cpi	r18, 0x07	; 7
    407e:	31 05       	cpc	r19, r1
    4080:	09 f4       	brne	.+2      	; 0x4084 <segment_num+0x74>
    4082:	ce c0       	rjmp	.+412    	; 0x4220 <segment_num+0x210>
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	9b 81       	ldd	r25, Y+3	; 0x03
    4088:	88 30       	cpi	r24, 0x08	; 8
    408a:	91 05       	cpc	r25, r1
    408c:	6c f4       	brge	.+26     	; 0x40a8 <segment_num+0x98>
    408e:	2a 81       	ldd	r18, Y+2	; 0x02
    4090:	3b 81       	ldd	r19, Y+3	; 0x03
    4092:	25 30       	cpi	r18, 0x05	; 5
    4094:	31 05       	cpc	r19, r1
    4096:	09 f4       	brne	.+2      	; 0x409a <segment_num+0x8a>
    4098:	91 c0       	rjmp	.+290    	; 0x41bc <segment_num+0x1ac>
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	9b 81       	ldd	r25, Y+3	; 0x03
    409e:	86 30       	cpi	r24, 0x06	; 6
    40a0:	91 05       	cpc	r25, r1
    40a2:	09 f4       	brne	.+2      	; 0x40a6 <segment_num+0x96>
    40a4:	a4 c0       	rjmp	.+328    	; 0x41ee <segment_num+0x1de>
    40a6:	06 c1       	rjmp	.+524    	; 0x42b4 <segment_num+0x2a4>
    40a8:	2a 81       	ldd	r18, Y+2	; 0x02
    40aa:	3b 81       	ldd	r19, Y+3	; 0x03
    40ac:	28 30       	cpi	r18, 0x08	; 8
    40ae:	31 05       	cpc	r19, r1
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <segment_num+0xa4>
    40b2:	cf c0       	rjmp	.+414    	; 0x4252 <segment_num+0x242>
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	9b 81       	ldd	r25, Y+3	; 0x03
    40b8:	89 30       	cpi	r24, 0x09	; 9
    40ba:	91 05       	cpc	r25, r1
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <segment_num+0xb0>
    40be:	e2 c0       	rjmp	.+452    	; 0x4284 <segment_num+0x274>
    40c0:	f9 c0       	rjmp	.+498    	; 0x42b4 <segment_num+0x2a4>
	{
													/********************DISPLAY ZERO*********************/
	case ZERO:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    40c2:	86 e3       	ldi	r24, 0x36	; 54
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    40ce:	86 e3       	ldi	r24, 0x36	; 54
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	61 e0       	ldi	r22, 0x01	; 1
    40d4:	40 e0       	ldi	r20, 0x00	; 0
    40d6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    40da:	86 e3       	ldi	r24, 0x36	; 54
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	62 e0       	ldi	r22, 0x02	; 2
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    40e6:	86 e3       	ldi	r24, 0x36	; 54
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	64 e0       	ldi	r22, 0x04	; 4
    40ec:	40 e0       	ldi	r20, 0x00	; 0
    40ee:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    40f2:	e0 c0       	rjmp	.+448    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY ONE*********************/

	case ONE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    40f4:	86 e3       	ldi	r24, 0x36	; 54
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	41 e0       	ldi	r20, 0x01	; 1
    40fc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    4100:	86 e3       	ldi	r24, 0x36	; 54
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	61 e0       	ldi	r22, 0x01	; 1
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    410c:	86 e3       	ldi	r24, 0x36	; 54
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    4118:	86 e3       	ldi	r24, 0x36	; 54
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	64 e0       	ldi	r22, 0x04	; 4
    411e:	40 e0       	ldi	r20, 0x00	; 0
    4120:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    4124:	c7 c0       	rjmp	.+398    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY TWO*********************/

	case TWO:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    4126:	86 e3       	ldi	r24, 0x36	; 54
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	40 e0       	ldi	r20, 0x00	; 0
    412e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    4132:	86 e3       	ldi	r24, 0x36	; 54
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	61 e0       	ldi	r22, 0x01	; 1
    4138:	41 e0       	ldi	r20, 0x01	; 1
    413a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    413e:	86 e3       	ldi	r24, 0x36	; 54
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	62 e0       	ldi	r22, 0x02	; 2
    4144:	40 e0       	ldi	r20, 0x00	; 0
    4146:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    414a:	86 e3       	ldi	r24, 0x36	; 54
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	64 e0       	ldi	r22, 0x04	; 4
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    4156:	ae c0       	rjmp	.+348    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY THREE*********************/

	case THREE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    4158:	86 e3       	ldi	r24, 0x36	; 54
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	41 e0       	ldi	r20, 0x01	; 1
    4160:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    4164:	86 e3       	ldi	r24, 0x36	; 54
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	61 e0       	ldi	r22, 0x01	; 1
    416a:	41 e0       	ldi	r20, 0x01	; 1
    416c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    4170:	86 e3       	ldi	r24, 0x36	; 54
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	62 e0       	ldi	r22, 0x02	; 2
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    417c:	86 e3       	ldi	r24, 0x36	; 54
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	64 e0       	ldi	r22, 0x04	; 4
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    4188:	95 c0       	rjmp	.+298    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY FOUR*********************/

	case FOUR:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    418a:	86 e3       	ldi	r24, 0x36	; 54
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	60 e0       	ldi	r22, 0x00	; 0
    4190:	40 e0       	ldi	r20, 0x00	; 0
    4192:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    4196:	86 e3       	ldi	r24, 0x36	; 54
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	61 e0       	ldi	r22, 0x01	; 1
    419c:	40 e0       	ldi	r20, 0x00	; 0
    419e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    41a2:	86 e3       	ldi	r24, 0x36	; 54
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	62 e0       	ldi	r22, 0x02	; 2
    41a8:	41 e0       	ldi	r20, 0x01	; 1
    41aa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    41ae:	86 e3       	ldi	r24, 0x36	; 54
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	64 e0       	ldi	r22, 0x04	; 4
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    41ba:	7c c0       	rjmp	.+248    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY FIVE*********************/

	case FIVE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    41bc:	86 e3       	ldi	r24, 0x36	; 54
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	41 e0       	ldi	r20, 0x01	; 1
    41c4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    41c8:	86 e3       	ldi	r24, 0x36	; 54
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	61 e0       	ldi	r22, 0x01	; 1
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    41d4:	86 e3       	ldi	r24, 0x36	; 54
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	62 e0       	ldi	r22, 0x02	; 2
    41da:	41 e0       	ldi	r20, 0x01	; 1
    41dc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    41e0:	86 e3       	ldi	r24, 0x36	; 54
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	64 e0       	ldi	r22, 0x04	; 4
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    41ec:	63 c0       	rjmp	.+198    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY SIX*********************/

	case SIX:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    41ee:	86 e3       	ldi	r24, 0x36	; 54
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    41fa:	86 e3       	ldi	r24, 0x36	; 54
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	61 e0       	ldi	r22, 0x01	; 1
    4200:	41 e0       	ldi	r20, 0x01	; 1
    4202:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    4206:	86 e3       	ldi	r24, 0x36	; 54
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	62 e0       	ldi	r22, 0x02	; 2
    420c:	41 e0       	ldi	r20, 0x01	; 1
    420e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    4212:	86 e3       	ldi	r24, 0x36	; 54
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	64 e0       	ldi	r22, 0x04	; 4
    4218:	40 e0       	ldi	r20, 0x00	; 0
    421a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    421e:	4a c0       	rjmp	.+148    	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY SEVEN*********************/

	case SEVEN:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    4220:	86 e3       	ldi	r24, 0x36	; 54
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	60 e0       	ldi	r22, 0x00	; 0
    4226:	41 e0       	ldi	r20, 0x01	; 1
    4228:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_HIGH);
    422c:	86 e3       	ldi	r24, 0x36	; 54
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	61 e0       	ldi	r22, 0x01	; 1
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_HIGH);
    4238:	86 e3       	ldi	r24, 0x36	; 54
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	62 e0       	ldi	r22, 0x02	; 2
    423e:	41 e0       	ldi	r20, 0x01	; 1
    4240:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_LOW);
    4244:	86 e3       	ldi	r24, 0x36	; 54
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	64 e0       	ldi	r22, 0x04	; 4
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    4250:	31 c0       	rjmp	.+98     	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY EIGHT*********************/

	case EIGHT:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_LOW);
    4252:	86 e3       	ldi	r24, 0x36	; 54
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    425e:	86 e3       	ldi	r24, 0x36	; 54
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    426a:	86 e3       	ldi	r24, 0x36	; 54
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	62 e0       	ldi	r22, 0x02	; 2
    4270:	40 e0       	ldi	r20, 0x00	; 0
    4272:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_HIGH);
    4276:	86 e3       	ldi	r24, 0x36	; 54
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	64 e0       	ldi	r22, 0x04	; 4
    427c:	41 e0       	ldi	r20, 0x01	; 1
    427e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
    4282:	18 c0       	rjmp	.+48     	; 0x42b4 <segment_num+0x2a4>
		break;
		/********************DISPLAY NINE*********************/

	case NINE:
		DIO_voidSetPinValue(PORTB,PIN0_ID,LOGIC_HIGH);
    4284:	86 e3       	ldi	r24, 0x36	; 54
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	60 e0       	ldi	r22, 0x00	; 0
    428a:	41 e0       	ldi	r20, 0x01	; 1
    428c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN1_ID,LOGIC_LOW);
    4290:	86 e3       	ldi	r24, 0x36	; 54
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN2_ID,LOGIC_LOW);
    429c:	86 e3       	ldi	r24, 0x36	; 54
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	62 e0       	ldi	r22, 0x02	; 2
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN4_ID,LOGIC_HIGH);
    42a8:	86 e3       	ldi	r24, 0x36	; 54
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	64 e0       	ldi	r22, 0x04	; 4
    42ae:	41 e0       	ldi	r20, 0x01	; 1
    42b0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_voidSetPinValue>
		break;

	};


}
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	cf 91       	pop	r28
    42bc:	df 91       	pop	r29
    42be:	08 95       	ret

000042c0 <main>:




int main ()
{
    42c0:	df 93       	push	r29
    42c2:	cf 93       	push	r28
    42c4:	00 d0       	rcall	.+0      	; 0x42c6 <main+0x6>
    42c6:	00 d0       	rcall	.+0      	; 0x42c8 <main+0x8>
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
	/*****************************UART_TESTING_DRIVER***********************/

	UART_configType UART_OBJ;
	UART_OBJ.size=BIT_8;
    42cc:	83 e0       	ldi	r24, 0x03	; 3
    42ce:	8a 83       	std	Y+2, r24	; 0x02
	UART_OBJ.stop=ONE_BIT;
    42d0:	1b 82       	std	Y+3, r1	; 0x03
	UART_OBJ.parity=DISABLED;
    42d2:	19 82       	std	Y+1, r1	; 0x01
	UART_init(9600,&UART_OBJ);
    42d4:	60 e8       	ldi	r22, 0x80	; 128
    42d6:	75 e2       	ldi	r23, 0x25	; 37
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	9e 01       	movw	r18, r28
    42de:	2f 5f       	subi	r18, 0xFF	; 255
    42e0:	3f 4f       	sbci	r19, 0xFF	; 255
    42e2:	a9 01       	movw	r20, r18
    42e4:	0e 94 66 10 	call	0x20cc	; 0x20cc <UART_init>
	UART_sendByte('9');
    42e8:	89 e3       	ldi	r24, 0x39	; 57
    42ea:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_sendByte>
	UART_sendString("foofa");
    42ee:	80 e6       	ldi	r24, 0x60	; 96
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	0e 94 3d 11 	call	0x227a	; 0x227a <UART_sendString>
    42f6:	ff cf       	rjmp	.-2      	; 0x42f6 <main+0x36>

000042f8 <__divmodhi4>:
    42f8:	97 fb       	bst	r25, 7
    42fa:	09 2e       	mov	r0, r25
    42fc:	07 26       	eor	r0, r23
    42fe:	0a d0       	rcall	.+20     	; 0x4314 <__divmodhi4_neg1>
    4300:	77 fd       	sbrc	r23, 7
    4302:	04 d0       	rcall	.+8      	; 0x430c <__divmodhi4_neg2>
    4304:	2e d0       	rcall	.+92     	; 0x4362 <__udivmodhi4>
    4306:	06 d0       	rcall	.+12     	; 0x4314 <__divmodhi4_neg1>
    4308:	00 20       	and	r0, r0
    430a:	1a f4       	brpl	.+6      	; 0x4312 <__divmodhi4_exit>

0000430c <__divmodhi4_neg2>:
    430c:	70 95       	com	r23
    430e:	61 95       	neg	r22
    4310:	7f 4f       	sbci	r23, 0xFF	; 255

00004312 <__divmodhi4_exit>:
    4312:	08 95       	ret

00004314 <__divmodhi4_neg1>:
    4314:	f6 f7       	brtc	.-4      	; 0x4312 <__divmodhi4_exit>
    4316:	90 95       	com	r25
    4318:	81 95       	neg	r24
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	08 95       	ret

0000431e <__udivmodsi4>:
    431e:	a1 e2       	ldi	r26, 0x21	; 33
    4320:	1a 2e       	mov	r1, r26
    4322:	aa 1b       	sub	r26, r26
    4324:	bb 1b       	sub	r27, r27
    4326:	fd 01       	movw	r30, r26
    4328:	0d c0       	rjmp	.+26     	; 0x4344 <__udivmodsi4_ep>

0000432a <__udivmodsi4_loop>:
    432a:	aa 1f       	adc	r26, r26
    432c:	bb 1f       	adc	r27, r27
    432e:	ee 1f       	adc	r30, r30
    4330:	ff 1f       	adc	r31, r31
    4332:	a2 17       	cp	r26, r18
    4334:	b3 07       	cpc	r27, r19
    4336:	e4 07       	cpc	r30, r20
    4338:	f5 07       	cpc	r31, r21
    433a:	20 f0       	brcs	.+8      	; 0x4344 <__udivmodsi4_ep>
    433c:	a2 1b       	sub	r26, r18
    433e:	b3 0b       	sbc	r27, r19
    4340:	e4 0b       	sbc	r30, r20
    4342:	f5 0b       	sbc	r31, r21

00004344 <__udivmodsi4_ep>:
    4344:	66 1f       	adc	r22, r22
    4346:	77 1f       	adc	r23, r23
    4348:	88 1f       	adc	r24, r24
    434a:	99 1f       	adc	r25, r25
    434c:	1a 94       	dec	r1
    434e:	69 f7       	brne	.-38     	; 0x432a <__udivmodsi4_loop>
    4350:	60 95       	com	r22
    4352:	70 95       	com	r23
    4354:	80 95       	com	r24
    4356:	90 95       	com	r25
    4358:	9b 01       	movw	r18, r22
    435a:	ac 01       	movw	r20, r24
    435c:	bd 01       	movw	r22, r26
    435e:	cf 01       	movw	r24, r30
    4360:	08 95       	ret

00004362 <__udivmodhi4>:
    4362:	aa 1b       	sub	r26, r26
    4364:	bb 1b       	sub	r27, r27
    4366:	51 e1       	ldi	r21, 0x11	; 17
    4368:	07 c0       	rjmp	.+14     	; 0x4378 <__udivmodhi4_ep>

0000436a <__udivmodhi4_loop>:
    436a:	aa 1f       	adc	r26, r26
    436c:	bb 1f       	adc	r27, r27
    436e:	a6 17       	cp	r26, r22
    4370:	b7 07       	cpc	r27, r23
    4372:	10 f0       	brcs	.+4      	; 0x4378 <__udivmodhi4_ep>
    4374:	a6 1b       	sub	r26, r22
    4376:	b7 0b       	sbc	r27, r23

00004378 <__udivmodhi4_ep>:
    4378:	88 1f       	adc	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	5a 95       	dec	r21
    437e:	a9 f7       	brne	.-22     	; 0x436a <__udivmodhi4_loop>
    4380:	80 95       	com	r24
    4382:	90 95       	com	r25
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	08 95       	ret

0000438a <__prologue_saves__>:
    438a:	2f 92       	push	r2
    438c:	3f 92       	push	r3
    438e:	4f 92       	push	r4
    4390:	5f 92       	push	r5
    4392:	6f 92       	push	r6
    4394:	7f 92       	push	r7
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	ca 1b       	sub	r28, r26
    43b4:	db 0b       	sbc	r29, r27
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	09 94       	ijmp

000043c2 <__epilogue_restores__>:
    43c2:	2a 88       	ldd	r2, Y+18	; 0x12
    43c4:	39 88       	ldd	r3, Y+17	; 0x11
    43c6:	48 88       	ldd	r4, Y+16	; 0x10
    43c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    43ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    43cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    43ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    43d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    43d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    43d4:	b9 84       	ldd	r11, Y+9	; 0x09
    43d6:	c8 84       	ldd	r12, Y+8	; 0x08
    43d8:	df 80       	ldd	r13, Y+7	; 0x07
    43da:	ee 80       	ldd	r14, Y+6	; 0x06
    43dc:	fd 80       	ldd	r15, Y+5	; 0x05
    43de:	0c 81       	ldd	r16, Y+4	; 0x04
    43e0:	1b 81       	ldd	r17, Y+3	; 0x03
    43e2:	aa 81       	ldd	r26, Y+2	; 0x02
    43e4:	b9 81       	ldd	r27, Y+1	; 0x01
    43e6:	ce 0f       	add	r28, r30
    43e8:	d1 1d       	adc	r29, r1
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	f8 94       	cli
    43ee:	de bf       	out	0x3e, r29	; 62
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	cd bf       	out	0x3d, r28	; 61
    43f4:	ed 01       	movw	r28, r26
    43f6:	08 95       	ret

000043f8 <itoa>:
    43f8:	fb 01       	movw	r30, r22
    43fa:	9f 01       	movw	r18, r30
    43fc:	e8 94       	clt
    43fe:	42 30       	cpi	r20, 0x02	; 2
    4400:	c4 f0       	brlt	.+48     	; 0x4432 <itoa+0x3a>
    4402:	45 32       	cpi	r20, 0x25	; 37
    4404:	b4 f4       	brge	.+44     	; 0x4432 <itoa+0x3a>
    4406:	4a 30       	cpi	r20, 0x0A	; 10
    4408:	29 f4       	brne	.+10     	; 0x4414 <itoa+0x1c>
    440a:	97 fb       	bst	r25, 7
    440c:	1e f4       	brtc	.+6      	; 0x4414 <itoa+0x1c>
    440e:	90 95       	com	r25
    4410:	81 95       	neg	r24
    4412:	9f 4f       	sbci	r25, 0xFF	; 255
    4414:	64 2f       	mov	r22, r20
    4416:	77 27       	eor	r23, r23
    4418:	0e 94 b1 21 	call	0x4362	; 0x4362 <__udivmodhi4>
    441c:	80 5d       	subi	r24, 0xD0	; 208
    441e:	8a 33       	cpi	r24, 0x3A	; 58
    4420:	0c f0       	brlt	.+2      	; 0x4424 <itoa+0x2c>
    4422:	89 5d       	subi	r24, 0xD9	; 217
    4424:	81 93       	st	Z+, r24
    4426:	cb 01       	movw	r24, r22
    4428:	00 97       	sbiw	r24, 0x00	; 0
    442a:	a1 f7       	brne	.-24     	; 0x4414 <itoa+0x1c>
    442c:	16 f4       	brtc	.+4      	; 0x4432 <itoa+0x3a>
    442e:	5d e2       	ldi	r21, 0x2D	; 45
    4430:	51 93       	st	Z+, r21
    4432:	10 82       	st	Z, r1
    4434:	c9 01       	movw	r24, r18
    4436:	0c 94 1d 22 	jmp	0x443a	; 0x443a <strrev>

0000443a <strrev>:
    443a:	dc 01       	movw	r26, r24
    443c:	fc 01       	movw	r30, r24
    443e:	67 2f       	mov	r22, r23
    4440:	71 91       	ld	r23, Z+
    4442:	77 23       	and	r23, r23
    4444:	e1 f7       	brne	.-8      	; 0x443e <strrev+0x4>
    4446:	32 97       	sbiw	r30, 0x02	; 2
    4448:	04 c0       	rjmp	.+8      	; 0x4452 <strrev+0x18>
    444a:	7c 91       	ld	r23, X
    444c:	6d 93       	st	X+, r22
    444e:	70 83       	st	Z, r23
    4450:	62 91       	ld	r22, -Z
    4452:	ae 17       	cp	r26, r30
    4454:	bf 07       	cpc	r27, r31
    4456:	c8 f3       	brcs	.-14     	; 0x444a <strrev+0x10>
    4458:	08 95       	ret

0000445a <_exit>:
    445a:	f8 94       	cli

0000445c <__stop_program>:
    445c:	ff cf       	rjmp	.-2      	; 0x445c <__stop_program>
